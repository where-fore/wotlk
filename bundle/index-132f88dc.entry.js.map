{"version":3,"file":"index-132f88dc.entry.js","sources":["../../../ui/raid/presets.ts","../../../ui/raid/raid_picker.ts","../../../ui/raid/raid_stats.ts","../../../ui/raid/raid_tab.ts","../../../ui/core/components/raid_target_picker.ts","../../../ui/raid/assignments_picker.ts","../../../ui/raid/blessings_picker.ts","../../../ui/raid/tanks_picker.ts","../../../ui/raid/settings_tab.ts","../../../ui/raid/import_export.ts","../../../ui/raid/raid_sim_ui.ts","../../../ui/raid/index.ts"],"sourcesContent":["import { IndividualSimUI, OtherDefaults } from '../core/individual_sim_ui.js';\n\nimport {\n\tClass,\n\tConsumes,\n\tEquipmentSpec,\n\tFaction,\n\tRace,\n\tSpec\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\nimport {\n\tgetSpecIcon,\n\tspecNames,\n\tSpecOptions,\n\tSpecRotation,\n} from '../core/proto_utils/utils.js';\n\nimport { Player } from '../core/player.js';\n\nimport * as TankDeathknightPresets from '../tank_deathknight/presets.js';\nimport * as DeathknightPresets from '../deathknight/presets.js';\nimport * as BalanceDruidPresets from '../balance_druid/presets.js';\nimport * as FeralDruidPresets from '../feral_druid/presets.js';\nimport * as FeralTankDruidPresets from '../feral_tank_druid/presets.js';\nimport * as RestorationDruidPresets from '../restoration_druid/presets.js';\nimport * as ElementalShamanPresets from '../elemental_shaman/presets.js';\nimport * as EnhancementShamanPresets from '../enhancement_shaman/presets.js';\nimport * as RestorationShamanPresets from '../restoration_shaman/presets.js';\nimport * as HunterPresets from '../hunter/presets.js';\nimport * as MagePresets from '../mage/presets.js';\nimport * as RoguePresets from '../rogue/presets.js';\nimport * as HolyPaladinPresets from '../holy_paladin/presets.js';\nimport * as ProtectionPaladinPresets from '../protection_paladin/presets.js';\nimport * as RetributionPaladinPresets from '../retribution_paladin/presets.js';\nimport * as HealingPriestPresets from '../healing_priest/presets.js';\nimport * as ShadowPriestPresets from '../shadow_priest/presets.js';\nimport * as SmitePriestPresets from '../smite_priest/presets.js';\nimport * as WarriorPresets from '../warrior/presets.js';\nimport * as ProtectionWarriorPresets from '../protection_warrior/presets.js';\nimport * as WarlockPresets from '../warlock/presets.js';\n\nimport { TankDeathknightSimUI } from '../tank_deathknight/sim.js';\nimport { DeathknightSimUI } from '../deathknight/sim.js';\nimport { BalanceDruidSimUI } from '../balance_druid/sim.js';\nimport { FeralDruidSimUI } from '../feral_druid/sim.js';\nimport { FeralTankDruidSimUI } from '../feral_tank_druid/sim.js';\nimport { RestorationDruidSimUI } from '../restoration_druid/sim.js';\nimport { ElementalShamanSimUI } from '../elemental_shaman/sim.js';\nimport { EnhancementShamanSimUI } from '../enhancement_shaman/sim.js';\nimport { RestorationShamanSimUI } from '../restoration_shaman/sim.js';\nimport { HunterSimUI } from '../hunter/sim.js';\nimport { MageSimUI } from '../mage/sim.js';\nimport { RogueSimUI } from '../rogue/sim.js';\nimport { HolyPaladinSimUI } from '../holy_paladin/sim.js';\nimport { ProtectionPaladinSimUI } from '../protection_paladin/sim.js';\nimport { RetributionPaladinSimUI } from '../retribution_paladin/sim.js';\nimport { HealingPriestSimUI } from '../healing_priest/sim.js';\nimport { ShadowPriestSimUI } from '../shadow_priest/sim.js';\nimport { SmitePriestSimUI } from '../smite_priest/sim.js';\nimport { WarriorSimUI } from '../warrior/sim.js';\nimport { ProtectionWarriorSimUI } from '../protection_warrior/sim.js';\nimport { WarlockSimUI } from '../warlock/sim.js';\n\nexport const specSimFactories: Record<Spec, (parentElem: HTMLElement, player: Player<any>) => IndividualSimUI<any>> = {\n\t[Spec.SpecTankDeathknight]: (parentElem: HTMLElement, player: Player<any>) => new TankDeathknightSimUI(parentElem, player),\n\t[Spec.SpecDeathknight]: (parentElem: HTMLElement, player: Player<any>) => new DeathknightSimUI(parentElem, player),\n\t[Spec.SpecBalanceDruid]: (parentElem: HTMLElement, player: Player<any>) => new BalanceDruidSimUI(parentElem, player),\n\t[Spec.SpecFeralDruid]: (parentElem: HTMLElement, player: Player<any>) => new FeralDruidSimUI(parentElem, player),\n\t[Spec.SpecFeralTankDruid]: (parentElem: HTMLElement, player: Player<any>) => new FeralTankDruidSimUI(parentElem, player),\n\t[Spec.SpecRestorationDruid]: (parentElem: HTMLElement, player: Player<any>) => new RestorationDruidSimUI(parentElem, player),\n\t[Spec.SpecElementalShaman]: (parentElem: HTMLElement, player: Player<any>) => new ElementalShamanSimUI(parentElem, player),\n\t[Spec.SpecEnhancementShaman]: (parentElem: HTMLElement, player: Player<any>) => new EnhancementShamanSimUI(parentElem, player),\n\t[Spec.SpecRestorationShaman]: (parentElem: HTMLElement, player: Player<any>) => new RestorationShamanSimUI(parentElem, player),\n\t[Spec.SpecHunter]: (parentElem: HTMLElement, player: Player<any>) => new HunterSimUI(parentElem, player),\n\t[Spec.SpecMage]: (parentElem: HTMLElement, player: Player<any>) => new MageSimUI(parentElem, player),\n\t[Spec.SpecRogue]: (parentElem: HTMLElement, player: Player<any>) => new RogueSimUI(parentElem, player),\n\t[Spec.SpecHolyPaladin]: (parentElem: HTMLElement, player: Player<any>) => new HolyPaladinSimUI(parentElem, player),\n\t[Spec.SpecProtectionPaladin]: (parentElem: HTMLElement, player: Player<any>) => new ProtectionPaladinSimUI(parentElem, player),\n\t[Spec.SpecRetributionPaladin]: (parentElem: HTMLElement, player: Player<any>) => new RetributionPaladinSimUI(parentElem, player),\n\t[Spec.SpecHealingPriest]: (parentElem: HTMLElement, player: Player<any>) => new HealingPriestSimUI(parentElem, player),\n\t[Spec.SpecShadowPriest]: (parentElem: HTMLElement, player: Player<any>) => new ShadowPriestSimUI(parentElem, player),\n\t[Spec.SpecSmitePriest]: (parentElem: HTMLElement, player: Player<any>) => new SmitePriestSimUI(parentElem, player),\n\t[Spec.SpecWarrior]: (parentElem: HTMLElement, player: Player<any>) => new WarriorSimUI(parentElem, player),\n\t[Spec.SpecProtectionWarrior]: (parentElem: HTMLElement, player: Player<any>) => new ProtectionWarriorSimUI(parentElem, player),\n\t[Spec.SpecWarlock]: (parentElem: HTMLElement, player: Player<any>) => new WarlockSimUI(parentElem, player),\n};\n\n// Configuration necessary for creating new players.\nexport interface PresetSpecSettings<SpecType extends Spec> {\n\tspec: Spec,\n\trotation: SpecRotation<SpecType>,\n\ttalents: SavedTalents,\n\tspecOptions: SpecOptions<SpecType>,\n\tconsumes: Consumes,\n\n\tdefaultName: string,\n\tdefaultFactionRaces: Record<Faction, Race>,\n\tdefaultGear: Record<Faction, Record<number, EquipmentSpec>>,\n\totherDefaults?: OtherDefaults,\n\n\ttooltip: string,\n\ticonUrl: string,\n}\n\nexport const playerPresets: Array<PresetSpecSettings<any>> = [\n\t{\n\t\tspec: Spec.SpecTankDeathknight,\n\t\trotation: TankDeathknightPresets.DefaultRotation,\n\t\ttalents: TankDeathknightPresets.BloodTalents.data,\n\t\tspecOptions: TankDeathknightPresets.DefaultOptions,\n\t\tconsumes: TankDeathknightPresets.DefaultConsumes,\n\t\tdefaultName: 'Blood Tank',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: TankDeathknightPresets.P1_BLOOD_PRESET.gear,\n\t\t\t\t2: TankDeathknightPresets.P2_BLOOD_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: TankDeathknightPresets.P1_BLOOD_PRESET.gear,\n\t\t\t\t2: TankDeathknightPresets.P2_BLOOD_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Blood Tank Death Knight',\n\t\ticonUrl: getSpecIcon(Class.ClassDeathknight, 0),\n\t},\n\t{\n\t\tspec: Spec.SpecDeathknight,\n\t\trotation: DeathknightPresets.DefaultBloodRotation,\n\t\ttalents: DeathknightPresets.BloodTalents.data,\n\t\tspecOptions: DeathknightPresets.DefaultBloodOptions,\n\t\tconsumes: DeathknightPresets.DefaultConsumes,\n\t\tdefaultName: 'Blood DPS',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: DeathknightPresets.P1_BLOOD_BIS_PRESET.gear,\n\t\t\t\t2: DeathknightPresets.P2_BLOOD_BIS_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: DeathknightPresets.P1_BLOOD_BIS_PRESET.gear,\n\t\t\t\t2: DeathknightPresets.P2_BLOOD_BIS_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Blood DPS Death Knight',\n\t\ticonUrl: getSpecIcon(Class.ClassDeathknight, 3),\n\t},\n\t{\n\t\tspec: Spec.SpecDeathknight,\n\t\trotation: DeathknightPresets.DefaultFrostRotation,\n\t\ttalents: DeathknightPresets.FrostTalents.data,\n\t\tspecOptions: DeathknightPresets.DefaultFrostOptions,\n\t\tconsumes: DeathknightPresets.DefaultConsumes,\n\t\tdefaultName: 'Frost',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: DeathknightPresets.P1_FROST_BIS_PRESET.gear,\n\t\t\t\t2: DeathknightPresets.P2_FROST_BIS_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: DeathknightPresets.P1_FROST_BIS_PRESET.gear,\n\t\t\t\t2: DeathknightPresets.P2_FROST_BIS_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\totherDefaults: DeathknightPresets.OtherDefaults,\n\t\ttooltip: 'Frost Death Knight',\n\t\ticonUrl: getSpecIcon(Class.ClassDeathknight, 1),\n\t},\n\t{\n\t\tspec: Spec.SpecDeathknight,\n\t\trotation: DeathknightPresets.DefaultUnholyRotation,\n\t\ttalents: DeathknightPresets.UnholyDualWieldTalents.data,\n\t\tspecOptions: DeathknightPresets.DefaultUnholyOptions,\n\t\tconsumes: DeathknightPresets.DefaultConsumes,\n\t\tdefaultName: 'Unholy',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: DeathknightPresets.P1_UNHOLY_DW_BIS_PRESET.gear,\n\t\t\t\t2: DeathknightPresets.P2_UNHOLY_DW_BIS_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: DeathknightPresets.P1_UNHOLY_DW_BIS_PRESET.gear,\n\t\t\t\t2: DeathknightPresets.P2_UNHOLY_DW_BIS_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\totherDefaults: DeathknightPresets.OtherDefaults,\n\t\ttooltip: 'Dual-Wield Unholy DK',\n\t\ticonUrl: getSpecIcon(Class.ClassDeathknight, 2),\n\t},\n\t{\n\t\tspec: Spec.SpecBalanceDruid,\n\t\trotation: BalanceDruidPresets.DefaultRotation,\n\t\ttalents: BalanceDruidPresets.StandardTalents.data,\n\t\tspecOptions: BalanceDruidPresets.DefaultOptions,\n\t\tconsumes: BalanceDruidPresets.DefaultConsumes,\n\t\totherDefaults: BalanceDruidPresets.OtherDefaults,\n\t\tdefaultName: 'Balance',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t[Faction.Horde]: Race.RaceTauren,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: BalanceDruidPresets.P1_PRESET.gear,\n\t\t\t\t2: BalanceDruidPresets.P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: BalanceDruidPresets.P1_PRESET.gear,\n\t\t\t\t2: BalanceDruidPresets.P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecBalanceDruid],\n\t\ticonUrl: getSpecIcon(Class.ClassDruid, 0),\n\t},\n\t{\n\t\tspec: Spec.SpecFeralDruid,\n\t\trotation: FeralDruidPresets.DefaultRotation,\n\t\ttalents: FeralDruidPresets.StandardTalents.data,\n\t\tspecOptions: FeralDruidPresets.DefaultOptions,\n\t\tconsumes: FeralDruidPresets.DefaultConsumes,\n\t\tdefaultName: 'Cat',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t[Faction.Horde]: Race.RaceTauren,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: FeralDruidPresets.P1_PRESET.gear,\n\t\t\t\t2: FeralDruidPresets.P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: FeralDruidPresets.P1_PRESET.gear,\n\t\t\t\t2: FeralDruidPresets.P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecFeralDruid],\n\t\ticonUrl: getSpecIcon(Class.ClassDruid, 3),\n\t},\n\t{\n\t\tspec: Spec.SpecFeralTankDruid,\n\t\trotation: FeralTankDruidPresets.DefaultRotation,\n\t\ttalents: FeralTankDruidPresets.StandardTalents.data,\n\t\tspecOptions: FeralTankDruidPresets.DefaultOptions,\n\t\tconsumes: FeralTankDruidPresets.DefaultConsumes,\n\t\tdefaultName: 'Bear',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t[Faction.Horde]: Race.RaceTauren,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: FeralTankDruidPresets.P1_PRESET.gear,\n\t\t\t\t2: FeralTankDruidPresets.P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: FeralTankDruidPresets.P1_PRESET.gear,\n\t\t\t\t2: FeralTankDruidPresets.P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecFeralTankDruid],\n\t\ticonUrl: getSpecIcon(Class.ClassDruid, 1),\n\t},\n\t{\n\t\tspec: Spec.SpecRestorationDruid,\n\t\trotation: RestorationDruidPresets.DefaultRotation,\n\t\ttalents: RestorationDruidPresets.CelestialFocusTalents.data,\n\t\tspecOptions: RestorationDruidPresets.DefaultOptions,\n\t\tconsumes: RestorationDruidPresets.DefaultConsumes,\n\t\tdefaultName: 'Restoration',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t[Faction.Horde]: Race.RaceTauren,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: RestorationDruidPresets.P1_PRESET.gear,\n\t\t\t\t2: RestorationDruidPresets.P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: RestorationDruidPresets.P1_PRESET.gear,\n\t\t\t\t2: RestorationDruidPresets.P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecRestorationDruid],\n\t\ticonUrl: getSpecIcon(Class.ClassDruid, 2),\n\t},\n\t{\n\t\tspec: Spec.SpecHunter,\n\t\trotation: HunterPresets.DefaultRotation,\n\t\ttalents: HunterPresets.BeastMasteryTalents.data,\n\t\tspecOptions: HunterPresets.BMDefaultOptions,\n\t\tconsumes: HunterPresets.DefaultConsumes,\n\t\tdefaultName: 'Beast Mastery',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: HunterPresets.MM_P1_PRESET.gear,\n\t\t\t\t2: HunterPresets.MM_P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: HunterPresets.MM_P1_PRESET.gear,\n\t\t\t\t2: HunterPresets.MM_P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Beast Mastery Hunter',\n\t\ticonUrl: getSpecIcon(Class.ClassHunter, 0),\n\t},\n\t{\n\t\tspec: Spec.SpecHunter,\n\t\trotation: HunterPresets.DefaultRotation,\n\t\ttalents: HunterPresets.MarksmanTalents.data,\n\t\tspecOptions: HunterPresets.DefaultOptions,\n\t\tconsumes: HunterPresets.DefaultConsumes,\n\t\tdefaultName: 'Marksmanship',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: HunterPresets.MM_P1_PRESET.gear,\n\t\t\t\t2: HunterPresets.MM_P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: HunterPresets.MM_P1_PRESET.gear,\n\t\t\t\t2: HunterPresets.MM_P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Marksmanship Hunter',\n\t\ticonUrl: getSpecIcon(Class.ClassHunter, 1),\n\t},\n\t{\n\t\tspec: Spec.SpecHunter,\n\t\trotation: HunterPresets.DefaultRotation,\n\t\ttalents: HunterPresets.SurvivalTalents.data,\n\t\tspecOptions: HunterPresets.DefaultOptions,\n\t\tconsumes: HunterPresets.DefaultConsumes,\n\t\tdefaultName: 'Survival',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: HunterPresets.SV_P1_PRESET.gear,\n\t\t\t\t2: HunterPresets.SV_P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: HunterPresets.SV_P1_PRESET.gear,\n\t\t\t\t2: HunterPresets.SV_P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Survival Hunter',\n\t\ticonUrl: getSpecIcon(Class.ClassHunter, 2),\n\t},\n\t{\n\t\tspec: Spec.SpecMage,\n\t\trotation: MagePresets.DefaultArcaneRotation,\n\t\ttalents: MagePresets.ArcaneTalents.data,\n\t\tspecOptions: MagePresets.DefaultArcaneOptions,\n\t\tconsumes: MagePresets.DefaultArcaneConsumes,\n\t\totherDefaults: MagePresets.OtherDefaults,\n\t\tdefaultName: 'Arcane',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceGnome,\n\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: MagePresets.ARCANE_P1_PRESET.gear,\n\t\t\t\t2: MagePresets.ARCANE_P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: MagePresets.ARCANE_P1_PRESET.gear,\n\t\t\t\t2: MagePresets.ARCANE_P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Arcane Mage',\n\t\ticonUrl: getSpecIcon(Class.ClassMage, 0),\n\t},\n\t{\n\t\tspec: Spec.SpecMage,\n\t\trotation: MagePresets.DefaultFireRotation,\n\t\ttalents: MagePresets.FireTalents.data,\n\t\tspecOptions: MagePresets.DefaultFireOptions,\n\t\tconsumes: MagePresets.DefaultFireConsumes,\n\t\totherDefaults: MagePresets.OtherDefaults,\t\t\n\t\tdefaultName: 'Fire',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceGnome,\n\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: MagePresets.FIRE_P1_PRESET.gear,\n\t\t\t\t2: MagePresets.FIRE_P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: MagePresets.FIRE_P1_PRESET.gear,\n\t\t\t\t2: MagePresets.FIRE_P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Fire Mage',\n\t\ticonUrl: getSpecIcon(Class.ClassMage, 1),\n\t},\n\t{\n\t\tspec: Spec.SpecMage,\n\t\trotation: MagePresets.DefaultFrostRotation,\n\t\ttalents: MagePresets.FrostTalents.data,\n\t\tspecOptions: MagePresets.DefaultFrostOptions,\n\t\tconsumes: MagePresets.DefaultFrostConsumes,\n\t\totherDefaults: MagePresets.OtherDefaults,\t\t\n\t\tdefaultName: 'Frost',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceGnome,\n\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: MagePresets.FROST_P1_PRESET.gear,\n\t\t\t\t2: MagePresets.FROST_P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: MagePresets.FROST_P1_PRESET.gear,\n\t\t\t\t2: MagePresets.FROST_P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Frost Mage',\n\t\ticonUrl: getSpecIcon(Class.ClassMage, 2),\n\t},\n\t{\n\t\tspec: Spec.SpecRogue,\n\t\trotation: RoguePresets.DefaultRotation,\n\t\ttalents: RoguePresets.AssassinationTalents.data,\n\t\tspecOptions: RoguePresets.DefaultOptions,\n\t\tconsumes: RoguePresets.DefaultConsumes,\n\t\tdefaultName: 'Assassination',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: RoguePresets.P1_PRESET_ASSASSINATION.gear,\n\t\t\t\t2: RoguePresets.P2_PRESET_ASSASSINATION.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: RoguePresets.P1_PRESET_ASSASSINATION.gear,\n\t\t\t\t2: RoguePresets.P2_PRESET_ASSASSINATION.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Assassination Rogue',\n\t\ticonUrl: getSpecIcon(Class.ClassRogue, 0),\n\t},\n\t{\n\t\tspec: Spec.SpecRogue,\n\t\trotation: RoguePresets.DefaultRotation,\n\t\ttalents: RoguePresets.CombatTalents.data,\n\t\tspecOptions: RoguePresets.DefaultOptions,\n\t\tconsumes: RoguePresets.DefaultConsumes,\n\t\tdefaultName: 'Combat',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: RoguePresets.P1_PRESET_COMBAT.gear,\n\t\t\t\t2: RoguePresets.P2_PRESET_COMBAT.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: RoguePresets.P1_PRESET_COMBAT.gear,\n\t\t\t\t2: RoguePresets.P2_PRESET_COMBAT.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Combat Rogue',\n\t\ticonUrl: getSpecIcon(Class.ClassRogue, 1),\n\t},\n\t{\n\t\tspec: Spec.SpecElementalShaman,\n\t\trotation: ElementalShamanPresets.DefaultRotation,\n\t\ttalents: ElementalShamanPresets.StandardTalents.data,\n\t\tspecOptions: ElementalShamanPresets.DefaultOptions,\n\t\tconsumes: ElementalShamanPresets.DefaultConsumes,\n\t\tdefaultName: 'Elemental',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceDraenei,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: ElementalShamanPresets.P1_PRESET.gear,\n\t\t\t\t2: ElementalShamanPresets.P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: ElementalShamanPresets.P1_PRESET.gear,\n\t\t\t\t2: ElementalShamanPresets.P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecElementalShaman],\n\t\ticonUrl: getSpecIcon(Class.ClassShaman, 0),\n\t},\n\t{\n\t\tspec: Spec.SpecEnhancementShaman,\n\t\trotation: EnhancementShamanPresets.DefaultRotation,\n\t\ttalents: EnhancementShamanPresets.StandardTalents.data,\n\t\tspecOptions: EnhancementShamanPresets.DefaultOptions,\n\t\tconsumes: EnhancementShamanPresets.DefaultConsumes,\n\t\tdefaultName: 'Enhancement',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceDraenei,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: EnhancementShamanPresets.P1_PRESET.gear,\n\t\t\t\t2: EnhancementShamanPresets.P2_PRESET_FT.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: EnhancementShamanPresets.P1_PRESET.gear,\n\t\t\t\t2: EnhancementShamanPresets.P2_PRESET_FT.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecEnhancementShaman],\n\t\ticonUrl: getSpecIcon(Class.ClassShaman, 1),\n\t},\n\t{\n\t\tspec: Spec.SpecRestorationShaman,\n\t\trotation: RestorationShamanPresets.DefaultRotation,\n\t\ttalents: RestorationShamanPresets.RaidHealingTalents.data,\n\t\tspecOptions: RestorationShamanPresets.DefaultOptions,\n\t\tconsumes: RestorationShamanPresets.DefaultConsumes,\n\t\tdefaultName: 'Restoration',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceDraenei,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: RestorationShamanPresets.P1_PRESET.gear,\n\t\t\t\t2: RestorationShamanPresets.P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: RestorationShamanPresets.P1_PRESET.gear,\n\t\t\t\t2: RestorationShamanPresets.P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecRestorationShaman],\n\t\ticonUrl: getSpecIcon(Class.ClassShaman, 2),\n\t},\n\t{\n\t\tspec: Spec.SpecHealingPriest,\n\t\trotation: HealingPriestPresets.DiscDefaultRotation,\n\t\ttalents: HealingPriestPresets.DiscTalents.data,\n\t\tspecOptions: HealingPriestPresets.DefaultOptions,\n\t\tconsumes: HealingPriestPresets.DefaultConsumes,\n\t\tdefaultName: 'Discipline',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceDwarf,\n\t\t\t[Faction.Horde]: Race.RaceUndead,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: HealingPriestPresets.DISC_P1_PRESET.gear,\n\t\t\t\t2: HealingPriestPresets.DISC_P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: HealingPriestPresets.DISC_P1_PRESET.gear,\n\t\t\t\t2: HealingPriestPresets.DISC_P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Discipline Priest',\n\t\ticonUrl: getSpecIcon(Class.ClassPriest, 0),\n\t},\n\t{\n\t\tspec: Spec.SpecHealingPriest,\n\t\trotation: HealingPriestPresets.HolyDefaultRotation,\n\t\ttalents: HealingPriestPresets.HolyTalents.data,\n\t\tspecOptions: HealingPriestPresets.DefaultOptions,\n\t\tconsumes: HealingPriestPresets.DefaultConsumes,\n\t\tdefaultName: 'Holy',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceDwarf,\n\t\t\t[Faction.Horde]: Race.RaceUndead,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: HealingPriestPresets.HOLY_P1_PRESET.gear,\n\t\t\t\t2: HealingPriestPresets.HOLY_P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: HealingPriestPresets.HOLY_P1_PRESET.gear,\n\t\t\t\t2: HealingPriestPresets.HOLY_P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Holy Priest',\n\t\ticonUrl: getSpecIcon(Class.ClassPriest, 1),\n\t},\n\t{\n\t\tspec: Spec.SpecShadowPriest,\n\t\trotation: ShadowPriestPresets.DefaultRotation,\n\t\ttalents: ShadowPriestPresets.StandardTalents.data,\n\t\tspecOptions: ShadowPriestPresets.DefaultOptions,\n\t\tconsumes: ShadowPriestPresets.DefaultConsumes,\n\t\tdefaultName: 'Shadow',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceDwarf,\n\t\t\t[Faction.Horde]: Race.RaceUndead,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: ShadowPriestPresets.P1_PRESET.gear,\n\t\t\t\t2: ShadowPriestPresets.P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: ShadowPriestPresets.P1_PRESET.gear,\n\t\t\t\t2: ShadowPriestPresets.P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecShadowPriest],\n\t\ticonUrl: getSpecIcon(Class.ClassPriest, 2),\n\t},\n\t{\n\t\tspec: Spec.SpecSmitePriest,\n\t\trotation: SmitePriestPresets.DefaultRotation,\n\t\ttalents: SmitePriestPresets.StandardTalents.data,\n\t\tspecOptions: SmitePriestPresets.DefaultOptions,\n\t\tconsumes: SmitePriestPresets.DefaultConsumes,\n\t\tdefaultName: 'Smite',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceDwarf,\n\t\t\t[Faction.Horde]: Race.RaceUndead,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: SmitePriestPresets.P1_PRESET.gear,\n\t\t\t\t2: ShadowPriestPresets.P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: SmitePriestPresets.P1_PRESET.gear,\n\t\t\t\t2: ShadowPriestPresets.P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: specNames[Spec.SpecSmitePriest],\n\t\ticonUrl: getSpecIcon(Class.ClassPriest, 3),\n\t},\n\t{\n\t\tspec: Spec.SpecWarrior,\n\t\trotation: WarriorPresets.ArmsRotation,\n\t\ttalents: WarriorPresets.ArmsTalents.data,\n\t\tspecOptions: WarriorPresets.DefaultOptions,\n\t\tconsumes: WarriorPresets.DefaultConsumes,\n\t\tdefaultName: 'Arms',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: WarriorPresets.P1_ARMS_PRESET.gear,\n\t\t\t\t2: WarriorPresets.P2_ARMS_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: WarriorPresets.P1_ARMS_PRESET.gear,\n\t\t\t\t2: WarriorPresets.P2_ARMS_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Arms Warrior',\n\t\ticonUrl: getSpecIcon(Class.ClassWarrior, 0),\n\t},\n\t{\n\t\tspec: Spec.SpecWarrior,\n\t\trotation: WarriorPresets.DefaultRotation,\n\t\ttalents: WarriorPresets.FuryTalents.data,\n\t\tspecOptions: WarriorPresets.DefaultOptions,\n\t\tconsumes: WarriorPresets.DefaultConsumes,\n\t\tdefaultName: 'Fury',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: WarriorPresets.P1_FURY_PRESET.gear,\n\t\t\t\t2: WarriorPresets.P2_FURY_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: WarriorPresets.P1_FURY_PRESET.gear,\n\t\t\t\t2: WarriorPresets.P2_FURY_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Fury Warrior',\n\t\ticonUrl: getSpecIcon(Class.ClassWarrior, 1),\n\t},\n\t{\n\t\tspec: Spec.SpecProtectionWarrior,\n\t\trotation: ProtectionWarriorPresets.DefaultRotation,\n\t\ttalents: ProtectionWarriorPresets.StandardTalents.data,\n\t\tspecOptions: ProtectionWarriorPresets.DefaultOptions,\n\t\tconsumes: ProtectionWarriorPresets.DefaultConsumes,\n\t\tdefaultName: 'Protection',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: ProtectionWarriorPresets.P1_BALANCED_PRESET.gear,\n\t\t\t\t2: ProtectionWarriorPresets.P2_SURVIVAL_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: ProtectionWarriorPresets.P1_BALANCED_PRESET.gear,\n\t\t\t\t2: ProtectionWarriorPresets.P2_SURVIVAL_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Protection Warrior',\n\t\ticonUrl: getSpecIcon(Class.ClassWarrior, 2),\n\t},\n\t{\n\t\tspec: Spec.SpecHolyPaladin,\n\t\trotation: HolyPaladinPresets.DefaultRotation,\n\t\ttalents: HolyPaladinPresets.StandardTalents.data,\n\t\tspecOptions: HolyPaladinPresets.DefaultOptions,\n\t\tconsumes: HolyPaladinPresets.DefaultConsumes,\n\t\tdefaultName: 'Holy',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceBloodElf,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: HolyPaladinPresets.P1_PRESET.gear,\n\t\t\t\t2: HolyPaladinPresets.P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: HolyPaladinPresets.P1_PRESET.gear,\n\t\t\t\t2: HolyPaladinPresets.P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Holy Paladin',\n\t\ticonUrl: getSpecIcon(Class.ClassPaladin, 0),\n\t},\n\t{\n\t\tspec: Spec.SpecProtectionPaladin,\n\t\trotation: ProtectionPaladinPresets.DefaultRotation,\n\t\ttalents: ProtectionPaladinPresets.GenericAoeTalents.data,\n\t\tspecOptions: ProtectionPaladinPresets.DefaultOptions,\n\t\tconsumes: ProtectionPaladinPresets.DefaultConsumes,\n\t\tdefaultName: 'Protection',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceBloodElf,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: ProtectionPaladinPresets.P1_PRESET.gear,\n\t\t\t\t2: ProtectionPaladinPresets.P2_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: ProtectionPaladinPresets.P1_PRESET.gear,\n\t\t\t\t2: ProtectionPaladinPresets.P2_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Protection Paladin',\n\t\ticonUrl: getSpecIcon(Class.ClassPaladin, 1),\n\t},\n\t{\n\t\tspec: Spec.SpecRetributionPaladin,\n\t\trotation: RetributionPaladinPresets.DefaultRotation,\n\t\ttalents: RetributionPaladinPresets.AuraMasteryTalents.data,\n\t\tspecOptions: RetributionPaladinPresets.DefaultOptions,\n\t\tconsumes: RetributionPaladinPresets.DefaultConsumes,\n\t\tdefaultName: 'Retribution',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceBloodElf,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: RetributionPaladinPresets.P1_PRESET.gear,\n\t\t\t\t2: RetributionPaladinPresets.P2_PRESET.gear,\n\t\t\t\t3: RetributionPaladinPresets.P3_PRESET.gear,\n\t\t\t\t4: RetributionPaladinPresets.P4_PRESET.gear,\n\t\t\t\t5: RetributionPaladinPresets.P5_PRESET.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: RetributionPaladinPresets.P1_PRESET.gear,\n\t\t\t\t2: RetributionPaladinPresets.P2_PRESET.gear,\n\t\t\t\t3: RetributionPaladinPresets.P3_PRESET.gear,\n\t\t\t\t4: RetributionPaladinPresets.P4_PRESET.gear,\n\t\t\t\t5: RetributionPaladinPresets.P5_PRESET.gear,\n\t\t\t},\n\t\t},\n\t\ttooltip: 'Retribution Paladin',\n\t\ticonUrl: getSpecIcon(Class.ClassPaladin, 2),\n\t},\n\t{\n\t\tspec: Spec.SpecWarlock,\n\t\trotation: WarlockPresets.AfflictionRotation,\n\t\ttalents: WarlockPresets.AfflictionTalents.data,\n\t\tspecOptions: WarlockPresets.AfflictionOptions,\n\t\tconsumes: WarlockPresets.DefaultConsumes,\n\t\tdefaultName: 'Affliction',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Affliction.gear,\n\t\t\t\t2: WarlockPresets.P2_Preset_Affliction.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Affliction.gear,\n\t\t\t\t2: WarlockPresets.P2_Preset_Affliction.gear,\n\t\t\t},\n\t\t},\n\t\totherDefaults: WarlockPresets.OtherDefaults,\n\t\ttooltip: 'Affliction Warlock',\n\t\ticonUrl: getSpecIcon(Class.ClassWarlock, 0),\n\t},\n\t{\n\t\tspec: Spec.SpecWarlock,\n\t\trotation: WarlockPresets.DemonologyRotation,\n\t\ttalents: WarlockPresets.DemonologyTalents.data,\n\t\tspecOptions: WarlockPresets.DemonologyOptions,\n\t\tconsumes: WarlockPresets.DefaultConsumes,\n\t\tdefaultName: 'Demonology',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Demo_Destro.gear,\n\t\t\t\t2: WarlockPresets.P2_Preset_Demo_Destro.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Demo_Destro.gear,\n\t\t\t\t2: WarlockPresets.P2_Preset_Demo_Destro.gear,\n\t\t\t},\n\t\t},\n\t\totherDefaults: WarlockPresets.OtherDefaults,\n\t\ttooltip: 'Demonology Warlock',\n\t\ticonUrl: getSpecIcon(Class.ClassWarlock, 1),\n\t},\n\t{\n\t\tspec: Spec.SpecWarlock,\n\t\trotation: WarlockPresets.DestructionRotation,\n\t\ttalents: WarlockPresets.DestructionTalents.data,\n\t\tspecOptions: WarlockPresets.DestructionOptions,\n\t\tconsumes: WarlockPresets.DefaultConsumes,\n\t\tdefaultName: 'Destruction',\n\t\tdefaultFactionRaces: {\n\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t},\n\t\tdefaultGear: {\n\t\t\t[Faction.Unknown]: {},\n\t\t\t[Faction.Alliance]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Demo_Destro.gear,\n\t\t\t\t2: WarlockPresets.P2_Preset_Demo_Destro.gear,\n\t\t\t},\n\t\t\t[Faction.Horde]: {\n\t\t\t\t1: WarlockPresets.P1_Preset_Demo_Destro.gear,\n\t\t\t\t2: WarlockPresets.P2_Preset_Demo_Destro.gear,\n\t\t\t},\n\t\t},\n\t\totherDefaults: WarlockPresets.OtherDefaults,\n\t\ttooltip: 'Destruction Warlock',\n\t\ticonUrl: getSpecIcon(Class.ClassWarlock, 2),\n\t},\n];\n\nexport const implementedSpecs: Array<Spec> = [...new Set(playerPresets.map(preset => preset.spec))];\n","import { Component } from '../core/components/component.js';\nimport { EnumPicker } from '../core/components/enum_picker.js';\nimport { Raid } from '../core/raid.js';\nimport { MAX_PARTY_SIZE } from '../core/party.js';\nimport { Party } from '../core/party.js';\nimport { Player } from '../core/player.js';\nimport { Player as PlayerProto } from '../core/proto/api.js';\nimport { Class } from '../core/proto/common.js';\nimport { Profession } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Faction } from '../core/proto/common.js';\nimport { Glyphs } from '../core/proto/common.js';\nimport { cssClassForClass, playerToSpec } from '../core/proto_utils/utils.js';\nimport { isTankSpec } from '../core/proto_utils/utils.js';\nimport { specToClass } from '../core/proto_utils/utils.js';\nimport { newRaidTarget } from '../core/proto_utils/utils.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { formatDeltaTextElem } from '../core/utils.js';\nimport { getEnumValues } from '../core/utils.js';\n\nimport { RaidSimUI } from './raid_sim_ui.js';\nimport { playerPresets, specSimFactories } from './presets.js';\n\nimport { BalanceDruid_Options as BalanceDruidOptions } from '../core/proto/druid.js';\nimport { Mage_Options as MageOptions } from '../core/proto/mage.js';\nimport { SmitePriest_Options as SmitePriestOptions } from '../core/proto/priest.js';\nimport { BaseModal } from '../core/components/base_modal.js';\nimport { Tooltip } from 'bootstrap';\n\nconst NEW_PLAYER: number = -1;\n\nenum DragType {\n\tNone,\n\tNew,\n\tMove,\n\tSwap,\n\tCopy,\n}\n\nexport class RaidPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly raid: Raid;\n\treadonly partyPickers: Array<PartyPicker>;\n\treadonly newPlayerPicker: NewPlayerPicker;\n\n\t// Hold data about the player being dragged while the drag is happening.\n\tcurrentDragPlayer: Player<any> | null = null;\n\tcurrentDragPlayerFromIndex: number = NEW_PLAYER;\n\tcurrentDragType: DragType = DragType.New;\n\n\t// Hold data about the party being dragged while the drag is happening.\n\tcurrentDragParty: PartyPicker | null = null;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parent, 'raid-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.raid = raidSimUI.sim.raid;\n\n\t\tconst raidControls = document.createElement('div');\n\t\traidControls.classList.add('raid-controls');\n\t\tthis.rootElem.appendChild(raidControls);\n\n\t\tthis.newPlayerPicker = new NewPlayerPicker(this.rootElem, this);\n\n\t\tconst activePartiesSelector = new EnumPicker<Raid>(raidControls, this.raidSimUI.sim.raid, {\n\t\t\tlabel: 'Raid Size',\n\t\t\tlabelTooltip: 'Number of players participating in the sim.',\n\t\t\tvalues: [\n\t\t\t\t{ name: '5', value: 1 },\n\t\t\t\t{ name: '10', value: 2 },\n\t\t\t\t{ name: '25', value: 5 },\n\t\t\t\t{ name: '40', value: 8 },\n\t\t\t],\n\t\t\tchangedEvent: (raid: Raid) => raid.numActivePartiesChangeEmitter,\n\t\t\tgetValue: (raid: Raid) => raid.getNumActiveParties(),\n\t\t\tsetValue: (eventID: EventID, raid: Raid, newValue: number) => {\n\t\t\t\traid.setNumActiveParties(eventID, newValue);\n\t\t\t},\n\t\t});\n\n\t\tconst factionSelector = new EnumPicker<NewPlayerPicker>(raidControls, this.newPlayerPicker, {\n\t\t\tlabel: 'Default Faction',\n\t\t\tlabelTooltip: 'Default faction for newly-created players.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Alliance', value: Faction.Alliance },\n\t\t\t\t{ name: 'Horde', value: Faction.Horde },\n\t\t\t],\n\t\t\tchangedEvent: (picker: NewPlayerPicker) => this.raid.sim.factionChangeEmitter,\n\t\t\tgetValue: (picker: NewPlayerPicker) => this.raid.sim.getFaction(),\n\t\t\tsetValue: (eventID: EventID, picker: NewPlayerPicker, newValue: Faction) => {\n\t\t\t\tthis.raid.sim.setFaction(eventID, newValue);\n\t\t\t},\n\t\t});\n\n\t\tconst latestPhaseWithAllPresets = Math.min(...playerPresets.map(preset => Math.max(...Object.keys(preset.defaultGear[Faction.Alliance]).map(k => parseInt(k)))));\n\t\tconst phaseSelector = new EnumPicker<NewPlayerPicker>(raidControls, this.newPlayerPicker, {\n\t\t\tlabel: 'Default Gear',\n\t\t\tlabelTooltip: 'Newly-created players will start with approximate BIS gear from this phase.',\n\t\t\tvalues: [...Array(latestPhaseWithAllPresets).keys()].map(val => {\n\t\t\t\tconst phase = val + 1;\n\t\t\t\treturn { name: 'Phase ' + phase, value: phase };\n\t\t\t}),\n\t\t\tchangedEvent: (picker: NewPlayerPicker) => this.raid.sim.phaseChangeEmitter,\n\t\t\tgetValue: (picker: NewPlayerPicker) => this.raid.sim.getPhase(),\n\t\t\tsetValue: (eventID: EventID, picker: NewPlayerPicker, newValue: number) => {\n\t\t\t\tthis.raid.sim.setPhase(eventID, newValue);\n\t\t\t},\n\t\t});\n\n\t\tconst partiesContainer = document.createElement('div');\n\t\tpartiesContainer.classList.add('parties-container');\n\t\tthis.rootElem.appendChild(partiesContainer);\n\n\t\tthis.partyPickers = this.raid.getParties().map((party, i) => new PartyPicker(partiesContainer, party, i, this));\n\n\t\tconst updateActiveParties = () => {\n\t\t\tthis.partyPickers.forEach(partyPicker => {\n\t\t\t\tif (partyPicker.index < this.raidSimUI.sim.raid.getNumActiveParties()) {\n\t\t\t\t\tpartyPicker.rootElem.classList.add('active');\n\t\t\t\t} else {\n\t\t\t\t\tpartyPicker.rootElem.classList.remove('active');\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tthis.raidSimUI.sim.raid.numActivePartiesChangeEmitter.on(updateActiveParties);\n\t\tupdateActiveParties();\n\n\t\tthis.rootElem.ondragend = event => {\n\t\t\t// Uncomment to remove player when dropped 'off' the raid.\n\t\t\t//if (this.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\t//\tconst playerPicker = this.getPlayerPicker(this.currentDragPlayerFromIndex);\n\t\t\t//\tplayerPicker.setPlayer(null, null, DragType.None);\n\t\t\t//}\n\n\t\t\tthis.clearDragPlayer();\n\t\t\tthis.clearDragParty();\n\t\t};\n\t}\n\n\tgetCurrentFaction(): Faction {\n\t\treturn this.raid.sim.getFaction();\n\t}\n\n\tgetCurrentPhase(): number {\n\t\treturn this.raid.sim.getPhase();\n\t}\n\n\tgetPlayerPicker(raidIndex: number): PlayerPicker {\n\t\treturn this.partyPickers[Math.floor(raidIndex / MAX_PARTY_SIZE)].playerPickers[raidIndex % MAX_PARTY_SIZE];\n\t}\n\n\tgetPlayerPickers(): Array<PlayerPicker> {\n\t\treturn [...new Array(25).keys()].map(i => this.getPlayerPicker(i));\n\t}\n\n\tsetDragPlayer(player: Player<any>, fromIndex: number, type: DragType) {\n\t\tthis.clearDragPlayer();\n\n\t\tthis.currentDragPlayer = player;\n\t\tthis.currentDragPlayerFromIndex = fromIndex;\n\t\tthis.currentDragType = type;\n\n\t\tif (fromIndex != NEW_PLAYER) {\n\t\t\tconst playerPicker = this.getPlayerPicker(fromIndex);\n\t\t\tplayerPicker.rootElem.classList.add('dragfrom');\n\t\t}\n\t}\n\n\tclearDragPlayer() {\n\t\tif (this.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\tconst playerPicker = this.getPlayerPicker(this.currentDragPlayerFromIndex);\n\t\t\tplayerPicker.rootElem.classList.remove('dragfrom');\n\t\t}\n\n\t\tthis.currentDragPlayer = null;\n\t\tthis.currentDragPlayerFromIndex = NEW_PLAYER;\n\t\tthis.currentDragType = DragType.New;\n\t}\n\n\tsetDragParty(party: PartyPicker) {\n\t\tthis.currentDragParty = party;\n\t\tparty.rootElem.classList.add('dragfrom');\n\t}\n\tclearDragParty() {\n\t\tif (this.currentDragParty) {\n\t\t\tthis.currentDragParty.rootElem.classList.remove('dragfrom');\n\t\t\tthis.currentDragParty = null;\n\t\t}\n\t}\n}\n\nexport class PartyPicker extends Component {\n\treadonly party: Party;\n\treadonly index: number;\n\treadonly raidPicker: RaidPicker;\n\treadonly playerPickers: Array<PlayerPicker>;\n\n\tconstructor(parent: HTMLElement, party: Party, index: number, raidPicker: RaidPicker) {\n\t\tsuper(parent, 'party-picker-root');\n\t\tthis.party = party;\n\t\tthis.index = index;\n\t\tthis.raidPicker = raidPicker;\n\n\t\tthis.rootElem.setAttribute('draggable', 'true');\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<div class=\"party-header\">\n\t\t\t\t<label class=\"party-label form-label\">Group ${index + 1}</label>\n\t\t\t\t<div class=\"party-results\">\n\t\t\t\t\t<span class=\"party-results-dps\"></span>\n\t\t\t\t\t<span class=\"party-results-reference-delta\"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"players-container\">\n\t\t\t</div>\n\t\t`;\n\n\t\tconst playersContainer = this.rootElem.getElementsByClassName('players-container')[0] as HTMLDivElement;\n\t\tthis.playerPickers = [...Array(MAX_PARTY_SIZE).keys()].map(i => new PlayerPicker(playersContainer, this, i));\n\n\t\tconst dpsResultElem = this.rootElem.getElementsByClassName('party-results-dps')[0] as HTMLElement;\n\t\tconst referenceDeltaElem = this.rootElem.getElementsByClassName('party-results-reference-delta')[0] as HTMLElement;\n\n\t\tthis.raidPicker.raidSimUI.referenceChangeEmitter.on(() => {\n\t\t\tconst currentData = this.raidPicker.raidSimUI.getCurrentData();\n\t\t\tconst referenceData = this.raidPicker.raidSimUI.getReferenceData();\n\n\t\t\tconst partyDps = currentData?.simResult.raidMetrics.parties[this.index]?.dps.avg || 0;\n\t\t\tconst referenceDps = referenceData?.simResult.raidMetrics.parties[this.index]?.dps.avg || 0;\n\n\t\t\tif (partyDps == 0 && referenceDps == 0) {\n\t\t\t\tdpsResultElem.textContent = '';\n\t\t\t\treferenceDeltaElem.textContent = '';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdpsResultElem.textContent = partyDps.toFixed(1);\n\n\t\t\tif (!referenceData) {\n\t\t\t\treferenceDeltaElem.textContent = '';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tformatDeltaTextElem(referenceDeltaElem, referenceDps, partyDps, 1);\n\t\t});\n\n\t\tthis.rootElem.ondragstart = event => {\n\t\t\tif (event.target == this.rootElem) {\n\t\t\t\tevent.dataTransfer!.dropEffect = 'move';\n\t\t\t\tevent.dataTransfer!.effectAllowed = 'all';\n\t\t\t\tthis.raidPicker.setDragParty(this);\n\t\t\t}\n\t\t};\n\n\t\tlet dragEnterCounter = 0;\n\t\tthis.rootElem.ondragenter = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (!this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter++;\n\t\t\tthis.rootElem.classList.add('dragto');\n\t\t};\n\t\tthis.rootElem.ondragleave = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (!this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter--;\n\t\t\tif (dragEnterCounter <= 0) {\n\t\t\t\tthis.rootElem.classList.remove('dragto');\n\t\t\t}\n\t\t};\n\t\tthis.rootElem.ondragover = event => {\n\t\t\tevent.preventDefault();\n\t\t};\n\t\tthis.rootElem.ondrop = event => {\n\t\t\tif (!this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.preventDefault();\n\t\t\tdragEnterCounter = 0;\n\t\t\tthis.rootElem.classList.remove('dragto');\n\n\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\tconst srcPartyPicker = this.raidPicker.currentDragParty!;\n\n\t\t\t\tfor (let i = 0; i < MAX_PARTY_SIZE; i++) {\n\t\t\t\t\tconst srcPlayerPicker = srcPartyPicker.playerPickers[i]!;\n\t\t\t\t\tconst dstPlayerPicker = this.playerPickers[i]!;\n\n\t\t\t\t\tconst srcPlayer = srcPlayerPicker.player;\n\t\t\t\t\tconst dstPlayer = dstPlayerPicker.player;\n\n\t\t\t\t\tsrcPlayerPicker.setPlayer(eventID, dstPlayer, DragType.Swap);\n\t\t\t\t\tdstPlayerPicker.setPlayer(eventID, srcPlayer, DragType.Swap);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.raidPicker.clearDragParty();\n\t\t};\n\t}\n}\n\nexport class PlayerPicker extends Component {\n\t// Index of this player within its party (0-4).\n\treadonly index: number;\n\n\t// Index of this player within the whole raid (0-24).\n\treadonly raidIndex: number;\n\n\tplayer: Player<any> | null;\n\n\treadonly partyPicker: PartyPicker;\n\treadonly raidPicker: RaidPicker;\n\n\tprivate labelElem: HTMLElement | null;\n\tprivate iconElem: HTMLImageElement | null;\n\tprivate nameElem: HTMLInputElement | null;\n\tprivate resultsElem: HTMLElement | null;\n\tprivate dpsResultElem: HTMLElement | null;\n\tprivate referenceDeltaElem: HTMLElement | null;\n\n\tconstructor(parent: HTMLElement, partyPicker: PartyPicker, index: number) {\n\t\tsuper(parent, 'player-picker-root');\n\t\tthis.index = index;\n\t\tthis.raidIndex = partyPicker.index * MAX_PARTY_SIZE + index;\n\t\tthis.player = null;\n\t\tthis.partyPicker = partyPicker;\n\t\tthis.raidPicker = partyPicker.raidPicker;\n\n\t\tthis.labelElem = null;\n\t\tthis.iconElem = null;\n\t\tthis.nameElem = null;\n\t\tthis.resultsElem = null;\n\t\tthis.dpsResultElem = null;\n\t\tthis.referenceDeltaElem = null;\n\n\t\tthis.rootElem.classList.add('player');\n\n\t\tthis.partyPicker.party.compChangeEmitter.on(eventID => {\n\t\t\tconst newPlayer = this.partyPicker.party.getPlayer(this.index);\n\t\t\tif (newPlayer != this.player)\n\t\t\t\tthis.setPlayer(eventID, newPlayer, DragType.None);\n\t\t});\n\n\t\tthis.raidPicker.raidSimUI.referenceChangeEmitter.on(() => {\n\t\t\tconst currentData = this.raidPicker.raidSimUI.getCurrentData();\n\t\t\tconst referenceData = this.raidPicker.raidSimUI.getReferenceData();\n\n\t\t\tconst playerDps = currentData?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg || 0;\n\t\t\tconst referenceDps = referenceData?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg || 0;\n\n\t\t\tif (this.player) {\n\t\t\t\tthis.resultsElem?.classList.remove('hide');\n\t\t\t\t(this.dpsResultElem as HTMLElement).textContent = playerDps.toFixed(1);\n\n\t\t\t\tif (referenceData)\n\t\t\t\t\tformatDeltaTextElem(this.referenceDeltaElem as HTMLElement, referenceDps, playerDps, 1);\n\t\t\t}\n\t\t});\n\n\t\tlet dragEnterCounter = 0;\n\t\tthis.rootElem.ondragenter = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter++;\n\t\t\tthis.rootElem.classList.add('dragto');\n\t\t};\n\t\tthis.rootElem.ondragleave = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter--;\n\t\t\tif (dragEnterCounter <= 0) {\n\t\t\t\tthis.rootElem.classList.remove('dragto');\n\t\t\t}\n\t\t};\n\t\tthis.rootElem.ondragover = event => event.preventDefault();\n\t\tthis.rootElem.ondrop = event => {\n\t\t\tif (this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar dropData = event.dataTransfer!.getData(\"text/plain\");\n\n\t\t\tevent.preventDefault();\n\t\t\tdragEnterCounter = 0;\n\t\t\tthis.rootElem.classList.remove('dragto');\n\n\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\tif (this.raidPicker.currentDragPlayer == null && dropData.length == 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (this.raidPicker.currentDragPlayerFromIndex == this.raidIndex) {\n\t\t\t\t\tthis.raidPicker.clearDragPlayer();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst dragType = this.raidPicker.currentDragType;\n\n\t\t\t\tif (this.raidPicker.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\t\t\tconst fromPlayerPicker = this.raidPicker.getPlayerPicker(this.raidPicker.currentDragPlayerFromIndex);\n\t\t\t\t\tif (dragType == DragType.Swap) {\n\t\t\t\t\t\tfromPlayerPicker.setPlayer(eventID, this.player, dragType);\n\t\t\t\t\t} else if (dragType == DragType.Move) {\n\t\t\t\t\t\tfromPlayerPicker.setPlayer(eventID, null, dragType);\n\t\t\t\t\t}\n\t\t\t\t} else if (this.raidPicker.currentDragPlayer == null) {\n\t\t\t\t\t// This would be a copy from another window.\n\t\t\t\t\tconst binary = atob(dropData);\n\t\t\t\t\tconst bytes = new Uint8Array(binary.length);\n\t\t\t\t\tfor (let i = 0; i < bytes.length; i++) {\n\t\t\t\t\t\tbytes[i] = binary.charCodeAt(i);\n\t\t\t\t\t}\n\t\t\t\t\tconst playerProto = PlayerProto.fromBinary(bytes);\n\n\t\t\t\t\tvar localPlayer = new Player(playerToSpec(playerProto), this.raidPicker.raidSimUI.sim);\n\t\t\t\t\tlocalPlayer.fromProto(eventID, playerProto);\n\t\t\t\t\tthis.raidPicker.currentDragPlayer = localPlayer;\n\t\t\t\t}\n\n\t\t\t\tif (dragType == DragType.Copy) {\n\t\t\t\t\tthis.setPlayer(eventID, this.raidPicker.currentDragPlayer!.clone(eventID), dragType);\n\t\t\t\t} else {\n\t\t\t\t\tthis.setPlayer(eventID, this.raidPicker.currentDragPlayer, dragType);\n\t\t\t\t}\n\n\t\t\t\tthis.raidPicker.clearDragPlayer();\n\t\t\t});\n\t\t};\n\n\t\tthis.update();\n\t}\n\n\tsetPlayer(eventID: EventID, newPlayer: Player<any> | null, dragType: DragType) {\n\t\tif (newPlayer == this.player) {\n\t\t\treturn;\n\t\t}\n\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tthis.player = newPlayer;\n\t\t\tif (newPlayer) {\n\t\t\t\tthis.partyPicker.party.setPlayer(eventID, this.index, newPlayer);\n\n\t\t\t\tif (dragType == DragType.New) {\n\t\t\t\t\tapplyNewPlayerAssignments(eventID, newPlayer, this.raidPicker.raid);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.partyPicker.party.setPlayer(eventID, this.index, newPlayer);\n\t\t\t\tthis.partyPicker.party.compChangeEmitter.emit(eventID);\n\t\t\t}\n\t\t});\n\n\t\tthis.update();\n\t}\n\n\tprivate update() {\n\t\tif (this.player == null) {\n\t\t\tthis.rootElem.className = 'player-picker-root player';\n\t\t\tthis.rootElem.innerHTML = '';\n\n\t\t\tthis.labelElem = null;\n\t\t\tthis.iconElem = null;\n\t\t\tthis.nameElem = null;\n\t\t\tthis.resultsElem = null;\n\t\t\tthis.dpsResultElem = null;\n\t\t\tthis.referenceDeltaElem = null;\n\t\t} else {\n\t\t\tconst classCssClass = cssClassForClass(this.player.getClass());\n\n\t\t\tthis.rootElem.className = `player-picker-root player bg-${classCssClass}-dampened`;\n\t\t\tthis.rootElem.setAttribute('draggable', 'true');\n\t\t\tthis.rootElem.innerHTML = `\n\t\t\t\t<div class=\"player-label\">\n\t\t\t\t\t<img class=\"player-icon\" src=\"${this.player.getSpecIcon()}\" draggable=\"false\"/>\n\t\t\t\t\t<div class=\"player-details\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclass=\"player-name text-${classCssClass}\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tvalue=\"${this.player.getName()}\"\n\t\t\t\t\t\t\tspellcheck=\"false\"\n\t\t\t\t\t\t\tmaxlength=\"15\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div class=\"player-results hide\">\n\t\t\t\t\t\t\t<span class=\"player-results-dps\"></span>\n\t\t\t\t\t\t\t<span class=\"player-results-reference-delta\"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"player-options\">\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"player-edit\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdraggable=\"false\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"Click to Edit\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-edit fa-lg\"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"player-copy link-warning\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdraggable=\"true\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"Drag to Copy\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-copy fa-lg\"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"player-delete link-danger\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdraggable=\"false\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"Click to Delete\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-times fa-lg\"></i>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t`;\n\n\t\t\tthis.labelElem = this.rootElem.querySelector('.player-label') as HTMLElement;\n\t\t\tthis.iconElem = this.rootElem.querySelector('.player-icon') as HTMLImageElement;\n\t\t\tthis.nameElem = this.rootElem.querySelector('.player-name') as HTMLInputElement;\n\t\t\tthis.resultsElem = this.rootElem.querySelector('.player-results') as HTMLElement;\n\t\t\tthis.dpsResultElem = this.rootElem.querySelector('.player-results-dps') as HTMLElement;\n\t\t\tthis.referenceDeltaElem = this.rootElem.querySelector('.player-results-reference-delta') as HTMLElement;\n\n\t\t\tthis.bindPlayerEvents();\n\t\t}\n\t}\n\n\tprivate bindPlayerEvents() {\n\t\tthis.nameElem?.addEventListener('input', event => {\n\t\t\tthis.player?.setName(TypedEvent.nextEventID(), this.nameElem?.value || '');\n\t\t});\n\n\t\tthis.nameElem?.addEventListener('mousedown', event => {\n\t\t\tthis.rootElem.setAttribute('draggable', 'false')\n\t\t\tthis.partyPicker.rootElem.setAttribute('draggable', 'false')\n\t\t})\n\n\t\tthis.nameElem?.addEventListener('mouseup', event => {\n\t\t\tthis.rootElem.setAttribute('draggable', 'true')\n\t\t\tthis.partyPicker.rootElem.setAttribute('draggable', 'true')\n\t\t})\n\n\t\tconst emptyName = 'Unnamed';\n\t\tthis.nameElem?.addEventListener('focusout', event => {\n\t\t\tif (this.nameElem && !this.nameElem.value) {\n\t\t\t\tthis.nameElem.value = emptyName;\n\t\t\t\tthis.player?.setName(TypedEvent.nextEventID(), emptyName);\n\t\t\t}\n\t\t});\n\n\t\tconst dragStart = (event: DragEvent, type: DragType) => {\n\t\t\tif (this.player == null) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.dataTransfer!.dropEffect = 'move';\n\t\t\tevent.dataTransfer!.effectAllowed = 'all';\n\n\t\t\tif (this.player) {\n\t\t\t\tvar playerDataProto = this.player.toProto(true);\n\t\t\t\tevent.dataTransfer!.setData(\"text/plain\", btoa(String.fromCharCode(...PlayerProto.toBinary(playerDataProto))));\n\t\t\t}\n\n\t\t\tthis.raidPicker.setDragPlayer(this.player, this.raidIndex, type);\n\t\t};\n\n\t\tconst editElem = this.rootElem.querySelector('.player-edit') as HTMLElement;\n\t\tconst copyElem = this.rootElem.querySelector('.player-copy') as HTMLElement;\n\t\tconst deleteElem = this.rootElem.querySelector('.player-delete') as HTMLElement;\n\n\t\tthis.rootElem.ondragstart = event => {\n\t\t\tif (event.target != copyElem) {\n\t\t\t\tdragStart(event, DragType.Swap)\n\t\t\t}\n\t\t}\n\n\t\tconst editTooltip = Tooltip.getOrCreateInstance(editElem);\n\t\tconst copyTooltip = Tooltip.getOrCreateInstance(copyElem);\n\t\tconst deleteTooltip = Tooltip.getOrCreateInstance(deleteElem);\n\n\t\teditElem.onclick = event => {\n\t\t\tnew PlayerEditorModal(this.player as Player<any>);\n\t\t};\n\t\tcopyElem.ondragstart = event => {\n\t\t\tevent.dataTransfer!.setDragImage(this.rootElem, 20, 20);\n\t\t\tdragStart(event, DragType.Copy);\n\t\t}\n\t\tdeleteElem.onclick = event => {\n\t\t\tdeleteTooltip.hide();\n\t\t\tthis.setPlayer(TypedEvent.nextEventID(), null, DragType.None);\n\t\t}\n\t}\n}\n\nclass PlayerEditorModal extends BaseModal {\n\tconstructor(player: Player<any>) {\n\t\tsuper(document.body, 'player-editor-modal', {\n\t\t\tcloseButton: {fixed: true},\n\t\t\theader: false\n\t\t});\n\n\t\tthis.rootElem.id = 'playerEditorModal';\n\t\tthis.body.insertAdjacentHTML('beforeend', `\n\t\t\t<div class=\"player-editor within-raid-sim\"></div>\n\t\t`);\n\n\t\tconst editorRoot = this.rootElem.getElementsByClassName('player-editor')[0] as HTMLElement;\n\t\tconst individualSim = specSimFactories[player.spec]!(editorRoot, player);\n\t}\n}\n\nclass NewPlayerPicker extends Component {\n\treadonly raidPicker: RaidPicker;\n\n\tconstructor(parent: HTMLElement, raidPicker: RaidPicker) {\n\t\tsuper(parent, 'new-player-picker-root');\n\t\tthis.raidPicker = raidPicker;\n\n\t\tgetEnumValues(Class).forEach(wowClass => {\n\t\t\tif (wowClass == Class.ClassUnknown) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matchingPresets = playerPresets.filter(preset => specToClass[preset.spec] == wowClass);\n\t\t\tif (matchingPresets.length == 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst classPresetsContainer = document.createElement('div');\n\t\t\tclassPresetsContainer.classList.add('class-presets-container', `bg-${cssClassForClass(wowClass as Class)}-dampened`);\n\t\t\tthis.rootElem.appendChild(classPresetsContainer);\n\n\t\t\tmatchingPresets.forEach(matchingPreset => {\n\t\t\t\tconst presetElemFragment = document.createElement('fragment');\n\t\t\t\tpresetElemFragment.innerHTML = `\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdraggable=\"true\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"${matchingPreset.tooltip}\"\n\t\t\t\t\t\tdata-bs-html=\"true\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<img class=\"preset-picker-icon player-icon\" src=\"${matchingPreset.iconUrl}\"/>\n\t\t\t\t\t</a>\n\t\t\t\t`\n\t\t\t\tconst presetElem = presetElemFragment.children[0] as HTMLElement;\n\t\t\t\tclassPresetsContainer.appendChild(presetElem);\n\n\t\t\t\tTooltip.getOrCreateInstance(presetElem);\n\n\t\t\t\tpresetElem.ondragstart = event => {\n\t\t\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\t\t\tconst dragImage = new Image();\n\t\t\t\t\t\tdragImage.src = matchingPreset.iconUrl;\n\t\t\t\t\t\tevent.dataTransfer!.setDragImage(dragImage, 30, 30);\n\t\t\t\t\t\tevent.dataTransfer!.setData(\"text/plain\", \"\");\n\t\t\t\t\t\tevent.dataTransfer!.dropEffect = 'copy';\n\n\t\t\t\t\t\tconst newPlayer = new Player(matchingPreset.spec, this.raidPicker.raid.sim);\n\t\t\t\t\t\tnewPlayer.applySharedDefaults(eventID);\n\t\t\t\t\t\tnewPlayer.setRace(eventID, matchingPreset.defaultFactionRaces[this.raidPicker.getCurrentFaction()]);\n\t\t\t\t\t\tnewPlayer.setRotation(eventID, matchingPreset.rotation);\n\t\t\t\t\t\tnewPlayer.setTalentsString(eventID, matchingPreset.talents.talentsString);\n\t\t\t\t\t\tnewPlayer.setGlyphs(eventID, matchingPreset.talents.glyphs || Glyphs.create());\n\t\t\t\t\t\tnewPlayer.setSpecOptions(eventID, matchingPreset.specOptions);\n\t\t\t\t\t\tnewPlayer.setConsumes(eventID, matchingPreset.consumes);\n\t\t\t\t\t\tnewPlayer.setName(eventID, matchingPreset.defaultName);\n\t\t\t\t\t\tnewPlayer.setProfession1(eventID, matchingPreset.otherDefaults?.profession1 || Profession.Engineering);\n\t\t\t\t\t\tnewPlayer.setProfession2(eventID, matchingPreset.otherDefaults?.profession2 || Profession.Jewelcrafting);\n\t\t\t\t\t\tnewPlayer.setDistanceFromTarget(eventID, matchingPreset.otherDefaults?.distanceFromTarget || 0);\n\n\t\t\t\t\t\t// Need to wait because the gear might not be loaded yet.\n\t\t\t\t\t\tthis.raidPicker.raid.sim.waitForInit().then(() => {\n\t\t\t\t\t\t\tnewPlayer.setGear(\n\t\t\t\t\t\t\t\teventID,\n\t\t\t\t\t\t\t\tthis.raidPicker.raid.sim.db.lookupEquipmentSpec(\n\t\t\t\t\t\t\t\t\tmatchingPreset.defaultGear[this.raidPicker.getCurrentFaction()][this.raidPicker.getCurrentPhase()]));\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.raidPicker.setDragPlayer(newPlayer, NEW_PLAYER, DragType.New);\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n}\n\nfunction applyNewPlayerAssignments(eventID: EventID, newPlayer: Player<any>, raid: Raid) {\n\tif (isTankSpec(newPlayer.spec)) {\n\t\tconst tanks = raid.getTanks();\n\t\tconst emptyIdx = tanks.findIndex(tank => raid.getPlayerFromRaidTarget(tank) == null);\n\t\tif (emptyIdx == -1) {\n\t\t\tif (tanks.length < 3) {\n\t\t\t\traid.setTanks(eventID, tanks.concat([newPlayer.makeRaidTarget()]));\n\t\t\t}\n\t\t} else {\n\t\t\ttanks[emptyIdx] = newPlayer.makeRaidTarget();\n\t\t\traid.setTanks(eventID, tanks);\n\t\t}\n\t}\n\n\t// Spec-specific assignments. For most cases, default to buffing self.\n\tif (newPlayer.spec == Spec.SpecBalanceDruid) {\n\t\tconst newOptions = newPlayer.getSpecOptions() as BalanceDruidOptions;\n\t\tnewOptions.innervateTarget = newRaidTarget(newPlayer.getRaidIndex());\n\t\tnewPlayer.setSpecOptions(eventID, newOptions);\n\t} else if (newPlayer.spec == Spec.SpecSmitePriest) {\n\t\tconst newOptions = newPlayer.getSpecOptions() as SmitePriestOptions;\n\t\tnewOptions.powerInfusionTarget = newRaidTarget(newPlayer.getRaidIndex());\n\t\tnewPlayer.setSpecOptions(eventID, newOptions);\n\t} else if (newPlayer.spec == Spec.SpecMage) {\n\t\tconst newOptions = newPlayer.getSpecOptions() as MageOptions;\n\t\tnewOptions.focusMagicTarget = newRaidTarget(newPlayer.getRaidIndex());\n\t\tnewPlayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n","import {\n\tClass,\n\tRaidBuffs,\n\tSpec,\n} from '../core/proto/common.js';\nimport { Component } from '../core/components/component.js';\nimport { Player } from \"../core/player.js\";\nimport { Raid } from \"../core/raid.js\";\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport {\n\tClassSpecs,\n\tSpecTalents,\n  specToClass,\n\tisTankSpec,\n\tisHealingSpec,\n\tisMeleeDpsSpec,\n\tisRangedDpsSpec,\n\ttextCssClassForClass,\n} from '../core/proto_utils/utils.js';\nimport { sum } from '../core/utils.js';\n\nimport { Mage_Rotation_Type as MageRotationType } from '../core/proto/mage.js';\nimport { Hunter_Rotation_StingType as HunterStingType, Hunter_Options_PetType as HunterPetType } from '../core/proto/hunter.js';\nimport { PaladinAura } from '../core/proto/paladin.js';\nimport { Rogue_Rotation_Frequency as ExposeFrequency } from '../core/proto/rogue.js';\nimport { AirTotem, EarthTotem, FireTotem, WaterTotem } from '../core/proto/shaman.js';\nimport { Warlock_Rotation_Curse as WarlockCurse, Warlock_Options_Summon as WarlockSummon } from '../core/proto/warlock.js';\nimport { WarriorShout, Warrior_Rotation_SunderArmor as SunderArmor } from '../core/proto/warrior.js';\n\nimport { RaidSimUI } from './raid_sim_ui.js';\nimport { Tooltip } from 'bootstrap';\n\ninterface RaidStatsOptions {\n\tsections: Array<RaidStatsSectionOptions>,\n}\n\ninterface RaidStatsSectionOptions {\n\tlabel: string,\n\tcategories: Array<RaidStatsCategoryOptions>,\n}\n\ninterface RaidStatsCategoryOptions {\n\tlabel: string,\n\teffects: Array<RaidStatsEffectOptions>,\n}\n\ntype PlayerProvider = { class?: Class, condition: (player: Player<any>) => boolean };\ntype RaidProvider = (raid: Raid) => boolean;\n\ninterface RaidStatsEffectOptions {\n\tlabel: string,\n\tactionId?: ActionId,\n\tplayerData?: PlayerProvider,\n\traidData?: RaidProvider,\n}\n\nexport class RaidStats extends Component {\n\tprivate readonly categories: Array<RaidStatsCategory>;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parent, 'raid-stats');\n\n\t\tlet categories: Array<RaidStatsCategory> = [];\n\t\tRAID_STATS_OPTIONS.sections.forEach(section => {\n\t\t\tconst sectionElem = document.createElement('div');\n\t\t\tsectionElem.classList.add('raid-stats-section');\n\t\t\tthis.rootElem.appendChild(sectionElem);\n\t\t\tsectionElem.innerHTML = `\n\t\t\t\t<div class=\"raid-stats-section-header\">\n\t\t\t\t\t<label class=\"raid-stats-section-label form-label\">${section.label}</label>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"raid-stats-section-content\"></div>\n\t\t\t`;\n\t\t\tconst contentElem = sectionElem.getElementsByClassName('raid-stats-section-content')[0] as HTMLDivElement;\n\n\t\t\tsection.categories.forEach(categoryOptions => {\n\t\t\t\tcategories.push(new RaidStatsCategory(contentElem, raidSimUI, categoryOptions));\n\t\t\t});\n\t\t});\n\t\tthis.categories = categories;\n\n\t\traidSimUI.changeEmitter.on(eventID => this.categories.forEach(c => c.update()));\n\t}\n}\n\nclass RaidStatsCategory extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\tprivate readonly options: RaidStatsCategoryOptions;\n\tprivate readonly effects: Array<RaidStatsEffect>;\n\tprivate readonly counterElem: HTMLElement;\n\tprivate readonly tooltipElem: HTMLElement;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI, options: RaidStatsCategoryOptions) {\n\t\tsuper(parent, 'raid-stats-category-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.options = options;\n\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<a href=\"javascript:void(0)\" role=\"button\" class=\"raid-stats-category\">\n\t\t\t\t<span class=\"raid-stats-category-counter\"></span>\n\t\t\t\t<span class=\"raid-stats-category-label\">${options.label}</span>\n\t\t\t</a>\n\t\t`;\n\n\t\tthis.counterElem = this.rootElem.querySelector('.raid-stats-category-counter') as HTMLElement;\n\t\tthis.tooltipElem = document.createElement('div');\n\t\tthis.tooltipElem.innerHTML = `\n\t\t\t<label class=\"raid-stats-category-label\">${options.label}</label>\n\t\t`\n\n\t\tthis.effects = options.effects.map(opt => new RaidStatsEffect(this.tooltipElem, raidSimUI, opt));\n\n\t\tif (options.effects.length != 1 || options.effects[0].playerData?.class) {\n\t\t\tconst statsLink = this.rootElem.querySelector('.raid-stats-category') as HTMLElement;\n\n\t\t\tstatsLink.setAttribute('data-bs-toggle', 'tooltip');\n\t\t\tstatsLink.setAttribute('data-bs-placement', 'right');\n\t\t\tstatsLink.setAttribute('data-bs-html', 'true');\n\n\t\t\t// Using the title option here because outerHTML sanitizes and filters out the img src options\n\t\t\tTooltip.getOrCreateInstance(statsLink, {\n\t\t\t\tcustomClass: 'raid-stats-category-tooltip',\n\t\t\t\ttitle: this.tooltipElem,\n\t\t\t})\n\t\t}\n\t}\n\n\tupdate() {\n\t\tthis.effects.forEach(effect => effect.update());\n\n\t\tconst total = sum(this.effects.map(effect => effect.count));\n\t\tthis.counterElem.textContent = String(total);\n\n\t\tconst statsLink = this.rootElem.querySelector('.raid-stats-category') as HTMLElement;\n\n\t\tif (total == 0) {\n\t\t\tstatsLink?.classList.remove('active');\n\t\t} else {\n\t\t\tstatsLink?.classList.add('active');\n\t\t}\n\t}\n}\n\nclass RaidStatsEffect extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\tprivate readonly options: RaidStatsEffectOptions;\n\tprivate readonly counterElem: HTMLElement;\n\n\tcurPlayers: Array<Player<any>>;\n\tcount: number;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI, options: RaidStatsEffectOptions) {\n\t\tsuper(parent, 'raid-stats-effect');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.options = options;\n\n\t\tthis.curPlayers = [];\n\t\tthis.count = 0;\n\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<span class=\"raid-stats-effect-counter\"></span>\n\t\t\t<img class=\"raid-stats-effect-icon\"></img>\n\t\t\t<span class=\"raid-stats-effect-label\">${options.label}</span>\n\t\t`;\n\t\tthis.counterElem = this.rootElem.querySelector('.raid-stats-effect-counter') as HTMLElement;\n\n\t\tif (this.options.playerData?.class) {\n\t\t\tconst labelElem = this.rootElem.querySelector('.raid-stats-effect-label') as HTMLElement;\n\t\t\tconst playerCssClass = textCssClassForClass(this.options.playerData.class);\n\t\t\tlabelElem.classList.add(playerCssClass);\n\t\t}\n\n\t\tconst iconElem = this.rootElem.querySelector('.raid-stats-effect-icon') as HTMLImageElement;\n\t\tif (options.actionId) {\n\t\t\toptions.actionId.fill().then(actionId => iconElem.src = actionId.iconUrl);\n\t\t} else {\n\t\t\ticonElem.remove();\n\t\t}\n\t}\n\n\tupdate() {\n\t\tif (this.options.playerData) {\n\t\t\tthis.curPlayers = this.raidSimUI.getActivePlayers().filter(p => this.options.playerData!.condition(p));\n\t\t}\n\n\t\tconst raidData = this.options.raidData && this.options.raidData(this.raidSimUI.sim.raid);\n\n\t\tthis.count = this.curPlayers.length + (raidData ? 1 : 0);\n\t\tthis.counterElem.textContent = String(this.count);\n\t\tif (this.count == 0) {\n\t\t\tthis.rootElem.classList.remove('active');\n\t\t} else {\n\t\t\tthis.rootElem.classList.add('active');\n\t\t}\n\t}\n}\n\nfunction negateIf(val: boolean, cond: boolean): boolean {\n\treturn cond ? !val : val;\n}\n\nfunction playerClass<T extends Class>(clazz: T, extraCondition?: (player: Player<ClassSpecs<T>>) => boolean): PlayerProvider {\n\treturn {\n\t\tclass: clazz,\n\t\tcondition: (player: Player<any>): boolean => {\n\t\t\treturn player.isClass(clazz)\n\t\t\t\t&& (!extraCondition || extraCondition(player));\n\t\t},\n\t};\n}\nfunction playerClassAndTalentInternal<T extends Class>(clazz: T, talentName: keyof SpecTalents<ClassSpecs<T>>, negateTalent: boolean, extraCondition?: (player: Player<ClassSpecs<T>>) => boolean): PlayerProvider {\n\treturn {\n\t\tclass: clazz,\n\t\tcondition: (player: Player<any>): boolean => {\n\t\t\treturn player.isClass(clazz)\n\t\t\t\t&& negateIf(Boolean(player.getTalents()[talentName]), negateTalent)\n\t\t\t\t&& (!extraCondition || extraCondition(player));\n\t\t},\n\t};\n}\nfunction playerClassAndTalent<T extends Class>(clazz: T, talentName: keyof SpecTalents<ClassSpecs<T>>, extraCondition?: (player: Player<ClassSpecs<T>>) => boolean): PlayerProvider {\n\treturn playerClassAndTalentInternal(clazz, talentName, false, extraCondition);\n}\nfunction playerClassAndMissingTalent<T extends Class>(clazz: T, talentName: keyof SpecTalents<ClassSpecs<T>>, extraCondition?: (player: Player<ClassSpecs<T>>) => boolean): PlayerProvider {\n\treturn playerClassAndTalentInternal(clazz, talentName, true, extraCondition);\n}\nfunction playerSpecAndTalentInternal<T extends Spec>(spec: T, talentName: keyof SpecTalents<T>, negateTalent: boolean, extraCondition?: (player: Player<T>) => boolean): PlayerProvider {\n\treturn {\n\t\tclass: specToClass[spec],\n\t\tcondition: (player: Player<any>): boolean => {\n\t\t\treturn player.isSpec(spec)\n\t\t\t\t&& negateIf(Boolean(player.getTalents()[talentName]), negateTalent)\n\t\t\t\t&& (!extraCondition || extraCondition(player));\n\t\t},\n\t};\n}\nfunction playerSpecAndTalent<T extends Spec>(spec: T, talentName: keyof SpecTalents<T>, extraCondition?: (player: Player<T>) => boolean): PlayerProvider {\n\treturn playerSpecAndTalentInternal(spec, talentName, false, extraCondition);\n}\nfunction playerSpecAndMissingTalent<T extends Spec>(spec: T, talentName: keyof SpecTalents<T>, extraCondition?: (player: Player<T>) => boolean): PlayerProvider {\n\treturn playerSpecAndTalentInternal(spec, talentName, true, extraCondition);\n}\n\nfunction raidBuff(buffName: keyof RaidBuffs): RaidProvider {\n\treturn (raid: Raid): boolean => {\n\t\treturn Boolean(raid.getBuffs()[buffName]);\n\t};\n}\n\nconst RAID_STATS_OPTIONS: RaidStatsOptions = {sections: [\n\t{\n\t\tlabel: 'Roles',\n\t\tcategories: [\n\t\t\t{\n\t\t\t\tlabel: 'Tanks',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Tanks',\n\t\t\t\t\t\tplayerData: { condition: player => isTankSpec(player.spec) },\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Healers',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Healers',\n\t\t\t\t\t\tplayerData: { condition: player => isHealingSpec(player.spec) },\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Melee',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Melee',\n\t\t\t\t\t\tplayerData: { condition: player => isMeleeDpsSpec(player.spec) },\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ranged',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Ranged',\n\t\t\t\t\t\tplayerData: { condition: player => isRangedDpsSpec(player.spec) },\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tlabel: 'Buffs',\n\t\tcategories: [\n\t\t\t{\n\t\t\t\tlabel: 'Bloodlust',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Bloodlust',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(2825),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassShaman, player => player.getSpecOptions().bloodlust),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Stats',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Gift of the Wild',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(17051),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDruid, 'improvedMarkOfTheWild'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Gift of the Wild',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(48470),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassDruid, 'improvedMarkOfTheWild'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Drums of the Wild',\n\t\t\t\t\t\tactionId: ActionId.fromItemId(49634),\n\t\t\t\t\t\traidData: raidBuff('drumsOfTheWild'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Stats %',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Blessing of Kings',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(25898),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Drums of Forgotten Kings',\n\t\t\t\t\t\tactionId: ActionId.fromItemId(49633),\n\t\t\t\t\t\traidData: raidBuff('drumsOfForgottenKings'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Blessing of Sanctuary',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(25899),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Armor',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Devotion Aura',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(20140),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'improvedDevotionAura', player => player.getSpecOptions().aura == PaladinAura.DevotionAura),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Devotion Aura',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(48942),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassPaladin, 'improvedDevotionAura', player => player.getSpecOptions().aura == PaladinAura.DevotionAura),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Stoneskin Totem',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(16293),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'guardianTotems', player => player.getRotation().totems?.earth == EarthTotem.StoneskinTotem),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Stoneskin Totem',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(58753),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassShaman, 'guardianTotems', player => player.getRotation().totems?.earth == EarthTotem.StoneskinTotem),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Scroll of Protection',\n\t\t\t\t\t\tactionId: ActionId.fromItemId(43468),\n\t\t\t\t\t\traidData: raidBuff('scrollOfProtection'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Stamina',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Power Word Fortitude',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(14767),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPriest, 'improvedPowerWordFortitude'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Power Word Fortitude',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(48161),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassPriest, 'improvedPowerWordFortitude'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Scroll of Stamina',\n\t\t\t\t\t\tactionId: ActionId.fromItemId(37094),\n\t\t\t\t\t\traidData: raidBuff('scrollOfStamina'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Str + Agi',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Strength of Earth Totem',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(52456),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'enhancingTotems', player => player.getRotation().totems?.earth == EarthTotem.StrengthOfEarthTotem),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Strength of Earth Totem',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(58643),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassShaman, 'enhancingTotems', player => player.getRotation().totems?.earth == EarthTotem.StrengthOfEarthTotem),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Horn of Winter',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(57623),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassDeathknight),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Scroll of Strength',\n\t\t\t\t\t\tactionId: ActionId.fromItemId(43466),\n\t\t\t\t\t\traidData: raidBuff('scrollOfStrength'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Scroll of Agility',\n\t\t\t\t\t\tactionId: ActionId.fromItemId(43464),\n\t\t\t\t\t\traidData: raidBuff('scrollOfAgility'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Intellect',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Arcane Brilliance',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(43002),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassMage),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Fel Intelligence',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(54038),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedFelhunter', player => player.getSpecOptions().summon == WarlockSummon.Felhunter),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Fel Intelligence',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(57567),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarlock, 'improvedFelhunter', player => player.getSpecOptions().summon == WarlockSummon.Felhunter),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Scroll of Intellect',\n\t\t\t\t\t\tactionId: ActionId.fromItemId(37092),\n\t\t\t\t\t\traidData: raidBuff('scrollOfIntellect'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Spirit',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Divine Spirit',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(48073),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassPriest),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Fel Intelligence',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(54038),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedFelhunter', player => player.getSpecOptions().summon == WarlockSummon.Felhunter),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Fel Intelligence',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(57567),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarlock, 'improvedFelhunter', player => player.getSpecOptions().summon == WarlockSummon.Felhunter),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Scroll of Spirit',\n\t\t\t\t\t\tactionId: ActionId.fromItemId(37098),\n\t\t\t\t\t\traidData: raidBuff('scrollOfSpirit'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Atk Pwr',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Blessing of Might',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(20045),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Blessing of Might',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(48934),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Battle Shout',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(12861),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'commandingPresence', player => player.getSpecOptions().shout == WarriorShout.WarriorShoutBattle),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Battle Shout',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(47436),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarrior, 'commandingPresence', player => player.getSpecOptions().shout == WarriorShout.WarriorShoutBattle),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Atk Pwr %',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Abomination\\'s Might',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(53138),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathknight, 'abominationsMight'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Unleashed Rage',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(30809),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'unleashedRage'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Trueshot Aura',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(19506),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassHunter, 'trueshotAura'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Damage %',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Sanctified Retribution',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(31869),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'sanctifiedRetribution'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Arcane Empowerment',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(31583),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassMage, 'arcaneEmpowerment'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Ferocious Inspiration',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(34460),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassHunter, 'ferociousInspiration'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Mit %',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Renewed Hope',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(57472),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPriest, 'renewedHope'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Blessing Of Sanctuary',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(25899),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Vigilance',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(50720),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'vigilance'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Haste %',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Swift Retribution',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(53648),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'swiftRetribution'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Moonkin Form',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(48396),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDruid, 'improvedMoonkinForm'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'MP5',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Blessing of Wisdom',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(20245),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'improvedBlessingOfWisdom'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Blessing of Wisdom',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(48938),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassPaladin, 'improvedBlessingOfWisdom'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Mana Spring Totem',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(16206),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'restorativeTotems', player => player.getRotation().totems?.water == WaterTotem.ManaSpringTotem),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Mana Spring Totem',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(58774),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassShaman, 'restorativeTotems', player => player.getRotation().totems?.water == WaterTotem.ManaSpringTotem),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Melee Crit',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Leader of the Pack',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(17007),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDruid, 'leaderOfThePack'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Rampage',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(29801),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'rampage'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Melee Haste',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Icy Talons',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(55610),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathknight, 'improvedIcyTalons'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Windfury Totem',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(29193),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'improvedWindfuryTotem', player => player.getRotation().totems?.air == AirTotem.WindfuryTotem),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Windfury Totem',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(65990),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassShaman, 'improvedWindfuryTotem', player => player.getRotation().totems?.air == AirTotem.WindfuryTotem),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Spell Power',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Demonic Pact',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(47240),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'demonicPact'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Totem of Wrath',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(57722),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'totemOfWrath', player => player.getRotation().totems?.fire == FireTotem.TotemOfWrath),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Flametongue Totem',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(58656),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassShaman, player => player.getRotation().totems?.fire == FireTotem.FlametongueTotem),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Spell Crit',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Moonkin Form',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(24907),\n\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecBalanceDruid, 'moonkinForm'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Elemental Oath',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(51470),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'elementalOath'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Spell Haste',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Wrath of Air Totem',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(3738),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassShaman, player => player.getRotation().totems?.air == AirTotem.WrathOfAirTotem),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Health',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Commanding Shout',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(12861),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'commandingPresence', player => player.getSpecOptions().shout == WarriorShout.WarriorShoutCommanding),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Commanding Shout',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(47440),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarrior, 'commandingPresence', player => player.getSpecOptions().shout == WarriorShout.WarriorShoutCommanding),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Imp',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(18696),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedImp', player => player.getSpecOptions().summon == WarlockSummon.Imp),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Blood Pact',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(47982),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarlock, 'improvedImp', player => player.getSpecOptions().summon == WarlockSummon.Imp),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Replenishment',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Vampiric Touch',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(48160),\n\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecShadowPriest, 'vampiricTouch'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Judgements of the Wise',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(31878),\n\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecRetributionPaladin, 'judgementsOfTheWise'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Hunting Party',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(53292),\n\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecHunter, 'huntingParty'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Soul Leech',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(54118),\n\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecWarlock, 'improvedSoulLeech'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Enduring Winter',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(44561),\n\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecMage, 'enduringWinter'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tlabel: 'External Buffs',\n\t\tcategories: [\n\t\t\t{\n\t\t\t\tlabel: 'Innervate',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Innervate',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(29166),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassDruid),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Power Infusion',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Power Infusion',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(10060),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPriest, 'powerInfusion'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Focus Magic',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Focus Magic',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(54648),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassMage, 'focusMagic'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Tricks of the Trade',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Tricks of the Trade',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(57933),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassRogue),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Unholy Frenzy',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Unholy Frenzy',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(49016),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathknight, 'hysteria'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Pain Suppression',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Pain Suppression',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(33206),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPriest, 'painSuppression'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Divine Guardian',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Divine Guardian',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(53530),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'divineGuardian'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tlabel: 'DPS Debuffs',\n\t\tcategories: [\n\t\t\t{\n\t\t\t\tlabel: 'Major ArP',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Sunder Armor',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(47467),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarrior, player => player.isSpec(Spec.SpecProtectionWarrior) || (player as Player<Spec.SpecWarrior>).getRotation().sunderArmor == SunderArmor.SunderArmorMaintain),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Expose Armor',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(8647),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassRogue, player => player.getRotation().exposeArmorFrequency == ExposeFrequency.Maintain),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Acid Spit',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(55754),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().petType == HunterPetType.Worm),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Minor ArP',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Faerie Fire',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(770),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassDruid, player => player.spec == Spec.SpecFeralTankDruid ||\n\t\t\t\t\t\t\t(player.spec != Spec.SpecRestorationDruid && (player as Player<Spec.SpecBalanceDruid | Spec.SpecFeralDruid>).getRotation().maintainFaerieFire)),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Curse of Weakness',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(50511),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarlock, player => player.getRotation().curse == WarlockCurse.Weakness),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Sting',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(56631),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().petType == HunterPetType.Wasp),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Spore Cloud',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(53598),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().petType == HunterPetType.Bat),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Phys Vuln',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Blood Frenzy',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(29859),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'bloodFrenzy'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Savage Combat',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(58413),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassRogue, 'savageCombat'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Bleed',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Mangle',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(16862),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassDruid, player => [Spec.SpecFeralDruid, Spec.SpecFeralTankDruid].includes(player.spec)),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Trauma',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(46855),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'trauma'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Stampede',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(57393),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().petType == HunterPetType.Rhino),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Crit',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Totem of Wrath',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(30706),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'totemOfWrath', player => player.getRotation().totems?.fire == FireTotem.TotemOfWrath),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Heart of the Crusader',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(20337),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'heartOfTheCrusader', player => [Spec.SpecRetributionPaladin, Spec.SpecProtectionPaladin].includes(player.spec)),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Master Poisoner',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(58410),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassRogue, 'masterPoisoner'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Spell Crit',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Shadow Bolt',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(17803),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedShadowBolt'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Scorch',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(12873),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassMage, 'improvedScorch', player => {\n\t\t\t\t\t\t\tconst rotation = player.getRotation();\n\t\t\t\t\t\t\treturn rotation.type == MageRotationType.Fire && rotation.maintainImprovedScorch;\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Winter\\'s Chill',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(28593),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassMage, 'wintersChill', player => player.getRotation().type == MageRotationType.Frost),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Spell Hit',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Misery',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(33198),\n\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecShadowPriest, 'misery'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Faerie Fire',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(33602),\n\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecBalanceDruid, 'improvedFaerieFire'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Spell Dmg',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Ebon Plaguebringer',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(51161),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathknight, 'ebonPlaguebringer'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Earth and Moon',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(48511),\n\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecBalanceDruid, 'earthAndMoon'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Curse of Elements',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(47865),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarlock, player => player.getRotation().curse == WarlockCurse.Elements),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tlabel: 'Mitigation Debuffs',\n\t\tcategories: [\n\t\t\t{\n\t\t\t\tlabel: 'Atk Pwr',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Vindication',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(26016),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'vindication', player => [Spec.SpecRetributionPaladin, Spec.SpecProtectionPaladin].includes(player.spec)),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Demoralizing Shout',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(12879),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'improvedDemoralizingShout', player => (player.spec == Spec.SpecWarrior && (player as Player<Spec.SpecWarrior>).getRotation().maintainDemoShout) || (player.spec == Spec.SpecProtectionWarrior && (player as Player<Spec.SpecProtectionWarrior>).getRotation().demoShoutChoice != 0)),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Demoralizing Shout',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(47437),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarrior, 'improvedDemoralizingShout', player => (player.spec == Spec.SpecWarrior && (player as Player<Spec.SpecWarrior>).getRotation().maintainDemoShout) || (player.spec == Spec.SpecProtectionWarrior && (player as Player<Spec.SpecProtectionWarrior>).getRotation().demoShoutChoice != 0)),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Demoralizing Roar',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(16862),\n\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecFeralTankDruid, 'feralAggression', player => player.getRotation().maintainDemoralizingRoar),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Demoralizing Roar',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(48560),\n\t\t\t\t\t\tplayerData: playerSpecAndMissingTalent(Spec.SpecFeralTankDruid, 'feralAggression', player => player.getRotation().maintainDemoralizingRoar),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Curse of Weakness',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(18180),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedCurseOfWeakness', player => player.getRotation().curse == WarlockCurse.Weakness),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Curse of Weakness',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(50511),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'improvedCurseOfWeakness', player => player.getRotation().curse == WarlockCurse.Weakness),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Demoralizing Screech',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(55487),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().petType == HunterPetType.CarrionBird),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Atk Speed',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Thunder Clap',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(12666),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'improvedThunderClap', player => (player.spec == Spec.SpecWarrior && (player as Player<Spec.SpecWarrior>).getRotation().maintainThunderClap) || (player.spec == Spec.SpecProtectionWarrior && (player as Player<Spec.SpecProtectionWarrior>).getRotation().thunderClapChoice != 0)),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Thunder Clap',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(47502),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassWarrior, 'improvedThunderClap', player => (player.spec == Spec.SpecWarrior && (player as Player<Spec.SpecWarrior>).getRotation().maintainThunderClap) || (player.spec == Spec.SpecProtectionWarrior && (player as Player<Spec.SpecProtectionWarrior>).getRotation().thunderClapChoice != 0)),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Improved Frost Fever',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(51456),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathknight, 'improvedIcyTouch'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Frost Fever',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(51456),\n\t\t\t\t\t\tplayerData: playerClassAndMissingTalent(Class.ClassDeathknight, 'improvedIcyTouch'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Judgements of the Just',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(53696),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'judgementsOfTheJust'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Infected Wounds',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(48485),\n\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDruid, 'infectedWounds', player => [Spec.SpecFeralDruid, Spec.SpecFeralTankDruid].includes(player.spec)),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Miss',\n\t\t\t\teffects: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Insect Swarm',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(65855),\n\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecBalanceDruid, 'insectSwarm'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Scorpid Sting',\n\t\t\t\t\t\tactionId: ActionId.fromSpellId(3043),\n\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getRotation().sting == HunterStingType.ScorpidSting),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n]};\n","import { RaidPicker } from \"./raid_picker\";\nimport { RaidSimUI } from \"./raid_sim_ui\";\nimport { RaidStats } from \"./raid_stats\";\nimport { SavedDataManager } from \"../core/components/saved_data_manager\";\nimport { SimTab } from \"../core/components/sim_tab\";\nimport { BlessingsAssignments, SavedRaid } from \"../core/proto/ui\";\nimport { EventID, TypedEvent } from \"../core/typed_event\";\nimport { Raid as RaidProto } from \"../core/proto/api\";\n\nexport class RaidTab extends SimTab {\n  protected simUI: RaidSimUI;\n\n  readonly leftPanel: HTMLElement;\n  readonly rightPanel: HTMLElement;\n\n  constructor(parentElem: HTMLElement, simUI: RaidSimUI) {\n    super(parentElem, simUI, {identifier: 'raid-tab', title: 'Raid'});\n    this.simUI = simUI;\n\n    this.rootElem.classList.add('active', 'show')\n\n    this.leftPanel = document.createElement('div');\n    this.leftPanel.classList.add('raid-tab-left', 'tab-panel-left');\n\n    this.rightPanel = document.createElement('div');\n    this.rightPanel.classList.add('raid-tab-right', 'tab-panel-right');\n\n    this.contentContainer.appendChild(this.leftPanel);\n    this.contentContainer.appendChild(this.rightPanel);\n\n    this.buildTabContent();\n  }\n\n  protected buildTabContent() {\n    this.simUI.raidPicker = new RaidPicker(this.leftPanel, this.simUI);\n    new RaidStats(this.leftPanel, this.simUI);\n\n    const savedRaidManager = new SavedDataManager<RaidSimUI, SavedRaid>(\n\t\t\tthis.rightPanel, this.simUI, this.simUI, {\n\t\t\t\tlabel: 'Raid',\n        header: {title: 'Saved Raid Groups'},\n\t\t\t\tstorageKey: this.simUI.getSavedRaidStorageKey(),\n\t\t\t\tgetData: (raidSimUI: RaidSimUI) => SavedRaid.create({\n\t\t\t\t\traid: this.simUI.sim.raid.toProto(),\n\t\t\t\t\tblessings: this.simUI.blessingsPicker!.getAssignments(),\n\t\t\t\t\tfaction: this.simUI.sim.getFaction(),\n\t\t\t\t\tphase: this.simUI.sim.getPhase(),\n\t\t\t\t}),\n\t\t\t\tsetData: (eventID: EventID, raidSimUI: RaidSimUI, newRaid: SavedRaid) => {\n\t\t\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\t\t\tthis.simUI.sim.raid.fromProto(eventID, newRaid.raid || RaidProto.create());\n\t\t\t\t\t\tthis.simUI.blessingsPicker!.setAssignments(eventID, newRaid.blessings || BlessingsAssignments.create());\n\t\t\t\t\t\tif (newRaid.faction) this.simUI.sim.setFaction(eventID, newRaid.faction);\n\t\t\t\t\t\tif (newRaid.phase) this.simUI.sim.setPhase(eventID, newRaid.phase);\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tchangeEmitters: [this.simUI.changeEmitter, this.simUI.sim.changeEmitter],\n\t\t\t\tequals: (a: SavedRaid, b: SavedRaid) => {\n\t\t\t\t\treturn SavedRaid.equals(a, b);\n\t\t\t\t},\n\t\t\t\ttoJson: (a: SavedRaid) => SavedRaid.toJson(a),\n\t\t\t\tfromJson: (obj: any) => SavedRaid.fromJson(obj),\n\t\t\t}\n\t\t);\n\t\tthis.simUI.sim.waitForInit().then(() => {\n\t\t\tsavedRaidManager.loadUserData();\n\t\t});\n  }\n}\n","import { Input, InputConfig } from '../components/input.js';\nimport { Player } from '../player.js';\nimport { Raid } from '../raid.js';\nimport { EventID, TypedEvent } from '../typed_event.js';\nimport { RaidTarget } from '../proto/common.js';\nimport { emptyRaidTarget, cssClassForClass } from '../proto_utils/utils.js';\n\nexport interface RaidTargetPickerConfig<ModObject> extends InputConfig<ModObject, RaidTarget> {\n\tnoTargetLabel: string,\n\tcompChangeEmitter: TypedEvent<void>,\n}\n\ninterface OptionElemOptions {\n\tisDropdown?: boolean,\n\tplayer: Player<any>|null,\n}\n\n// Dropdown menu for selecting a player.\nexport class RaidTargetPicker<ModObject> extends Input<ModObject, RaidTarget> {\n\tprivate readonly config: RaidTargetPickerConfig<ModObject>;\n\tprivate readonly raid: Raid;\n\n\tprivate curPlayer: Player<any> | null;\n\tprivate curRaidTarget: RaidTarget;\n\n\tprivate currentOptions: Array<OptionElemOptions>;\n\n\tprivate readonly buttonElem: HTMLElement;\n\tprivate readonly dropdownElem: HTMLElement;\n\n\tconstructor(parent: HTMLElement, raid: Raid, modObj: ModObject, config: RaidTargetPickerConfig<ModObject>) {\n\t\tsuper(parent, 'raid-target-picker-root', modObj, config);\n\t\tthis.rootElem.classList.add('dropdown');\n\t\tthis.config = config;\n\t\tthis.raid = raid;\n\t\tthis.curPlayer = this.raid.getPlayerFromRaidTarget(config.getValue(modObj));\n\t\tthis.curRaidTarget = this.getInputValue();\n\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<a\n\t\t\t\tclass=\"raid-target-picker-button\"\n\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\trole=\"button\"\n\t\t\t\tdata-bs-toggle=\"dropdown\"\n\t\t\t></a>\n\t\t\t<div class=\"dropdown-menu\"></div>\n    `;\n\n\t\tthis.buttonElem = this.rootElem.querySelector('.raid-target-picker-button') as HTMLElement;\n\t\tthis.dropdownElem = this.rootElem.querySelector('.dropdown-menu') as HTMLElement;\n\n\t\tthis.buttonElem.addEventListener('click', event => event.preventDefault());\n\n\t\tthis.currentOptions = [];\n\t\tthis.updateOptions(TypedEvent.nextEventID());\n\t\tconfig.compChangeEmitter.on(eventID => this.updateOptions(eventID));\n\n\t\tthis.init();\n\t}\n\n\tprivate makeTargetOptions(): Array<OptionElemOptions> {\n\t\tconst unassignedOption = {player: null, isDropdown: true}\n\t\tconst playerOptions = this.raid.getPlayers().filter(player => player != null).map(player => {\n\t\t\treturn { player: player, isDropdown: true }\n\t\t});\n\n\t\treturn [unassignedOption, ...playerOptions]\n\t}\n\n\tprivate updateOptions(eventID: EventID) {\n\t\tthis.currentOptions = this.makeTargetOptions();\n\n\t\tthis.dropdownElem.innerHTML = '';\n\t\tthis.currentOptions.forEach(option => this.dropdownElem.appendChild(this.makeOption(option)));\n\n\t\tconst prevRaidTarget = this.curRaidTarget;\n\t\tthis.curRaidTarget = this.getInputValue();\n\t\tif (!RaidTarget.equals(prevRaidTarget, this.curRaidTarget)) {\n\t\t\tthis.inputChanged(eventID);\n\t\t} else {\n\t\t\tthis.setInputValue(this.curRaidTarget);\n\t\t}\n\t}\n\n\tprivate makeOption(data: OptionElemOptions): HTMLElement {\n\t\tconst option = RaidTargetPicker.makeOptionElem(data);\n\n\t\toption.addEventListener('click', event => {\n\t\t\tevent.preventDefault();\n\t\t\tthis.curPlayer = data.player;\n\t\t\tthis.curRaidTarget = this.getInputValue();\n\t\t\tthis.inputChanged(TypedEvent.nextEventID());\n\t\t});\n\n\t\treturn option;\n\t}\n\n\tgetInputElem(): HTMLElement {\n\t\treturn this.buttonElem;\n\t}\n\n\tgetInputValue(): RaidTarget {\n\t\tif (this.curPlayer) {\n\t\t\treturn this.curPlayer.makeRaidTarget();\n\t\t} else {\n\t\t\treturn emptyRaidTarget();\n\t\t}\n\t}\n\n\tsetInputValue(newValue: RaidTarget) {\n\t\tthis.curRaidTarget = RaidTarget.clone(newValue);\n\t\tthis.curPlayer = this.raid.getPlayerFromRaidTarget(this.curRaidTarget);\n\n\t\tconst optionData = this.currentOptions.find(optionData => optionData.player == this.curPlayer);\n\n\t\tif (optionData)\n\t\t\tthis.buttonElem.innerHTML = RaidTargetPicker.makeOptionElem({player: optionData.player}).outerHTML;\n\t}\n\n\t// static makeOptionElem(data: RaidTargetElemOption): HTMLElement {\n\t// \tconst optionContainer = document.createElement('div');\n\t// \toptionContainer.classList.add('dropdown-option-container');\n\n\t// \tconst option = document.createElement('div');\n\t// \toption.classList.add('raid-target-picker-option');\n\t// \toptionContainer.appendChild(option);\n\t// \tif (data.isDropdown) {\n\t// \t\toption.classList.add('dropdown-option');\n\t// \t}\n\n\t// \tif (data.iconUrl) {\n\t// \t\tconst icon = document.createElement('img');\n\t// \t\ticon.src = data.iconUrl;\n\t// \t\ticon.classList.add('raid-target-picker-icon');\n\t// \t\toption.appendChild(icon);\n\t// \t}\n\n\t// \tif (data.text) {\n\t// \t\tconst label = document.createElement('span');\n\t// \t\tlabel.textContent = data.text;\n\t// \t\tlabel.classList.add('raid-target-picker-label');\n\t// \t\toption.appendChild(label);\n\t// \t}\n\n\t// \treturn optionContainer;\n\t// }\n\n\tstatic makeOptionElem(data: OptionElemOptions): HTMLElement {\n\t\tconst classCssClass = data.player ? cssClassForClass(data.player.getClass()) : '';\n\t\tlet playerFragment = document.createElement('fragment');\n\n\t\tplayerFragment.innerHTML = `\n\t\t\t<div class=\"player ${classCssClass ? `bg-${classCssClass}-dampened` : ''}\">\n\t\t\t\t<div class=\"player-label\">\n\t\t\t\t\t${data.player ? `<img class=\"player-icon\" src=\"${data.player.getSpecIcon()}\" draggable=\"false\"/>` : ''}\n\t\t\t\t\t<div class=\"player-details\">\n\t\t\t\t\t\t<span class=\"player-name ${classCssClass ? `text-${classCssClass}` : ''}\">\n\t\t\t\t\t\t\t${data.player ? data.player.getName() : 'Unassigned'}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`\n\n\t\tif (data.isDropdown) {\n\t\t\tplayerFragment.innerHTML = `\n\t\t\t\t<a class=\"dropdown-option\" href=\"javascript:void(0) role=\"button\">${playerFragment.innerHTML}</a>\n\t\t\t`\n\t\t}\n\n\t\treturn playerFragment.children[0] as HTMLElement;\n\t}\n}\n","import { Component } from '../core/components/component.js';\nimport { RaidTargetPicker } from '../core/components/raid_target_picker.js';\n\nimport { Player } from '../core/player.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\n\nimport { Class, RaidTarget, Spec } from '../core/proto/common.js';\nimport { emptyRaidTarget } from '../core/proto_utils/utils.js';\n\nimport { RaidSimUI } from './raid_sim_ui.js';\n\nexport class AssignmentsPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly innervatesPicker: InnervatesPicker;\n\tprivate readonly powerInfusionsPicker: PowerInfusionsPicker;\n\tprivate readonly tricksOfTheTradesPicker: TricksOfTheTradesPicker;\n\tprivate readonly unholyFrenzyPicker: UnholyFrenzyPicker;\n\tprivate readonly focusMagicsPicker: FocusMagicsPicker;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'assignments-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\n\t\tthis.innervatesPicker = new InnervatesPicker(this.rootElem, raidSimUI);\n\t\tthis.powerInfusionsPicker = new PowerInfusionsPicker(this.rootElem, raidSimUI);\n\t\tthis.tricksOfTheTradesPicker = new TricksOfTheTradesPicker(this.rootElem, raidSimUI);\n\t\tthis.unholyFrenzyPicker = new UnholyFrenzyPicker(this.rootElem, raidSimUI);\n\t\tthis.focusMagicsPicker = new FocusMagicsPicker(this.rootElem, raidSimUI);\n\t}\n}\n\ninterface AssignmentTargetPicker {\n\tplayer: Player<any>,\n\ttargetPicker: RaidTargetPicker<Player<any>>,\n\ttargetPlayer: Player<any> | null;\n};\n\nabstract class AssignedBuffPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly playersContainer: HTMLElement;\n\n\tprivate targetPickers: Array<AssignmentTargetPicker>;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'assigned-buff-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.targetPickers = [];\n\n\t\tthis.playersContainer = document.createElement('div');\n\t\tthis.playersContainer.classList.add('assigned-buff-container');\n\t\tthis.rootElem.appendChild(this.playersContainer);\n\n\t\tthis.raidSimUI.changeEmitter.on(eventID => this.update());\n\t\tthis.update();\n\t}\n\n\tprivate update() {\n\t\tthis.playersContainer.innerHTML = `\n\t\t\t<label class=\"assignmented-buff-label form-label\">${this.getTitle()}</label>\n\t\t`\n\n\t\tconst sourcePlayers = this.getSourcePlayers();\n\t\tif (sourcePlayers.length == 0)\n\t\t\tthis.rootElem.classList.add('hide');\n\t\telse\n\t\tthis.rootElem.classList.remove('hide');\n\n\t\tthis.targetPickers = sourcePlayers.map((sourcePlayer, sourcePlayerIndex) => {\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.classList.add('assigned-buff-player', 'input-inline');\n\t\t\tthis.playersContainer.appendChild(row);\n\n\t\t\tlet sourceElem = document.createElement('div');\n\t\t\tsourceElem.classList.add('raid-target-picker-root');\n\t\t\tsourceElem.appendChild(\n\t\t\t\tRaidTargetPicker.makeOptionElem({player: sourcePlayer, isDropdown: false})\n\t\t\t);\n\t\t\trow.appendChild(sourceElem);\n\n\t\t\tconst arrow = document.createElement('i');\n\t\t\tarrow.classList.add('assigned-buff-arrow', 'fa', 'fa-arrow-right');\n\t\t\trow.appendChild(arrow);\n\n\t\t\tconst raidTargetPicker: RaidTargetPicker<Player<any>> | null = new RaidTargetPicker<Player<any>>(row, this.raidSimUI.sim.raid, sourcePlayer, {\n\t\t\t\textraCssClasses: ['assigned-buff-target-picker'],\n\t\t\t\tnoTargetLabel: 'Unassigned',\n\t\t\t\tcompChangeEmitter: this.raidSimUI.sim.raid.compChangeEmitter,\n\n\t\t\t\tchangedEvent: (player: Player<any>) => player.specOptionsChangeEmitter,\n\t\t\t\tgetValue: (player: Player<any>) => this.getPlayerValue(player),\n\t\t\t\tsetValue: (eventID: EventID, player: Player<any>, newValue: RaidTarget) => this.setPlayerValue(eventID, player, newValue),\n\t\t\t});\n\n\t\t\tconst targetPickerData = {\n\t\t\t\tplayer: sourcePlayer,\n\t\t\t\ttargetPicker: raidTargetPicker!,\n\t\t\t\ttargetPlayer: this.raidSimUI.sim.raid.getPlayerFromRaidTarget(raidTargetPicker!.getInputValue()),\n\t\t\t};\n\n\t\t\traidTargetPicker!.changeEmitter.on(eventID => {\n\t\t\t\ttargetPickerData.targetPlayer = this.raidSimUI.sim.raid.getPlayerFromRaidTarget(raidTargetPicker!.getInputValue());\n\t\t\t});\n\n\t\t\treturn targetPickerData;\n\t\t});\n\t}\n\n\tabstract getTitle(): string;\n\tabstract getSourcePlayers(): Array<Player<any>>;\n\n\tabstract getPlayerValue(player: Player<any>): RaidTarget;\n\tabstract setPlayerValue(eventID: EventID, player: Player<any>, newValue: RaidTarget): void;\n}\n\nclass InnervatesPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Innervate';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassDruid));\n\t}\n\n\tgetPlayerValue(player: Player<any>): RaidTarget {\n\t\treturn (player as Player<Spec.SpecBalanceDruid>).getSpecOptions().innervateTarget || emptyRaidTarget();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: RaidTarget) {\n\t\tconst newOptions = (player as Player<Spec.SpecBalanceDruid>).getSpecOptions();\n\t\tnewOptions.innervateTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\nclass PowerInfusionsPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Power Infusion';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassPriest) && player.getTalents().powerInfusion);\n\t}\n\n\tgetPlayerValue(player: Player<any>): RaidTarget {\n\t\treturn (player as Player<Spec.SpecSmitePriest>).getSpecOptions().powerInfusionTarget || emptyRaidTarget();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: RaidTarget) {\n\t\tconst newOptions = (player as Player<Spec.SpecSmitePriest>).getSpecOptions();\n\t\tnewOptions.powerInfusionTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\nclass TricksOfTheTradesPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Tricks of the Trade';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassRogue));\n\t}\n\n\tgetPlayerValue(player: Player<any>): RaidTarget {\n\t\treturn (player as Player<Spec.SpecRogue>).getSpecOptions().tricksOfTheTradeTarget || emptyRaidTarget();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: RaidTarget) {\n\t\tconst newOptions = (player as Player<Spec.SpecRogue>).getSpecOptions();\n\t\tnewOptions.tricksOfTheTradeTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\nclass UnholyFrenzyPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Unholy Frenzy';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassDeathknight) && player.getTalents().hysteria);\n\t}\n\n\tgetPlayerValue(player: Player<any>): RaidTarget {\n\t\treturn (player as Player<Spec.SpecDeathknight>).getSpecOptions().unholyFrenzyTarget || emptyRaidTarget();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: RaidTarget) {\n\t\tconst newOptions = (player as Player<Spec.SpecDeathknight>).getSpecOptions();\n\t\tnewOptions.unholyFrenzyTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\nclass FocusMagicsPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Focus Magic';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassMage));\n\t}\n\n\tgetPlayerValue(player: Player<any>): RaidTarget {\n\t\treturn (player as Player<Spec.SpecMage>).getSpecOptions().focusMagicTarget || emptyRaidTarget();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: RaidTarget) {\n\t\tconst newOptions = (player as Player<Spec.SpecMage>).getSpecOptions();\n\t\tnewOptions.focusMagicTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n","import { Component } from '../core/components/component';\nimport { IconEnumPicker } from '../core/components/icon_enum_picker';\n\nimport { memeSpecs } from '../core/launched_sims';\nimport { EventID, TypedEvent } from '../core/typed_event';\n\nimport { Class, Spec } from '../core/proto/common';\nimport { Blessings } from '../core/proto/paladin';\nimport { BlessingsAssignments } from '../core/proto/ui';\nimport { ActionId } from '../core/proto_utils/action_id';\nimport {\n\tmakeDefaultBlessings,\n\tclassColors,\n\tnaturalSpecOrder,\n\tspecNames,\n\ttitleIcons,\n} from '../core/proto_utils/utils';\n\nimport { RaidSimUI } from './raid_sim_ui';\nimport { implementedSpecs } from './presets';\nimport { Tooltip } from 'bootstrap';\n\nconst MAX_PALADINS = 4;\n\nexport class BlessingsPicker extends Component {\n\treadonly simUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly pickers: Array<Array<IconEnumPicker<this, Blessings>>> = [];\n\n\tprivate assignments: BlessingsAssignments;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'blessings-picker-root');\n\t\tthis.simUI = raidSimUI;\n\t\tthis.assignments = BlessingsAssignments.clone(makeDefaultBlessings(4));\n\n\t\tconst specs = naturalSpecOrder\n\t\t\t.filter(spec => implementedSpecs.includes(spec))\n\t\t\t.filter(spec => !memeSpecs.includes(spec));\n\t\tconst paladinIndexes = [...Array(MAX_PALADINS).keys()];\n\n\t\tspecs.map(spec => {\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.classList.add('blessings-picker-row');\n\t\t\tthis.rootElem.appendChild(row);\n\n\t\t\trow.append(this.buildSpecIcon(spec));\n\n\t\t\tconst container = document.createElement('div');\n\t\t\tcontainer.classList.add('blessings-picker-container');\n\t\t\trow.appendChild(container);\n\n\t\t\tpaladinIndexes.forEach(paladinIdx => {\n\t\t\t\tif (!this.pickers[paladinIdx])\n\t\t\t\t\tthis.pickers.push([]);\n\n\t\t\t\tconst blessingPicker = new IconEnumPicker(container, this, {\n\t\t\t\t\textraCssClasses: ['blessing-picker'],\n\t\t\t\t\tnumColumns: 1,\n\t\t\t\t\tvalues: [\n\t\t\t\t\t\t{ color: classColors[Class.ClassPaladin], value: Blessings.BlessingUnknown },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(25898), value: Blessings.BlessingOfKings },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(48934), value: Blessings.BlessingOfMight },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(48938), value: Blessings.BlessingOfWisdom },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(25899), value: Blessings.BlessingOfSanctuary },\n\t\t\t\t\t],\n\t\t\t\t\tequals: (a: Blessings, b: Blessings) => a == b,\n\t\t\t\t\tzeroValue: Blessings.BlessingUnknown,\n\t\t\t\t\tenableWhen: (_picker: BlessingsPicker) => {\n\t\t\t\t\t\tconst numPaladins = Math.min(this.simUI.getClassCount(Class.ClassPaladin), MAX_PALADINS);\n\t\t\t\t\t\treturn paladinIdx < numPaladins;\n\t\t\t\t\t},\n\t\t\t\t\tchangedEvent: (picker: BlessingsPicker) => picker.changeEmitter,\n\t\t\t\t\tgetValue: (picker: BlessingsPicker) => picker.assignments.paladins[paladinIdx]?.blessings[spec] || Blessings.BlessingUnknown,\n\t\t\t\t\tsetValue: (eventID: EventID, picker: BlessingsPicker, newValue: number) => {\n\t\t\t\t\t\tconst currentValue = picker.assignments.paladins[paladinIdx].blessings[spec];\n\t\t\t\t\t\tif (currentValue != newValue) {\n\t\t\t\t\t\t\tpicker.assignments.paladins[paladinIdx].blessings[spec] = newValue;\n\t\t\t\t\t\t\tthis.changeEmitter.emit(eventID);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tthis.pickers[paladinIdx].push(blessingPicker);\n\t\t\t});\n\n\t\t\treturn row;\n\t\t});\n\n\t\tthis.updatePickers()\n\t\tthis.simUI.compChangeEmitter.on(_eventID => this.updatePickers());\n\t}\n\n\tprivate updatePickers() {\n\t\tfor (let i = 0; i < MAX_PALADINS; i++) {\n\t\t\tthis.pickers[i].forEach(picker => picker.update());\n\t\t}\n\t}\n\n\tprivate buildSpecIcon(spec: Spec): HTMLElement {\n\t\tlet fragment = document.createElement('fragment');\n\t\tfragment.innerHTML = `\n\t\t\t<div class=\"blessings-picker-spec\">\n\t\t\t\t<img\n\t\t\t\t\tsrc=\"${titleIcons[spec]}\"\n\t\t\t\t\tclass=\"blessings-spec-icon\"\n\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\tdata-bs-title=\"${specNames[spec]}\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t`;\n\n\t\tconst icon = fragment.querySelector('.blessings-spec-icon') as HTMLElement;\n\t\tTooltip.getOrCreateInstance(icon);\n\n\t\treturn fragment.children[0] as HTMLElement;\n\t}\n\n\tgetAssignments(): BlessingsAssignments {\n\t\t// Defensive copy.\n\t\treturn BlessingsAssignments.clone(this.assignments);\n\t}\n\n\tsetAssignments(eventID: EventID, newAssignments: BlessingsAssignments) {\n\t\tthis.assignments = BlessingsAssignments.clone(newAssignments);\n\t\tthis.changeEmitter.emit(eventID);\n\t}\n}\n","import { Component } from '../core/components/component';\nimport { RaidTargetPicker } from '../core/components/raid_target_picker';\n\nimport { Raid } from '../core/raid';\nimport { EventID } from '../core/typed_event';\n\nimport { RaidTarget } from '../core/proto/common';\nimport { emptyRaidTarget } from '../core/proto_utils/utils';\n\nimport { RaidSimUI } from './raid_sim_ui';\n\nconst MAX_TANKS = 4;\n\nexport class TanksPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'tanks-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\n\t\tconst raid = this.raidSimUI.sim.raid;\n\n\t\tfor (let i = 0; i < MAX_TANKS; i++) {\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.classList.add('tank-picker-row', 'input-inline');\n\t\t\tthis.rootElem.appendChild(row);\n\n\t\t\tconst labelElem = document.createElement('label');\n\t\t\tlabelElem.textContent = i == 0 ? 'Main Tank' : `Tank ${i + 1}`;\n\t\t\tlabelElem.classList.add('tank-picker-label', 'form-label');\n\t\t\trow.appendChild(labelElem);\n\n\t\t\tnew RaidTargetPicker<Raid>(row, raid, raid, {\n\t\t\t\textraCssClasses: ['tank-picker'],\n\t\t\t\tnoTargetLabel: 'Unassigned',\n\t\t\t\tcompChangeEmitter: raid.compChangeEmitter,\n\n\t\t\t\tchangedEvent: (raid: Raid) => raid.tanksChangeEmitter,\n\t\t\t\tgetValue: (raid: Raid) => raid.getTanks()[i] || emptyRaidTarget(),\n\t\t\t\tsetValue: (eventID: EventID, raid: Raid, newValue: RaidTarget) => {\n\t\t\t\t\tconst tanks = raid.getTanks();\n\t\t\t\t\tfor (let j = 0; j < i; j++) {\n\t\t\t\t\t\tif (!tanks[j]) {\n\t\t\t\t\t\t\ttanks.push(emptyRaidTarget());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttanks[i] = newValue;\n\t\t\t\t\traid.setTanks(eventID, tanks);\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}\n}\n","import { ContentBlock } from \"../core/components/content_block\";\nimport { EncounterPicker } from \"../core/components/encounter_picker\";\nimport { IconPicker } from \"../core/components/icon_picker\";\nimport { SavedDataManager } from \"../core/components/saved_data_manager\";\nimport { SimTab } from \"../core/components/sim_tab\";\n\nimport { Encounter } from \"../core/encounter\";\nimport { Raid } from \"../core/raid\";\nimport { EventID } from \"../core/typed_event\";\n\nimport { RaidBuffs } from \"../core/proto/common\";\nimport { SavedEncounter } from \"../core/proto/ui\";\nimport { ActionId } from \"../core/proto_utils/action_id\";\n\nimport { AssignmentsPicker } from \"./assignments_picker\";\nimport { BlessingsPicker } from \"./blessings_picker\";\nimport { RaidSimUI } from \"./raid_sim_ui\";\nimport { TanksPicker } from \"./tanks_picker\";\n\nimport * as Tooltips from \"../core/constants/tooltips.js\";\n\nexport class SettingsTab extends SimTab {\n  protected simUI: RaidSimUI;\n\n  readonly leftPanel: HTMLElement;\n  readonly rightPanel: HTMLElement;\n\n  readonly column1: HTMLElement = this.buildColumn(1, 'raid-settings-col');\n\treadonly column2: HTMLElement = this.buildColumn(2, 'raid-settings-col');\n\treadonly column3: HTMLElement = this.buildColumn(3, 'raid-settings-col');\n\n  constructor(parentElem: HTMLElement, simUI: RaidSimUI) {\n    super(parentElem, simUI, {identifier: 'raid-settings-tab', title: 'Settings'});\n    this.simUI = simUI;\n\n    this.leftPanel = document.createElement('div');\n    this.leftPanel.classList.add('raid-settings-tab-left', 'tab-panel-left');\n\n\t\tthis.leftPanel.appendChild(this.column1);\n\t\tthis.leftPanel.appendChild(this.column2);\n\t\tthis.leftPanel.appendChild(this.column3);\n\n\t\tthis.rightPanel = document.createElement('div');\n    this.rightPanel.classList.add('raid-settings-tab-right', 'tab-panel-right', 'within-raid-sim-hide');\n\n    this.contentContainer.appendChild(this.leftPanel);\n    this.contentContainer.appendChild(this.rightPanel);\n\n    this.buildTabContent();\n  }\n\n  protected buildTabContent() {\n    this.buildEncounterSettings();\n    this.buildConsumesSettings();\n    this.buildOtherSettings();\n\n    this.buildTankSettings();\n    this.buildAssignmentSettings();\n    \n    this.buildBlessingsPicker();\n    this.buildSavedDataPickers();\n  }\n\n  private buildEncounterSettings() {\n    const contentBlock = new ContentBlock(this.column1, 'encounter-settings', {\n      header: {title: 'Encounter'}\n    });\n\n    new EncounterPicker(contentBlock.bodyElement, this.simUI.sim.encounter, {showExecuteProportion: true}, this.simUI);\n  }\n\n  private buildConsumesSettings() {\n    const contentBlock = new ContentBlock(this.column1, 'consumes-settings', {\n      header: {title: 'Consumables'}\n    });\n\n    let container = document.createElement('div');\n    container.classList.add('consumes-container');\n\n    contentBlock.bodyElement.appendChild(container);\n\n    this.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(37094), 'scrollOfStamina'),\n\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(43466), 'scrollOfStrength'),\n\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(43464), 'scrollOfAgility'),\n\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(37092), 'scrollOfIntellect'),\n\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(37098), 'scrollOfSpirit'),\n\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(43468), 'scrollOfProtection'),\n\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(49633), 'drumsOfForgottenKings'),\n\t\tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(49634), 'drumsOfTheWild');\n  }\n\n  private buildOtherSettings() {\n    // const raid = this.simUI.sim.raid;\n    // const contentBlock = new ContentBlock(this.column1, 'other-settings', {\n    //   header: {title: 'Other'}\n    // });\n\n\t\t// new BooleanPicker(contentBlock.bodyElement, this.simUI.sim.raid, {\n\t\t// \tlabel: 'Stagger Stormstrikes',\n\t\t// \tlabelTooltip: 'When there are multiple Enhancement Shaman in the raid, causes them to coordinate their Stormstrike casts for optimal SS charge usage.',\n\t\t// \tchangedEvent: (raid: Raid) => raid.staggerStormstrikesChangeEmitter,\n\t\t// \tgetValue: (raid: Raid) => raid.getStaggerStormstrikes(),\n\t\t// \tsetValue: (eventID: EventID, raid: Raid, newValue: boolean) => {\n\t\t// \t\traid.setStaggerStormstrikes(eventID, newValue);\n\t\t// \t},\n\t\t// });\n  }\n\n  private buildTankSettings() {\n    const contentBlock = new ContentBlock(this.column2, 'tanks-settings', {\n\t\t\theader: {title: 'Tanks'}\n\t\t});\n\n    new TanksPicker(contentBlock.bodyElement, this.simUI);\n  }\n\n  private buildAssignmentSettings() {\n    const contentBlock = new ContentBlock(this.column2, 'assignments-settings', {\n\t\t\theader: {title: 'External Buffs'}\n\t\t});\n\n\t\tnew AssignmentsPicker(contentBlock.bodyElement, this.simUI);\n  }\n\n  private buildBlessingsPicker() {\n    const contentBlock = new ContentBlock(this.column3, 'blessings-settings', {\n      header: {title: 'Blessings', tooltip: Tooltips.BLESSINGS_SECTION}\n    });\n\n\t\tthis.simUI.blessingsPicker = new BlessingsPicker(contentBlock.bodyElement, this.simUI);\n\t\tthis.simUI.blessingsPicker.changeEmitter.on(eventID => this.simUI.changeEmitter.emit(eventID));\n  }\n\n  private buildSavedDataPickers() {\n    const savedEncounterManager = new SavedDataManager<Encounter, SavedEncounter>(this.rightPanel, this.simUI, this.simUI.sim.encounter, {\n      label: 'Encounter',\n      header: {title: 'Saved Encounters'},\n      storageKey: this.simUI.getSavedEncounterStorageKey(),\n      getData: (encounter: Encounter) => SavedEncounter.create({ encounter: encounter.toProto() }),\n      setData: (eventID: EventID, encounter: Encounter, newEncounter: SavedEncounter) => encounter.fromProto(eventID, newEncounter.encounter!),\n      changeEmitters: [this.simUI.sim.encounter.changeEmitter],\n      equals: (a: SavedEncounter, b: SavedEncounter) => SavedEncounter.equals(a, b),\n      toJson: (a: SavedEncounter) => SavedEncounter.toJson(a),\n      fromJson: (obj: any) => SavedEncounter.fromJson(obj),\n\t\t});\n\n\t\tthis.simUI.sim.waitForInit().then(() => {\n\t\t\tsavedEncounterManager.loadUserData();\n\t\t});\n  }\n\n  private makeBooleanRaidIconBuffInput(parent: HTMLElement, id: ActionId, field: keyof RaidBuffs): IconPicker<Raid, boolean> {\n    const raid = this.simUI.sim.raid;\n\n    return new IconPicker<Raid, boolean>(parent, raid, {\n      id: id,\n      states: 2,\n      changedEvent: (raid: Raid) => raid.buffsChangeEmitter,\n      getValue: (raid: Raid) => raid.getBuffs()[field] as unknown as boolean,\n      setValue: (eventID: EventID, raid: Raid, newValue: boolean) => {\n        const newBuffs = raid.getBuffs();\n        (newBuffs[field] as unknown as boolean) = newValue;\n        raid.setBuffs(eventID, newBuffs);\n      },\n    });\n  }\n}\n","import { Exporter } from '../core/components/exporters';\nimport { Importer } from '../core/components/importers';\nimport { MAX_PARTY_SIZE } from '../core/party';\nimport { RaidSimSettings } from '../core/proto/ui';\nimport { EventID, TypedEvent } from '../core/typed_event';\nimport { Party as PartyProto, Player as PlayerProto, Raid as RaidProto } from '../core/proto/api';\nimport {\n\tClass,\n\tEncounter as EncounterProto,\n\tEquipmentSpec,\n\tFaction,\n\tItemSpec,\n\tMobType,\n\tProfession,\n\tRace,\n\tRaidTarget,\n\tSpec,\n\tTarget as TargetProto,\n} from '../core/proto/common';\nimport { nameToClass, professionNames, raceNames } from '../core/proto_utils/names';\nimport {\n\tDruidSpecs,\n\tDeathknightSpecs,\n\tMageSpecs,\n\tPriestSpecs,\n\tRogueSpecs,\n\tSpecOptions,\n\tgetTalentTreePoints,\n\tmakeDefaultBlessings,\n\traceToFaction,\n\tspecTypeFunctions,\n\twithSpecProto,\n\tisTankSpec,\n\tplayerToSpec,\n} from '../core/proto_utils/utils';\nimport { MAX_NUM_PARTIES } from '../core/raid';\nimport { Player } from '../core/player';\nimport { Target } from '../core/target';\nimport { bucket, distinct, sortByProperty } from '../core/utils';\n\nimport { playerPresets, PresetSpecSettings } from './presets';\nimport { RaidSimUI } from './raid_sim_ui';\n\ndeclare var $: any;\ndeclare var tippy: any;\n\nexport class RaidJsonImporter extends Importer {\n\tprivate readonly simUI: RaidSimUI;\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, simUI, 'JSON Import', true);\n\t\tthis.simUI = simUI;\n\n\t\tthis.descriptionElem.innerHTML = `\n\t\t\t<p>\n\t\t\t\tImport settings from a JSON text file, which can be created using the JSON Export feature of this site.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the JSON text below and click, 'Import'.\n\t\t\t</p>\n\t\t`;\n\t}\n\n\tonImport(data: string) {\n\t\tconst settings = RaidSimSettings.fromJsonString(data, { ignoreUnknownFields: true });\n\t\tthis.simUI.fromProto(TypedEvent.nextEventID(), settings);\n\t\tthis.close();\n\t}\n}\n\nexport class RaidJsonExporter extends Exporter {\n\tprivate readonly simUI: RaidSimUI;\n\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, simUI, 'JSON Export', true);\n\t\tthis.simUI = simUI;\n\t\tthis.init();\n\t}\n\n\tgetData(): string {\n\t\treturn JSON.stringify(RaidSimSettings.toJson(this.simUI.toProto()), null, 2);\n\t}\n}\n\nexport class RaidWCLImporter extends Importer {\n\n\tprivate queryCounter: number = 0;\n\n\tprivate readonly simUI: RaidSimUI;\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, simUI, 'WCL Import', false);\n\t\tthis.simUI = simUI;\n\t\tthis.textElem.classList.add('small-textarea');\n\t\tthis.descriptionElem.innerHTML = `\n\t\t\t<p>\n\t\t\t\tImports the entire raid from a WCL report.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the WCL report and fight link (https://classic.warcraftlogs.com/reports/REPORTID#fight=FIGHTID).<br>\n\t\t\t\tInclude the fight ID or else the first fight in the report will be used.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tThe following are imported directly from the report:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Player Name</li>\n\t\t\t\t\t<li>Equipment (items, enchants, and gems)</li>\n\t\t\t\t\t<li>Faction (Alliance / Horde)</li>\n\t\t\t\t\t<li>Encounter: If the import link has a fight ID we try to match with a preset Encounter. Note that many Encounters are still unimplemented.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not available directly from the report data, but we try to infer them:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Talents: Log data only gives us the tree summary (e.g. '51/20/0') so we match this with the closest preset talent build.</li>\n\t\t\t\t\t<li>Glyphs: Glyphs are absent from log data, but we pair them with the inferred Talents.</li>\n\t\t\t\t\t<li>Race: Inferred from Race-specific abilties used in any fight if possible, or defaults to Spec-specific Race.</li>\n\t\t\t\t\t<li>Professions: Inferred from profession-locked items/enchants/gems.</li>\n\t\t\t\t\t<li>Buff assignments (Innervate, Unholy Frenzy, etc): Inferred from casts.</li>\n\t\t\t\t\t<li>Party Composition: Inferred from party-only effects, such as Heroic Presence, Prayer of Healing, or Vampiric Touch.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not imported, and instead use spec-specific defaults:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Rotation / Spec-specific options</li>\n\t\t\t\t\t<li>Consumes</li>\n\t\t\t\t\t<li>Paladin Blessings</li>\n\t\t\t\t</ul>\n\t\t\t</p>\n\t\t`;\n\t}\n\n\tprivate token: string = '';\n\tprivate async getWCLBearerToken(): Promise<string> {\n\t\tif (this.token == '') {\n\t\t\tconst response = await fetch('https://classic.warcraftlogs.com/oauth/token', {\n\t\t\t\t'method': 'POST',\n\t\t\t\t'headers': {\n\t\t\t\t\t'Authorization': 'Basic ' + btoa('963d31c8-7efa-4dde-87cf-1b254a8a2f8c:lRJVhujEEnF96xfUoxVHSpnqKN9v8bTqGEjutsO3'),\n\t\t\t\t},\n\t\t\t\tbody: new URLSearchParams({\n\t\t\t\t\t'grant_type': 'client_credentials',\n\t\t\t\t}),\n\t\t\t})\n\t\t\tconst json = await response.json();\n\t\t\tthis.token = json.access_token;\n\t\t}\n\t\treturn this.token;\n\t}\n\n\tprivate async queryWCL(query: string): Promise<any> {\n\t\tconst token = await this.getWCLBearerToken();\n\t\tconst headers = {\n\t\t\t'Content-Type': 'application/json',\n\t\t\t'Authorization': `Bearer ${token}`,\n\t\t\t'Accept': 'application/json',\n\t\t};\n\n\t\tconst queryURL = `https://classic.warcraftlogs.com/api/v2/client?query=${query}`;\n\t\tthis.queryCounter++;\n\n\t\t// Query WCL\n\t\tconst res = await fetch(encodeURI(queryURL), {\n\t\t\t'method': 'GET',\n\t\t\t'headers': headers,\n\t\t});\n\n\t\tconst result = await res.json();\n\t\tif (result?.errors?.length) {\n\t\t\tconst errorStr = result.errors.map((e: any) => e.message).join('\\n');\n\t\t\tthrow new Error(`GraphQL error: ${errorStr}\\n\\nQuery: ${query}`);\n\t\t} else {\n\t\t\tconsole.debug(`WCL query: ${query}\\n\\nResult: ${JSON.stringify(result)}`);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async parseURL(url: string): Promise<wclUrlData> {\n\t\tconst match = url.match(/classic\\.warcraftlogs\\.com\\/reports\\/([a-zA-Z0-9:]+)\\/?(#.*fight=((\\d+)|(last)))?/);\n\t\tif (!match) {\n\t\t\tthrow new Error(`Invalid WCL URL ${url}, must look like \"classic.warcraftlogs.com/reports/XXXX\"`);\n\t\t}\n\n\t\tconst urlData = {\n\t\t\treportID: match[1],\n\t\t\tfightID: '',\n\t\t}\n\n\t\t// If the URL has a Fight ID in it, use it\n\t\tif (match[2] && match[3] && match[3] != 'last') {\n\t\t\turlData.fightID = match[3];\n\t\t} else {\n\t\t\t// Make a separate query to get the corresponding ReportFights\n\t\t\tconst fightDataQuery = `{\n\t\t\t\treportData {\n\t\t\t\t\treport(code: \"${urlData.reportID}\") {\n\t\t\t\t\t\tfights(killType: Kills, translate: true) {\n\t\t\t\t\t\t\tid, name\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}`;\n\n\t\t\tconst fightData = await this.queryWCL(fightDataQuery);\n\t\t\tconst fights = fightData.data.reportData.report.fights;\n\n\t\t\tif (match[3] == 'last') {\n\t\t\t\turlData.fightID = String(fights[fights.length - 1].id)\n\t\t\t} else {\n\t\t\t\t// Default to using the first Fight\n\t\t\t\turlData.fightID = String(fights[0].id);\n\t\t\t}\n\t\t}\n\n\t\tconsole.debug(`Importing WCL report: ${JSON.stringify(urlData)}`);\n\t\treturn urlData;\n\t}\n\n\tprivate async getRateLimit(): Promise<wclRateLimitData> {\n\t\tconst query = `{\n\t    rateLimitData {\n\t      limitPerHour, pointsSpentThisHour, pointsResetIn\n\t    }\n\t  }`;\n\t\tconst result = await this.queryWCL(query);\n\t\tconst data = result['data']['rateLimitData'] as wclRateLimitData;\n\t\treturn data;\n\t}\n\n\tasync onImport(importLink: string) {\n\t\tthis.importButton.disabled = true;\n\t\tthis.rootElem.style.cursor = 'wait';\n\t\ttry {\n\t\t\tawait this.doImport(importLink);\n\t\t} catch (error) {\n\t\t\talert('Failed import from WCL: ' + error);\n\t\t}\n\t\tthis.importButton.disabled = false\n\t\tthis.rootElem.style.removeProperty('cursor');\n\t}\n\n\tasync doImport(importLink: string) {\n\t\tif (!importLink.length) {\n\t\t\tthrow new Error('No import link provided!');\n\t\t}\n\n\t\tconst urlData = await this.parseURL(importLink);\n\t\tconst rateLimit = await this.getRateLimit();\n\n\t\t// Schema for WCL API here: https://www.warcraftlogs.com/v2-api-docs/warcraft/\n\t\t// WCL charges us 1 'point' for each subquery we issue within the request. So\n\t\t// by using filter expressions we can combine our queries together, to spend\n\t\t// fewer points.\n\t\tconst reportDataQuery = `{\n\t\t\treportData {\n\t\t\t\treport(code: \"${urlData.reportID}\") {\n\t\t\t\t\tguild {\n\t\t\t\t\t\tname faction {id}\n\t\t\t\t\t}\n\t\t\t\t\tplayerDetails: table(fightIDs: [${urlData.fightID}], dataType: Casts, killType: All, viewBy: Default)\n\t\t\t\t\tcombatantInfoEvents: events(fightIDs: [${urlData.fightID}], dataType:CombatantInfo, limit: 50) { data }\n\t\t\t\t\tfights(fightIDs: [${urlData.fightID}]) {\n\t\t\t\t\t\tstartTime, endTime, id, name\n\t\t\t\t\t}\n\n\t\t\t\t\treportCastEvents: events(dataType:Casts, endTime: 99999999, filterExpression: \"${\n\t\t\t\t\t\t[racialSpells, professionSpells].flat().map(spell => spell.id).map(id => `ability.id = ${id}`).join(' OR ')\n\t\t\t\t\t}\", limit: 10000) { data }\n\n\t\t\t\t\tfightCastEvents: events(fightIDs: [${urlData.fightID}], dataType:Casts, filterExpression: \"${\n\t\t\t\t\t\t[externalCDSpells].flat().map(spell => spell.id).map(id => `ability.id = ${id}`).join(' OR ')\n\t\t\t\t\t}\", limit: 10000) { data }\n\n\t\t\t\t\tfightHealEvents: events(fightIDs: [${urlData.fightID}], dataType:Healing, filterExpression: \"${\n\t\t\t\t\t\t[samePartyHealingSpells, otherPartyHealingSpells].flat().map(spell => spell.id).map(id => `ability.id = ${id}`).join(' OR ')\n\t\t\t\t\t}\", limit: 10000) { data }\n\n\t\t\t\t\tmanaTideTotem: events(fightIDs: [${urlData.fightID}], dataType:Resources, filterExpression: \"ability.id = 39609\", limit: 100) { data }\n\t\t\t\t}\n\t\t\t}\n\t\t}`;\n\t\tconst reportData = await this.queryWCL(reportDataQuery);\n\n\t\t// Process the report data.\n\t\tconst wclData = reportData.data.reportData.report; // TODO: Typings?\n\t\tconst playerData: wclPlayer[] = wclData.playerDetails.data.entries;\n\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\tconst wclPlayers = playerData.map(wclPlayer => new WCLSimPlayer(wclPlayer, this.simUI, eventID));\n\t\t\tthis.inferRace(eventID, wclData, wclPlayers);\n\t\t\tthis.inferProfessions(eventID, wclData, wclPlayers);\n\t\t\tthis.inferAssignments(eventID, wclData, wclPlayers);\n\t\t\tthis.inferPartyComposition(eventID, wclData, wclPlayers);\n\t\t\tconst numPaladins = wclPlayers.filter(player => player.player.getClass() == Class.ClassPaladin).length;\n\t\t\tconst settings = RaidSimSettings.create({\n\t\t\t\tencounter: this.getEncounterProto(wclData),\n\t\t\t\traid: this.getRaidProto(wclPlayers),\n\t\t\t\tblessings: makeDefaultBlessings(numPaladins),\n\t\t\t});\n\n\t\t\t// Clear the raid out to avoid any taint issues.\n\t\t\tthis.simUI.clearRaid(eventID);\n\t\t\tthis.simUI.fromProto(eventID, settings);\n\t\t});\n\n\t\tthis.close();\n\t}\n\n\tprivate inferRace(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\twclPlayers.forEach(p => p.player.setRace(eventID, Race.RaceUnknown));\n\n\t\t// If defined in log, use that faction. Otherwise default to UI setting.\n\t\tlet faction = (wclData.guild?.faction?.id || this.simUI.raidPicker?.getCurrentFaction() || Faction.Horde) as Faction;\n\n\t\twclData.combatantInfoEvents.data.forEach((combatantInfo: wclCombatantInfoEvent) => {\n\t\t\tcombatantInfo.auras\n\t\t\t\t.filter(aura => aura.ability == 28878)\n\t\t\t\t.forEach(aura => {\n\t\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == aura.source);\n\t\t\t\t\tif (sourcePlayer && sourcePlayer.player.getRace() != Race.RaceDraenei) {\n\t\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} has race ${raceNames[Race.RaceDraenei]} from Heroic Presence aura event`);\n\t\t\t\t\t\tsourcePlayer.player.setRace(eventID, Race.RaceDraenei);\n\t\t\t\t\t\tfaction = Faction.Alliance;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\n\t\tconst castEventsBySpellId = bucket(wclData.reportCastEvents.data as Array<wclCastEvent>, event => String(event.abilityGameID));\n\t\tracialSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclCastEvent> = castEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tif (sourcePlayer) {\n\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} has race ${raceNames[spell.race]} from ${spell.name} event`);\n\t\t\t\t\tsourcePlayer.player.setRace(eventID, spell.race);\n\t\t\t\t\tfaction = raceToFaction[spell.race];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\twclPlayers.forEach(p => {\n\t\t\tif (p.player.getRace() == Race.RaceUnknown) {\n\t\t\t\tp.player.setRace(eventID, p.preset.defaultFactionRaces[faction]);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate inferProfessions(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\tconst castEventsBySpellId = bucket(wclData.reportCastEvents.data as Array<wclCastEvent>, event => String(event.abilityGameID));\n\t\tprofessionSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclCastEvent> = castEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tif (sourcePlayer && !sourcePlayer.inferredProfessions.includes(spell.profession)) {\n\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} has profession ${professionNames[spell.profession]} from ${spell.name} event`);\n\t\t\t\t\tsourcePlayer.inferredProfessions.push(spell.profession);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\twclPlayers.forEach(player => {\n\t\t\tlet professions = distinct(player.inferredProfessions.concat(player.player.getGear().getProfessionRequirements()));\n\t\t\tif (professions.length == 0) {\n\t\t\t\tprofessions = [Profession.Engineering, Profession.Jewelcrafting];\n\t\t\t} else if (professions.length == 1) {\n\t\t\t\tif (professions[0] != Profession.Engineering) {\n\t\t\t\t\tprofessions.push(Profession.Engineering);\n\t\t\t\t} else {\n\t\t\t\t\tprofessions.push(Profession.Jewelcrafting);\n\t\t\t\t}\n\t\t\t}\n\t\t\tplayer.player.setProfessions(eventID, professions);\n\t\t});\n\t}\n\n\tprivate inferAssignments(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\tconst castEventsBySpellId = bucket(wclData.fightCastEvents.data as Array<wclCastEvent>, event => String(event.abilityGameID));\n\t\texternalCDSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclCastEvent> = castEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tconst targetPlayer = wclPlayers.find(player => player.id == event.targetID);\n\t\t\t\tif (sourcePlayer && targetPlayer && sourcePlayer.player.getClass() == spell.class) {\n\t\t\t\t\tconst specOptions = spell.applyFunc(sourcePlayer.player, targetPlayer.toRaidTarget());\n\t\t\t\t\tsourcePlayer.player.setSpecOptions(eventID, specOptions);\n\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} is targeting ${targetPlayer.name} with ${spell.name} from cast event`);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t// Assigns the raidIndex field for all players.\n\tprivate inferPartyComposition(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\tconst setPlayersInParty = (player1: WCLSimPlayer, player2: WCLSimPlayer, reason: string) => {\n\t\t\tif (player1.addPlayerInParty(player2) || player2.addPlayerInParty(player1)) {\n\t\t\t\tconsole.log(`Inferring players ${player1.name} and ${player2.name} in same party from ${reason} event`);\n\t\t\t}\n\t\t};\n\n\t\tconst healEventsBySpellId = bucket(wclData.fightHealEvents.data as Array<wclHealEvent>, event => String(event.abilityGameID));\n\n\t\t// These spells only affect players in the same party as the caster.\n\t\tsamePartyHealingSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclHealEvent> = healEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tconst targetPlayer = wclPlayers.find(player => player.id == event.targetID);\n\t\t\t\tif (sourcePlayer && targetPlayer) {\n\t\t\t\t\tsetPlayersInParty(sourcePlayer, targetPlayer, spell.name);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t// Prayer of Healing is a bit different, we can infer that players who are targeted at the same time are in a group.\n\t\totherPartyHealingSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclHealEvent> = healEventsBySpellId[spell.id] || [];\n\t\t\tconst spellEventsByTimestamp = bucket(spellEvents, event => String(event.timestamp) + String(event.sourceID));\n\t\t\tfor (const [timestamp, eventsAtTime] of Object.entries(spellEventsByTimestamp)) {\n\t\t\t\tconst spellTargets = eventsAtTime.map(event => wclPlayers.find(player => player.id == event.targetID));\n\t\t\t\tfor (let i = 0; i < spellTargets.length; i++) {\n\t\t\t\t\tfor (let j = 0; j < spellTargets.length; j++) {\n\t\t\t\t\t\tif (i != j && spellTargets[i] && spellTargets[j]) {\n\t\t\t\t\t\t\tsetPlayersInParty(spellTargets[i]!, spellTargets[j]!, spell.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\twclData.combatantInfoEvents.data.forEach((combatantInfo: wclCombatantInfoEvent) => {\n\t\t\tconst targetPlayer = wclPlayers.find(player => player.id == combatantInfo.sourceID);\n\t\t\tcombatantInfo.auras\n\t\t\t\t.filter(aura => aura.ability == 28878)\n\t\t\t\t.forEach(aura => {\n\t\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == aura.source);\n\t\t\t\t\tif (sourcePlayer && targetPlayer) {\n\t\t\t\t\t\tsetPlayersInParty(sourcePlayer, targetPlayer, 'Heroic Presence');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\n\t\t// Assign players with same-group inferences.\n\t\tlet inferredPlayers = wclPlayers.filter(player => player.playersInParty.length > 0);\n\t\tlet nextEmptyPartyIdx = 0;\n\t\twhile (inferredPlayers.length > 0) {\n\t\t\t// Find all the players in the same party as the first player.\n\t\t\tlet partyMembers = [inferredPlayers[0]].concat(inferredPlayers[0].playersInParty);\n\t\t\tlet numMembers = 0;\n\t\t\twhile (partyMembers.length != numMembers) {\n\t\t\t\tnumMembers = partyMembers.length;\n\t\t\t\tpartyMembers = distinct(partyMembers.map(member => [member].concat(member.playersInParty)).flat());\n\t\t\t}\n\n\t\t\t// Assign these members to an empty party.\n\t\t\tconst partyIdx = nextEmptyPartyIdx;\n\t\t\tnextEmptyPartyIdx++;\n\t\t\tpartyMembers.forEach((member, i) => {\n\t\t\t\tmember.raidIndex = partyIdx * 5 + i;\n\t\t\t});\n\n\t\t\tinferredPlayers = inferredPlayers.filter(player => !partyMembers.includes(player));\n\t\t}\n\n\t\t// Assign remaining players into open slots.\n\t\tconst allRaidIndexes = [...Array(40).keys()];\n\t\tconst nextFreeIndex = () => allRaidIndexes.find(idx => !wclPlayers.some(p => p.raidIndex == idx)) ?? -1;\n\t\twclPlayers\n\t\t\t.filter(player => player.raidIndex == -1)\n\t\t\t.forEach(player => {\n\t\t\t\tconst nextIdx = nextFreeIndex();\n\t\t\t\tif (nextIdx == -1) {\n\t\t\t\t\tthrow new Error('Invalid next idx');\n\t\t\t\t}\n\t\t\t\tplayer.raidIndex = nextIdx;\n\t\t\t});\n\t}\n\n\tprivate getEncounterProto(wclData: any): EncounterProto {\n\t\tconst fight: { startTime: number, endTime: number, id: number, name: string } = wclData.fights[0];\n\n\t\tconst encounter = EncounterProto.create({\n\t\t\tduration: (fight.endTime - fight.startTime) / 1000,\n\t\t\ttargets: [],\n\t\t});\n\n\t\t// Use the preset encounter if it exists.\n\t\tlet closestEncounterPreset = this.simUI.sim.db.getAllPresetEncounters().find(enc => enc.path.includes(fight.name));\n\t\tif (closestEncounterPreset && closestEncounterPreset.targets.length) {\n\t\t\tclosestEncounterPreset.targets\n\t\t\t\t.map(mob => mob.target as TargetProto)\n\t\t\t\t.filter(target => target !== undefined)\n\t\t\t\t.forEach(target => encounter.targets.push(target));\n\t\t}\n\n\t\t// Build a manual target list if no preset encounter exists.\n\t\tif (encounter.targets.length === 0) {\n\t\t\tencounter.targets.push(Target.defaultProto());\n\t\t}\n\n\t\treturn encounter;\n\t}\n\n\tprivate getRaidProto(wclPlayers: WCLSimPlayer[]): RaidProto {\n\t\tconst raid = RaidProto.create({\n\t\t\tparties: [...new Array(MAX_NUM_PARTIES).keys()].map(p => PartyProto.create({\n\t\t\t\tplayers: [...new Array(5).keys()].map(p => PlayerProto.create()),\n\t\t\t})),\n\t\t});\n\n\t\twclPlayers\n\t\t\t.forEach(player => {\n\t\t\t\tconst positionInParty = player.raidIndex % 5;\n\t\t\t\tconst partyIdx = (player.raidIndex - positionInParty) / 5;\n\t\t\t\tconst playerProto = player.player.toProto();\n\t\t\t\traid.parties[partyIdx].players[positionInParty] = playerProto;\n\n\t\t\t\tif (isTankSpec(playerToSpec(playerProto))) {\n\t\t\t\t\traid.tanks.push(player.toRaidTarget());\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn raid;\n\t}\n}\n\nclass WCLSimPlayer {\n\tpublic readonly data: wclPlayer;\n\tpublic readonly id: number;\n\tpublic readonly name: string;\n\tpublic readonly type: string;\n\tpublic raidIndex: number = -1;\n\n\tprivate readonly simUI: RaidSimUI;\n\tprivate readonly fullType: string;\n\tprivate readonly spec: Spec|null;\n\n\treadonly player: Player<any>;\n\treadonly preset: PresetSpecSettings<any>;\n\n\tinferredProfessions: Array<Profession> = [];\n\n\treadonly playersInParty: Array<WCLSimPlayer> = [];\n\n\tconstructor(data: wclPlayer, simUI: RaidSimUI, eventID: EventID) {\n\t\tthis.simUI = simUI;\n\t\tthis.data = data;\n\n\t\tthis.name = data.name;\n\t\tthis.id = data.id;\n\t\tthis.type = data.type;\n\n\t\tconst wclSpec = data.icon.split('-')[1];\n\t\tthis.fullType = this.type + wclSpec;\n\t\tconsole.log(`WCL spec: ${this.fullType}`);\n\n\t\tconst foundSpec = fullTypeToSpec[this.fullType] ?? null;\n\t\tif (foundSpec == null) {\n\t\t\tthrow new Error('Player type not implemented: ' + this.fullType);\n\t\t}\n\t\tthis.spec = foundSpec;\n\t\tthis.player = new Player(this.spec, simUI.sim);\n\n\t\tthis.preset = WCLSimPlayer.getMatchingPreset(foundSpec, data.talents);\n\t\tif (this.preset === undefined) {\n\t\t\tthrow new Error('Could not find matching preset: ' + JSON.stringify({\n\t\t\t\t'name': this.name,\n\t\t\t\t'type': this.fullType,\n\t\t\t\t'talents': data.talents,\n\t\t\t}).toString());\n\t\t}\n\n\t\t// Apply preset defaults.\n\t\tthis.player.applySharedDefaults(eventID);\n\t\tthis.player.setTalentsString(eventID, this.preset.talents.talentsString);\n\t\tthis.player.setGlyphs(eventID, this.preset.talents.glyphs!);\n\t\tthis.player.setConsumes(eventID, this.preset.consumes);\n\t\tthis.player.setRotation(eventID, this.preset.rotation);\n\t\tthis.player.setSpecOptions(eventID, this.preset.specOptions);\n\t\tthis.player.setProfessions(eventID, [Profession.Engineering, Profession.Jewelcrafting]);\n\n\t\t// Apply settings from report data.\n\t\tthis.player.setName(eventID, data.name);\n\t\tthis.player.setGear(eventID, simUI.sim.db.lookupEquipmentSpec(EquipmentSpec.create({\n\t\t\titems: data.gear.map(gear => ItemSpec.create({\n\t\t\t\tid: gear.id,\n\t\t\t\tenchant: gear.permanentEnchant,\n\t\t\t\tgems: gear.gems ? gear.gems.map(gemInfo => gemInfo.id) : [],\n\t\t\t})),\n\t\t})));\n\t}\n\n\tprivate static getMatchingPreset(spec: Spec, talents: wclTalents[]): PresetSpecSettings<Spec> {\n\t\tconst matchingPresets = playerPresets.filter((preset) => preset.spec == spec);\n\t\tlet presetIdx = 0;\n\n\t\tif (matchingPresets && matchingPresets.length > 1) {\n\t\t\tlet distance = 999;\n\t\t\t// Search talents and find the preset that the players talents most closely match.\n\t\t\tmatchingPresets.forEach((preset, i) => {\n\t\t\t\tconst presetTalents = getTalentTreePoints(preset.talents.talentsString);\n\t\t\t\t// Diff the distance to the preset.\n\t\t\t\tconst newDistance = presetTalents.reduce((acc, v, i) => acc += Math.abs(talents[i]?.guid - presetTalents[i]), 0);\n\n\t\t\t\t// If this is the best distance, assign this preset.\n\t\t\t\tif (newDistance < distance) {\n\t\t\t\t\tpresetIdx = i;\n\t\t\t\t\tdistance = newDistance;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn matchingPresets[presetIdx];\n\t}\n\n\tpublic toRaidTarget(): RaidTarget {\n\t\treturn RaidTarget.create({\n\t\t\ttargetIndex: this.raidIndex,\n\t\t});\n\t}\n\n\tpublic addPlayerInParty(other: WCLSimPlayer): boolean {\n\t\tif (other != this && !this.playersInParty.includes(other)) {\n\t\t\tthis.playersInParty.push(other);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nconst fullTypeToSpec: Record<string, Spec> = {\n\t'DeathKnightBlood': Spec.SpecTankDeathknight,\n\t'DeathKnightLichborne': Spec.SpecTankDeathknight,\n\t'DeathKnightRuneblade': Spec.SpecDeathknight,\n\t'DeathKnightFrost': Spec.SpecDeathknight,\n\t'DeathKnightUnholy': Spec.SpecDeathknight,\n\t'DruidBalance': Spec.SpecBalanceDruid,\n\t'DruidFeral': Spec.SpecFeralDruid,\n\t'DruidWarden': Spec.SpecFeralTankDruid,\n\t'DruidGuardian': Spec.SpecFeralTankDruid,\n\t'DruidRestoration': Spec.SpecRestorationDruid,\n\t'HunterBeastMastery': Spec.SpecHunter,\n\t'HunterSurvival': Spec.SpecHunter,\n\t'HunterMarksmanship': Spec.SpecHunter,\n\t'MageArcane': Spec.SpecMage,\n\t'MageFire': Spec.SpecMage,\n\t'MageFrost': Spec.SpecMage,\n\t'PaladinHoly': Spec.SpecHolyPaladin,\n\t'PaladinJusticar': Spec.SpecProtectionPaladin,\n\t'PaladinProtection': Spec.SpecProtectionPaladin,\n\t'PaladinRetribution': Spec.SpecRetributionPaladin,\n\t'PriestHoly': Spec.SpecHealingPriest,\n\t'PriestDiscipline': Spec.SpecHealingPriest,\n\t'PriestShadow': Spec.SpecShadowPriest,\n\t'PriestSmite': Spec.SpecSmitePriest,\n\t'RogueAssassination': Spec.SpecRogue,\n\t'RogueCombat': Spec.SpecRogue,\n\t'RogueSubtlety': Spec.SpecRogue,\n\t'ShamanElemental': Spec.SpecElementalShaman,\n\t'ShamanEnhancement': Spec.SpecEnhancementShaman,\n\t'ShamanRestoration': Spec.SpecRestorationShaman,\n\t'WarlockDestruction': Spec.SpecWarlock,\n\t'WarlockAffliction': Spec.SpecWarlock,\n\t'WarlockDemonology': Spec.SpecWarlock,\n\t'WarriorArms': Spec.SpecWarrior,\n\t'WarriorFury': Spec.SpecWarrior,\n\t'WarriorChampion': Spec.SpecWarrior,\n\t'WarriorWarrior': Spec.SpecWarrior,\n\t'WarriorGladiator': Spec.SpecWarrior,\n\t'WarriorProtection': Spec.SpecProtectionWarrior,\n};\n\ninterface QuerySpell {\n\tid: number,\n\tname: string,\n}\n\n// Spells which imply a specific Race.\nconst racialSpells: Array<{id: number, name: string, race: Race}> = [\n\t{id: 25046, name: 'Arcane Torrent (Energy)', race: Race.RaceBloodElf},\n\t{id: 28730, name: 'Arcane Torrent (Mana)', race: Race.RaceBloodElf},\n\t{id: 50613, name: 'Arcane Torrent (Runic Power)', race: Race.RaceBloodElf},\n\t{id: 26297, name: 'Berserking', race: Race.RaceTroll},\n\t{id: 20572, name: 'Blood Fury (AP)', race: Race.RaceOrc},\n\t{id: 33697, name: 'Blood Fury (AP+SP)', race: Race.RaceOrc},\n\t{id: 33702, name: 'Blood Fury (SP)', race: Race.RaceOrc},\n\t{id: 20589, name: 'Escape Artist', race: Race.RaceGnome},\n\t{id: 20594, name: 'Stoneform', race: Race.RaceDwarf},\n\t{id: 20549, name: 'War Stomp', race: Race.RaceTauren},\n\t{id: 7744, name: 'Will of the Forsaken', race: Race.RaceUndead},\n\t{id: 59752, name: 'Will to Survive', race: Race.RaceHuman},\n];\n\n// Spells which imply a specific Profession.\nconst professionSpells: Array<{id: number, name: string, profession: Profession}> = [\n\t{id: 55503, name: 'Lifeblood', profession: Profession.Herbalism},\n\t{id: 50305, name: 'Skinning', profession: Profession.Skinning},\n];\n\nconst externalCDSpells: Array<{id: number, name: string, class: Class, applyFunc: (player: Player<any>, raidTarget: RaidTarget) => SpecOptions<any>}> = [\n\t{id: 29166, name: 'Innervate', class: Class.ClassDruid, applyFunc: (player: Player<any>, raidTarget: RaidTarget) => {\n\t\tconst options = player.getSpecOptions() as SpecOptions<DruidSpecs>;\n\t\toptions.innervateTarget = raidTarget;\n\t\treturn options;\n\t}},\n\t{id: 10060, name: 'Power Infusion', class: Class.ClassPriest, applyFunc: (player: Player<any>, raidTarget: RaidTarget) => {\n\t\tconst options = player.getSpecOptions() as SpecOptions<PriestSpecs>;\n\t\toptions.powerInfusionTarget = raidTarget;\n\t\treturn options;\n\t}},\n\t{id: 57933, name: 'Tricks of the Trade', class: Class.ClassRogue, applyFunc: (player: Player<any>, raidTarget: RaidTarget) => {\n\t\tconst options = player.getSpecOptions() as SpecOptions<RogueSpecs>;\n\t\toptions.tricksOfTheTradeTarget = raidTarget;\n\t\treturn options;\n\t}},\n\t{id: 49016, name: 'Unholy Frenzy', class: Class.ClassDeathknight, applyFunc: (player: Player<any>, raidTarget: RaidTarget) => {\n\t\tconst options = player.getSpecOptions() as SpecOptions<DeathknightSpecs>;\n\t\toptions.unholyFrenzyTarget = raidTarget;\n\t\treturn options;\n\t}},\n];\n\n// Healing spells which only affect the caster's party.\nconst samePartyHealingSpells: Array<{id: number, name: string}> = [\n\t{id: 54172, name: 'Divine Storm'},\n\t{id: 52042, name: 'Healing Stream Totem'},\n\t{id: 48076, name: 'Holy Nova'},\n\t{id: 48445, name: 'Tranquility'},\n\t{id: 15290, name: 'Vampiric Embrace'},\n];\n\n// Healing spells which only affect a single party, but not necessarily the caster's party.\nconst otherPartyHealingSpells: Array<{id: number, name: string}> = [\n\t{id: 48072, name: 'Prayer of Healing'},\n];\n\ninterface wclUrlData {\n\treportID: string,\n\tfightID: string,\n}\n\ninterface wclCastEvent {\n\ttype: 'cast',\n\ttimestamp: number;\n\tsourceID: number;\n\ttargetID: number;\n\tabilityGameID: number;\n\tfight: number;\n}\n\ninterface wclHealEvent {\n\ttype: 'heal',\n\ttimestamp: number;\n\tsourceID: number;\n\ttargetID: number;\n\tabilityGameID: number;\n\tfight: number;\n\tamount: number;\n}\n\ninterface wclCombatantInfoEvent {\n\ttype: 'combatantinfo';\n\tsourceID: number;\n\tauras: {\n\t\tsource: number;\n\t\tability: number;\n\t\tname: string;\n\t}[];\n}\n\ninterface wclRateLimitData {\n\tlimitPerHour: number,\n\tpointsSpentThisHour: number,\n\tpointsResetIn: number\n}\n\n// Typed interface for WCL talents\ninterface wclTalents {\n\tname: string;\n\tguid: number;\n\ttype: number;\n\tabilityIcon: string;\n}\n\n// Typed interface for WCL Gems\ninterface wclGems {\n\tid: number;\n\titemLevel: number;\n\ticon: string;\n}\n\n// Typed interface for WCL Gear\ninterface wclGear {\n\tid: number;\n\tslot: number;\n\tquality: number;\n\ticon: string;\n\tname: string;\n\titemLevel: number;\n\tpermanentEnchant: number;\n\tpermanentEnchantName: string;\n\ttemporaryEnchant: number;\n\tgems?: wclGems[];\n}\n\n// Typed interface for WCL Player Data\ninterface wclPlayer {\n\tname: string;\n\tid: number;\n\tguid?: number;\n\ttype: string; // Paladin, Mage, etc.\n\ticon: string; // Paladin-Justicar, Mage-Fire, etc.\n\titemLevel?: number;\n\ttotal?: number;\n\tactiveTime?: number;\n\tactiveTimeReduced?: number;\n\tabilities?: unknown[]; // Don't care about abilities.\n\tdamageAbilities?: unknown[];\n\ttargets?: unknown[];\n\ttalents: wclTalents[];\n\tgear: wclGear[];\n}\n\ninterface wclAura {\n\tname: string;\n\tid: number;\n\tguid: number;\n\ttype: string;\n\ticon: string;\n\ttotalUptime: number;\n\ttotalUses: number;\n\tbands: {\n\t\tstartTime: number,\n\t\tendTime: number,\n\t}[];\n}\n","import { EmbeddedDetailedResults } from \"../core/components/detailed_results.js\";\nimport { LogRunner } from \"../core/components/log_runner.js\";\nimport { addRaidSimAction, RaidSimResultsManager, ReferenceData } from \"../core/components/raid_sim_action.js\";\n\nimport { Player } from \"../core/player.js\";\nimport { Raid as RaidProto } from \"../core/proto/api.js\";\nimport { Class, Encounter as EncounterProto, RaidBuffs, TristateEffect } from \"../core/proto/common.js\";\nimport { Blessings } from \"../core/proto/paladin.js\";\nimport { BlessingsAssignments, RaidSimSettings, SavedEncounter } from \"../core/proto/ui.js\";\nimport { playerToSpec } from \"../core/proto_utils/utils.js\";\nimport { Sim } from \"../core/sim.js\";\nimport { SimUI } from \"../core/sim_ui.js\";\nimport { raidSimStatus } from '../core/launched_sims.js';\nimport { EventID, TypedEvent } from \"../core/typed_event.js\";\n\nimport { RaidTab } from \"./raid_tab.js\";\nimport { SettingsTab } from \"./settings_tab.js\";\n\nimport { BlessingsPicker } from \"./blessings_picker.js\";\nimport { implementedSpecs } from \"./presets.js\";\nimport { RaidPicker } from \"./raid_picker.js\";\n\nimport * as ImportExport from \"./import_export.js\";\n\ndeclare var pako: any;\n\nexport interface RaidSimConfig {\n\tknownIssues?: Array<string>,\n}\n\nconst extraKnownIssues: Array<string> = [\n\t//'We\\'re still missing implementations for many specs. If you\\'d like to help us out, check out our <a href=\"https://github.com/wowsims/wotlk\">Github project</a> or <a href=\"https://discord.gg/jJMPr9JWwx\">join our discord</a>!',\n];\n\nexport class RaidSimUI extends SimUI {\n\tprivate readonly config: RaidSimConfig;\n\tprivate raidSimResultsManager: RaidSimResultsManager | null = null;\n\tpublic raidPicker: RaidPicker | null = null;\n\tpublic blessingsPicker: BlessingsPicker | null = null;\n\n\t// Emits when the raid comp changes. Includes changes to buff bots.\n\treadonly compChangeEmitter = new TypedEvent<void>();\n\treadonly changeEmitter = new TypedEvent<void>();\n\n\treadonly referenceChangeEmitter = new TypedEvent<void>();\n\n\tconstructor(parentElem: HTMLElement, config: RaidSimConfig) {\n\t\tsuper(parentElem, new Sim(), {\n\t\t\tcssClass: 'raid-sim-ui',\n\t\t\tcssScheme: 'raid',\n\t\t\tspec: null,\n\t\t\tlaunchStatus: raidSimStatus,\n\t\t\tknownIssues: (config.knownIssues || []).concat(extraKnownIssues),\n\t\t});\n\n\t\tthis.config = config;\n\n\t\tthis.sim.raid.compChangeEmitter.on(eventID => this.compChangeEmitter.emit(eventID));\n\t\t[\n\t\t\tthis.compChangeEmitter,\n\t\t\tthis.sim.changeEmitter,\n\t\t].forEach(emitter => emitter.on(eventID => this.changeEmitter.emit(eventID)));\n\t\tthis.changeEmitter.on(() => this.recomputeSettingsLayout());\n\n\t\tthis.sim.setModifyRaidProto(raidProto => this.modifyRaidProto(raidProto));\n\t\tthis.sim.waitForInit().then(() => this.loadSettings());\n\n\t\tthis.addSidebarComponents();\n\t\tthis.addTopbarComponents();\n\t\tthis.addRaidTab();\n\t\tthis.addSettingsTab();\n\t\tthis.addDetailedResultsTab();\n\t\tthis.addLogTab();\n\t}\n\n\tprivate loadSettings() {\n\t\tconst initEventID = TypedEvent.nextEventID();\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tlet loadedSettings = false;\n\n\t\t\tconst savedSettings = window.localStorage.getItem(this.getSettingsStorageKey());\n\t\t\tif (savedSettings != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconst settings = RaidSimSettings.fromJsonString(savedSettings);\n\t\t\t\t\tthis.fromProto(initEventID, settings);\n\t\t\t\t\tloadedSettings = true;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn('Failed to parse saved settings: ' + e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!loadedSettings) {\n\t\t\t\tthis.applyDefaults(initEventID);\n\t\t\t}\n\n\t\t\t// This needs to go last so it doesn't re-store things as they are initialized.\n\t\t\tthis.changeEmitter.on(eventID => {\n\t\t\t\tconst jsonStr = RaidSimSettings.toJsonString(this.toProto());\n\t\t\t\twindow.localStorage.setItem(this.getSettingsStorageKey(), jsonStr);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate addSidebarComponents() {\n\t\tthis.raidSimResultsManager = addRaidSimAction(this);\n\t\tthis.raidSimResultsManager.changeEmitter.on(eventID => this.referenceChangeEmitter.emit(eventID));\n\t}\n\n\tprivate addTopbarComponents() {\n\t\tthis.simHeader.addImportLink('JSON', (parent) => new ImportExport.RaidJsonImporter(this.rootElem, this));\n\t\tthis.simHeader.addImportLink('WCL', (parent) => new ImportExport.RaidWCLImporter(this.rootElem, this));\n\n\t\tthis.simHeader.addExportLink('JSON', (parent) => new ImportExport.RaidJsonExporter(this.rootElem, this));\n\t}\n\n\tprivate addRaidTab() {\n\t\tnew RaidTab(this.simTabContentsContainer, this);\n\t}\n\n\tprivate addSettingsTab() {\n\t\tnew SettingsTab(this.simTabContentsContainer, this);\n\t}\n\n\tprivate addDetailedResultsTab() {\n\t\tthis.addTab('Results', 'detailed-results-tab', `\n\t\t\t<div class=\"detailed-results\">\n\t\t\t</div>\n\t\t`);\n\n\t\tconst detailedResults = new EmbeddedDetailedResults(this.rootElem.getElementsByClassName('detailed-results')[0] as HTMLElement, this, this.raidSimResultsManager!);\n\t}\n\n\tprivate addLogTab() {\n\t\tthis.addTab('Log', 'log-tab', `\n\t\t\t<div class=\"log-runner\">\n\t\t\t</div>\n\t\t`);\n\n\t\tconst logRunner = new LogRunner(this.rootElem.getElementsByClassName('log-runner')[0] as HTMLElement, this);\n\t}\n\n\tprivate recomputeSettingsLayout() {\n\t\twindow.dispatchEvent(new Event('resize'));\n\t}\n\n\tprivate modifyRaidProto(raidProto: RaidProto) {\n\t\t// Apply blessings.\n\t\tconst numPaladins = this.getClassCount(Class.ClassPaladin);\n\t\tconst blessingsAssignments = this.blessingsPicker!.getAssignments();\n\t\timplementedSpecs.forEach(spec => {\n\t\t\tconst playerProtos = raidProto.parties\n\t\t\t\t.map(party => party.players.filter(player => player.class != Class.ClassUnknown && playerToSpec(player) == spec))\n\t\t\t\t.flat();\n\n\t\t\tblessingsAssignments.paladins.forEach((paladin, i) => {\n\t\t\t\tif (i >= numPaladins) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (paladin.blessings[spec] == Blessings.BlessingOfKings) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfKings = true);\n\t\t\t\t} else if (paladin.blessings[spec] == Blessings.BlessingOfMight) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfMight = TristateEffect.TristateEffectImproved);\n\t\t\t\t} else if (paladin.blessings[spec] == Blessings.BlessingOfWisdom) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfWisdom = TristateEffect.TristateEffectImproved);\n\t\t\t\t} else if (paladin.blessings[spec] == Blessings.BlessingOfSanctuary) {\n\t\t\t\t\tplayerProtos.forEach(playerProto => playerProto.buffs!.blessingOfSanctuary = true);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tgetCurrentData(): ReferenceData | null {\n\t\tif (this.raidSimResultsManager) {\n\t\t\treturn this.raidSimResultsManager.getCurrentData();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tgetReferenceData(): ReferenceData | null {\n\t\tif (this.raidSimResultsManager) {\n\t\t\treturn this.raidSimResultsManager.getReferenceData();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tgetActivePlayers(): Array<Player<any>> {\n\t\treturn this.sim.raid.getActivePlayers();\n\t}\n\n\tgetClassCount(playerClass: Class): number {\n\t\treturn this.getActivePlayers().filter(player => player.isClass(playerClass)).length;\n\t}\n\n\tapplyDefaults(eventID: EventID) {\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tthis.sim.raid.fromProto(eventID, RaidProto.create({\n\t\t\t\tnumActiveParties: 5,\n\t\t\t}));\n\t\t\tthis.sim.setPhase(eventID, 1);\n\t\t\tthis.sim.encounter.applyDefaults(eventID);\n\t\t\tthis.sim.applyDefaults(eventID, true, true);\n\t\t\tthis.sim.setShowDamageMetrics(eventID, true);\n\t\t});\n\t}\n\n\ttoProto(): RaidSimSettings {\n\t\treturn RaidSimSettings.create({\n\t\t\tsettings: this.sim.toProto(),\n\t\t\traid: this.sim.raid.toProto(true),\n\t\t\tblessings: this.blessingsPicker!.getAssignments(),\n\t\t\tencounter: this.sim.encounter.toProto(),\n\t\t});\n\t}\n\n\ttoLink(): string {\n\t\tconst proto = this.toProto();\n\t\t// When sharing links, people generally don't intend to share settings.\n\t\tproto.settings = undefined;\n\n\t\tconst protoBytes = RaidSimSettings.toBinary(proto);\n\t\tconst deflated = pako.deflate(protoBytes, { to: 'string' });\n\t\tconst encoded = btoa(String.fromCharCode(...deflated));\n\n\t\tconst linkUrl = new URL(window.location.href);\n\t\tlinkUrl.hash = encoded;\n\t\treturn linkUrl.toString();\n\t}\n\n\tfromProto(eventID: EventID, settings: RaidSimSettings) {\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tif (settings.settings) {\n\t\t\t\tthis.sim.fromProto(eventID, settings.settings);\n\t\t\t}\n\t\t\tthis.sim.raid.fromProto(eventID, settings.raid || RaidProto.create());\n\t\t\tthis.sim.encounter.fromProto(eventID, settings.encounter || EncounterProto.create());\n\t\t\tthis.blessingsPicker!.setAssignments(eventID, settings.blessings || BlessingsAssignments.create());\n\t\t});\n\t}\n\n\tclearRaid(eventID: EventID) {\n\t\tthis.sim.raid.clear(eventID);\n\t}\n\n\t// Returns the actual key to use for local storage, based on the given key part and the site context.\n\tgetStorageKey(keyPart: string): string {\n\t\treturn '__wotlk_raid__' + keyPart;\n\t}\n\n\tgetSavedRaidStorageKey(): string {\n\t\treturn this.getStorageKey('__savedRaid__');\n\t}\n}\n","import { RaidSimUI } from './raid_sim_ui.js';\n\nconst ui = new RaidSimUI(document.body, {});\n"],"names":["specSimFactories","Spec","SpecTankDeathknight","parentElem","player","TankDeathknightSimUI","SpecDeathknight","DeathknightSimUI","SpecBalanceDruid","BalanceDruidSimUI","SpecFeralDruid","FeralDruidSimUI","SpecFeralTankDruid","FeralTankDruidSimUI","SpecRestorationDruid","RestorationDruidSimUI","SpecElementalShaman","ElementalShamanSimUI","SpecEnhancementShaman","EnhancementShamanSimUI","SpecRestorationShaman","RestorationShamanSimUI","SpecHunter","HunterSimUI","SpecMage","MageSimUI","SpecRogue","RogueSimUI","SpecHolyPaladin","HolyPaladinSimUI","SpecProtectionPaladin","ProtectionPaladinSimUI","SpecRetributionPaladin","RetributionPaladinSimUI","SpecHealingPriest","HealingPriestSimUI","SpecShadowPriest","ShadowPriestSimUI","SpecSmitePriest","SmitePriestSimUI","SpecWarrior","WarriorSimUI","SpecProtectionWarrior","ProtectionWarriorSimUI","SpecWarlock","WarlockSimUI","playerPresets","spec","rotation","TankDeathknightPresets.DefaultRotation","talents","TankDeathknightPresets.BloodTalents","data","specOptions","TankDeathknightPresets.DefaultOptions","consumes","TankDeathknightPresets.DefaultConsumes","defaultName","defaultFactionRaces","Faction","Unknown","Race","RaceUnknown","Alliance","RaceHuman","Horde","RaceTroll","defaultGear","TankDeathknightPresets.P1_BLOOD_PRESET","gear","TankDeathknightPresets.P2_BLOOD_PRESET","tooltip","iconUrl","getSpecIcon","Class","ClassDeathknight","DeathknightPresets.DefaultBloodRotation","DeathknightPresets.BloodTalents","DeathknightPresets.DefaultBloodOptions","DeathknightPresets.DefaultConsumes","RaceOrc","DeathknightPresets.P1_BLOOD_BIS_PRESET","DeathknightPresets.P2_BLOOD_BIS_PRESET","DeathknightPresets.DefaultFrostRotation","DeathknightPresets.FrostTalents","DeathknightPresets.DefaultFrostOptions","DeathknightPresets.P1_FROST_BIS_PRESET","DeathknightPresets.P2_FROST_BIS_PRESET","otherDefaults","DeathknightPresets.OtherDefaults","DeathknightPresets.DefaultUnholyRotation","DeathknightPresets.UnholyDualWieldTalents","DeathknightPresets.DefaultUnholyOptions","DeathknightPresets.P1_UNHOLY_DW_BIS_PRESET","DeathknightPresets.P2_UNHOLY_DW_BIS_PRESET","BalanceDruidPresets.DefaultRotation","BalanceDruidPresets.StandardTalents","BalanceDruidPresets.DefaultOptions","BalanceDruidPresets.DefaultConsumes","BalanceDruidPresets.OtherDefaults","RaceNightElf","RaceTauren","BalanceDruidPresets.P1_PRESET","BalanceDruidPresets.P2_PRESET","specNames","ClassDruid","FeralDruidPresets.DefaultRotation","FeralDruidPresets.StandardTalents","FeralDruidPresets.DefaultOptions","FeralDruidPresets.DefaultConsumes","FeralDruidPresets.P1_PRESET","FeralDruidPresets.P2_PRESET","FeralTankDruidPresets.DefaultRotation","FeralTankDruidPresets.StandardTalents","FeralTankDruidPresets.DefaultOptions","FeralTankDruidPresets.DefaultConsumes","FeralTankDruidPresets.P1_PRESET","FeralTankDruidPresets.P2_PRESET","RestorationDruidPresets.DefaultRotation","RestorationDruidPresets.CelestialFocusTalents","RestorationDruidPresets.DefaultOptions","RestorationDruidPresets.DefaultConsumes","RestorationDruidPresets.P1_PRESET","RestorationDruidPresets.P2_PRESET","HunterPresets.DefaultRotation","HunterPresets.BeastMasteryTalents","HunterPresets.BMDefaultOptions","HunterPresets.DefaultConsumes","HunterPresets.MM_P1_PRESET","HunterPresets.MM_P2_PRESET","ClassHunter","HunterPresets.MarksmanTalents","HunterPresets.DefaultOptions","HunterPresets.SurvivalTalents","HunterPresets.SV_P1_PRESET","HunterPresets.SV_P2_PRESET","MagePresets.DefaultArcaneRotation","MagePresets.ArcaneTalents","MagePresets.DefaultArcaneOptions","MagePresets.DefaultArcaneConsumes","MagePresets.OtherDefaults","RaceGnome","MagePresets.ARCANE_P1_PRESET","MagePresets.ARCANE_P2_PRESET","ClassMage","MagePresets.DefaultFireRotation","MagePresets.FireTalents","MagePresets.DefaultFireOptions","MagePresets.DefaultFireConsumes","MagePresets.FIRE_P1_PRESET","MagePresets.FIRE_P2_PRESET","MagePresets.DefaultFrostRotation","MagePresets.FrostTalents","MagePresets.DefaultFrostOptions","MagePresets.DefaultFrostConsumes","MagePresets.FROST_P1_PRESET","MagePresets.FROST_P2_PRESET","RoguePresets.DefaultRotation","RoguePresets.AssassinationTalents","RoguePresets.DefaultOptions","RoguePresets.DefaultConsumes","RoguePresets.P1_PRESET_ASSASSINATION","RoguePresets.P2_PRESET_ASSASSINATION","ClassRogue","RoguePresets.CombatTalents","RoguePresets.P1_PRESET_COMBAT","RoguePresets.P2_PRESET_COMBAT","ElementalShamanPresets.DefaultRotation","ElementalShamanPresets.StandardTalents","ElementalShamanPresets.DefaultOptions","ElementalShamanPresets.DefaultConsumes","RaceDraenei","ElementalShamanPresets.P1_PRESET","ElementalShamanPresets.P2_PRESET","ClassShaman","EnhancementShamanPresets.DefaultRotation","EnhancementShamanPresets.StandardTalents","EnhancementShamanPresets.DefaultOptions","EnhancementShamanPresets.DefaultConsumes","EnhancementShamanPresets.P1_PRESET","EnhancementShamanPresets.P2_PRESET_FT","RestorationShamanPresets.DefaultRotation","RestorationShamanPresets.RaidHealingTalents","RestorationShamanPresets.DefaultOptions","RestorationShamanPresets.DefaultConsumes","RestorationShamanPresets.P1_PRESET","RestorationShamanPresets.P2_PRESET","HealingPriestPresets.DiscDefaultRotation","HealingPriestPresets.DiscTalents","HealingPriestPresets.DefaultOptions","HealingPriestPresets.DefaultConsumes","RaceDwarf","RaceUndead","HealingPriestPresets.DISC_P1_PRESET","HealingPriestPresets.DISC_P2_PRESET","ClassPriest","HealingPriestPresets.HolyDefaultRotation","HealingPriestPresets.HolyTalents","HealingPriestPresets.HOLY_P1_PRESET","HealingPriestPresets.HOLY_P2_PRESET","ShadowPriestPresets.DefaultRotation","ShadowPriestPresets.StandardTalents","ShadowPriestPresets.DefaultOptions","ShadowPriestPresets.DefaultConsumes","ShadowPriestPresets.P1_PRESET","ShadowPriestPresets.P2_PRESET","SmitePriestPresets.DefaultRotation","SmitePriestPresets.StandardTalents","SmitePriestPresets.DefaultOptions","SmitePriestPresets.DefaultConsumes","SmitePriestPresets.P1_PRESET","WarriorPresets.ArmsRotation","WarriorPresets.ArmsTalents","WarriorPresets.DefaultOptions","WarriorPresets.DefaultConsumes","WarriorPresets.P1_ARMS_PRESET","WarriorPresets.P2_ARMS_PRESET","ClassWarrior","WarriorPresets.DefaultRotation","WarriorPresets.FuryTalents","WarriorPresets.P1_FURY_PRESET","WarriorPresets.P2_FURY_PRESET","ProtectionWarriorPresets.DefaultRotation","ProtectionWarriorPresets.StandardTalents","ProtectionWarriorPresets.DefaultOptions","ProtectionWarriorPresets.DefaultConsumes","ProtectionWarriorPresets.P1_BALANCED_PRESET","ProtectionWarriorPresets.P2_SURVIVAL_PRESET","HolyPaladinPresets.DefaultRotation","HolyPaladinPresets.StandardTalents","HolyPaladinPresets.DefaultOptions","HolyPaladinPresets.DefaultConsumes","RaceBloodElf","HolyPaladinPresets.P1_PRESET","HolyPaladinPresets.P2_PRESET","ClassPaladin","ProtectionPaladinPresets.DefaultRotation","ProtectionPaladinPresets.GenericAoeTalents","ProtectionPaladinPresets.DefaultOptions","ProtectionPaladinPresets.DefaultConsumes","ProtectionPaladinPresets.P1_PRESET","ProtectionPaladinPresets.P2_PRESET","RetributionPaladinPresets.DefaultRotation","RetributionPaladinPresets.AuraMasteryTalents","RetributionPaladinPresets.DefaultOptions","RetributionPaladinPresets.DefaultConsumes","RetributionPaladinPresets.P1_PRESET","RetributionPaladinPresets.P2_PRESET","RetributionPaladinPresets.P3_PRESET","RetributionPaladinPresets.P4_PRESET","RetributionPaladinPresets.P5_PRESET","WarlockPresets.AfflictionRotation","WarlockPresets.AfflictionTalents","WarlockPresets.AfflictionOptions","WarlockPresets.DefaultConsumes","WarlockPresets.P1_Preset_Affliction","WarlockPresets.P2_Preset_Affliction","WarlockPresets.OtherDefaults","ClassWarlock","WarlockPresets.DemonologyRotation","WarlockPresets.DemonologyTalents","WarlockPresets.DemonologyOptions","WarlockPresets.P1_Preset_Demo_Destro","WarlockPresets.P2_Preset_Demo_Destro","WarlockPresets.DestructionRotation","WarlockPresets.DestructionTalents","WarlockPresets.DestructionOptions","implementedSpecs","Set","map","preset","RaidPicker","Component","constructor","parent","raidSimUI","super","this","currentDragPlayer","currentDragPlayerFromIndex","currentDragType","currentDragParty","raid","sim","raidControls","document","createElement","classList","add","rootElem","appendChild","newPlayerPicker","NewPlayerPicker","EnumPicker","label","labelTooltip","values","name","value","changedEvent","numActivePartiesChangeEmitter","getValue","getNumActiveParties","setValue","eventID","newValue","setNumActiveParties","picker","factionChangeEmitter","getFaction","setFaction","latestPhaseWithAllPresets","Math","min","max","Object","keys","k","parseInt","Array","val","phase","phaseChangeEmitter","getPhase","setPhase","partiesContainer","partyPickers","getParties","party","i","PartyPicker","updateActiveParties","forEach","partyPicker","index","remove","on","ondragend","event","clearDragPlayer","clearDragParty","getCurrentFaction","getCurrentPhase","getPlayerPicker","raidIndex","floor","MAX_PARTY_SIZE","playerPickers","getPlayerPickers","setDragPlayer","fromIndex","type","setDragParty","raidPicker","setAttribute","innerHTML","playersContainer","getElementsByClassName","PlayerPicker","dpsResultElem","referenceDeltaElem","referenceChangeEmitter","currentData","getCurrentData","referenceData","getReferenceData","partyDps","simResult","raidMetrics","parties","dps","avg","referenceDps","textContent","toFixed","formatDeltaTextElem","ondragstart","target","dataTransfer","dropEffect","effectAllowed","dragEnterCounter","ondragenter","preventDefault","ondragleave","ondragover","ondrop","TypedEvent","nextEventID","freezeAllAndDo","srcPartyPicker","srcPlayerPicker","dstPlayerPicker","srcPlayer","dstPlayer","setPlayer","labelElem","iconElem","nameElem","resultsElem","compChangeEmitter","newPlayer","getPlayer","playerDps","getPlayerWithRaidIndex","dropData","getData","length","dragType","fromPlayerPicker","binary","atob","bytes","Uint8Array","charCodeAt","playerProto","PlayerProto","fromBinary","localPlayer","Player","playerToSpec","fromProto","clone","update","isTankSpec","tanks","getTanks","emptyIdx","findIndex","tank","getPlayerFromRaidTarget","setTanks","concat","makeRaidTarget","newOptions","getSpecOptions","innervateTarget","newRaidTarget","getRaidIndex","setSpecOptions","powerInfusionTarget","focusMagicTarget","applyNewPlayerAssignments","emit","className","classCssClass","cssClassForClass","getClass","getName","querySelector","bindPlayerEvents","addEventListener","setName","emptyName","dragStart","playerDataProto","toProto","setData","btoa","String","fromCharCode","toBinary","editElem","copyElem","deleteElem","Tooltip","getOrCreateInstance","deleteTooltip","onclick","PlayerEditorModal","setDragImage","hide","BaseModal","body","closeButton","fixed","header","id","insertAdjacentHTML","editorRoot","getEnumValues","wowClass","ClassUnknown","matchingPresets","filter","specToClass","classPresetsContainer","matchingPreset","presetElemFragment","presetElem","children","dragImage","Image","src","applySharedDefaults","setRace","setRotation","setTalentsString","talentsString","setGlyphs","glyphs","Glyphs","create","setConsumes","setProfession1","profession1","Profession","Engineering","setProfession2","profession2","Jewelcrafting","setDistanceFromTarget","distanceFromTarget","waitForInit","then","setGear","db","lookupEquipmentSpec","RaidStats","categories","RAID_STATS_OPTIONS","sections","section","sectionElem","contentElem","categoryOptions","push","RaidStatsCategory","changeEmitter","c","options","counterElem","tooltipElem","effects","opt","RaidStatsEffect","playerData","class","statsLink","customClass","title","effect","total","sum","count","curPlayers","playerCssClass","textCssClassForClass","actionId","fill","getActivePlayers","p","condition","raidData","negateIf","cond","playerClass","clazz","extraCondition","isClass","playerClassAndTalentInternal","talentName","negateTalent","Boolean","getTalents","playerClassAndTalent","playerClassAndMissingTalent","playerSpecAndTalentInternal","isSpec","playerSpecAndTalent","raidBuff","buffName","getBuffs","isHealingSpec","isMeleeDpsSpec","isRangedDpsSpec","ActionId","fromSpellId","bloodlust","fromItemId","aura","PaladinAura","DevotionAura","getRotation","totems","earth","EarthTotem","StoneskinTotem","StrengthOfEarthTotem","summon","WarlockSummon","Felhunter","shout","WarriorShout","WarriorShoutBattle","water","WaterTotem","ManaSpringTotem","air","AirTotem","WindfuryTotem","fire","FireTotem","TotemOfWrath","FlametongueTotem","WrathOfAirTotem","WarriorShoutCommanding","Imp","sunderArmor","SunderArmor","SunderArmorMaintain","exposeArmorFrequency","ExposeFrequency","Maintain","petType","HunterPetType","Worm","maintainFaerieFire","curse","WarlockCurse","Weakness","Wasp","Bat","includes","Rhino","MageRotationType","Fire","maintainImprovedScorch","Frost","Elements","maintainDemoShout","demoShoutChoice","maintainDemoralizingRoar","CarrionBird","maintainThunderClap","thunderClapChoice","sting","HunterStingType","ScorpidSting","RaidTab","SimTab","simUI","identifier","leftPanel","rightPanel","contentContainer","buildTabContent","savedRaidManager","SavedDataManager","storageKey","getSavedRaidStorageKey","SavedRaid","blessings","blessingsPicker","getAssignments","faction","newRaid","RaidProto","setAssignments","BlessingsAssignments","changeEmitters","equals","a","b","toJson","fromJson","obj","loadUserData","RaidTargetPicker","Input","modObj","config","curPlayer","curRaidTarget","getInputValue","buttonElem","dropdownElem","currentOptions","updateOptions","init","makeTargetOptions","isDropdown","getPlayers","option","makeOption","prevRaidTarget","RaidTarget","setInputValue","inputChanged","makeOptionElem","getInputElem","emptyRaidTarget","optionData","find","outerHTML","static","playerFragment","AssignmentsPicker","innervatesPicker","InnervatesPicker","powerInfusionsPicker","PowerInfusionsPicker","tricksOfTheTradesPicker","TricksOfTheTradesPicker","unholyFrenzyPicker","UnholyFrenzyPicker","focusMagicsPicker","FocusMagicsPicker","AssignedBuffPicker","targetPickers","getTitle","sourcePlayers","getSourcePlayers","sourcePlayer","sourcePlayerIndex","row","sourceElem","arrow","raidTargetPicker","extraCssClasses","noTargetLabel","specOptionsChangeEmitter","getPlayerValue","setPlayerValue","targetPickerData","targetPicker","targetPlayer","powerInfusion","tricksOfTheTradeTarget","hysteria","unholyFrenzyTarget","BlessingsPicker","pickers","assignments","makeDefaultBlessings","specs","naturalSpecOrder","memeSpecs","paladinIndexes","append","buildSpecIcon","container","paladinIdx","blessingPicker","IconEnumPicker","numColumns","color","classColors","Blessings","BlessingUnknown","BlessingOfKings","BlessingOfMight","BlessingOfWisdom","BlessingOfSanctuary","zeroValue","enableWhen","_picker","numPaladins","getClassCount","paladins","updatePickers","_eventID","fragment","titleIcons","icon","newAssignments","TanksPicker","tanksChangeEmitter","j","raid2","SettingsTab","column1","buildColumn","column2","column3","buildEncounterSettings","buildConsumesSettings","buildOtherSettings","buildTankSettings","buildAssignmentSettings","buildBlessingsPicker","buildSavedDataPickers","contentBlock","ContentBlock","EncounterPicker","bodyElement","encounter","showExecuteProportion","makeBooleanRaidIconBuffInput","Tooltips.BLESSINGS_SECTION","savedEncounterManager","getSavedEncounterStorageKey","SavedEncounter","newEncounter","field","IconPicker","states","buffsChangeEmitter","newBuffs","setBuffs","RaidJsonImporter","Importer","descriptionElem","onImport","settings","RaidSimSettings","fromJsonString","ignoreUnknownFields","close","RaidJsonExporter","Exporter","JSON","stringify","RaidWCLImporter","queryCounter","token","textElem","async","response","fetch","method","headers","Authorization","URLSearchParams","grant_type","json","access_token","query","getWCLBearerToken","Accept","queryURL","res","encodeURI","result","errors","errorStr","e","message","join","Error","console","debug","url","match","urlData","reportID","fightID","fightDataQuery","fights","queryWCL","reportData","report","importLink","importButton","disabled","style","cursor","doImport","error","alert","removeProperty","parseURL","getRateLimit","reportDataQuery","racialSpells","professionSpells","flat","spell","externalCDSpells","samePartyHealingSpells","otherPartyHealingSpells","wclData","playerDetails","entries","wclPlayers","wclPlayer","WCLSimPlayer","inferRace","inferProfessions","inferAssignments","inferPartyComposition","getEncounterProto","getRaidProto","clearRaid","guild","combatantInfoEvents","combatantInfo","auras","ability","source","getRace","log","raceNames","castEventsBySpellId","bucket","reportCastEvents","abilityGameID","sourceID","race","raceToFaction","inferredProfessions","profession","professionNames","professions","distinct","getGear","getProfessionRequirements","setProfessions","fightCastEvents","targetID","applyFunc","toRaidTarget","setPlayersInParty","player1","player2","reason","addPlayerInParty","healEventsBySpellId","fightHealEvents","spellEvents","spellEventsByTimestamp","timestamp","eventsAtTime","spellTargets","inferredPlayers","playersInParty","nextEmptyPartyIdx","partyMembers","numMembers","member","partyIdx","allRaidIndexes","nextIdx","idx","some","fight","EncounterProto","duration","endTime","startTime","targets","closestEncounterPreset","getAllPresetEncounters","enc","path","mob","Target","defaultProto","MAX_NUM_PARTIES","PartyProto","players","positionInParty","wclSpec","split","fullType","foundSpec","fullTypeToSpec","getMatchingPreset","toString","EquipmentSpec","items","ItemSpec","enchant","permanentEnchant","gems","gemInfo","presetIdx","distance","presetTalents","getTalentTreePoints","newDistance","reduce","acc","v","abs","guid","targetIndex","other","DeathKnightBlood","DeathKnightLichborne","DeathKnightRuneblade","DeathKnightFrost","DeathKnightUnholy","DruidBalance","DruidFeral","DruidWarden","DruidGuardian","DruidRestoration","HunterBeastMastery","HunterSurvival","HunterMarksmanship","MageArcane","MageFire","MageFrost","PaladinHoly","PaladinJusticar","PaladinProtection","PaladinRetribution","PriestHoly","PriestDiscipline","PriestShadow","PriestSmite","RogueAssassination","RogueCombat","RogueSubtlety","ShamanElemental","ShamanEnhancement","ShamanRestoration","WarlockDestruction","WarlockAffliction","WarlockDemonology","WarriorArms","WarriorFury","WarriorChampion","WarriorWarrior","WarriorGladiator","WarriorProtection","Herbalism","Skinning","raidTarget","extraKnownIssues","SimUI","Sim","cssClass","cssScheme","launchStatus","raidSimStatus","knownIssues","raidSimResultsManager","emitter","recomputeSettingsLayout","setModifyRaidProto","raidProto","modifyRaidProto","loadSettings","addSidebarComponents","addTopbarComponents","addRaidTab","addSettingsTab","addDetailedResultsTab","addLogTab","initEventID","loadedSettings","savedSettings","window","localStorage","getItem","getSettingsStorageKey","warn","applyDefaults","jsonStr","toJsonString","setItem","addRaidSimAction","simHeader","addImportLink","ImportExport.RaidJsonImporter","ImportExport.RaidWCLImporter","addExportLink","ImportExport.RaidJsonExporter","simTabContentsContainer","addTab","EmbeddedDetailedResults","LogRunner","dispatchEvent","Event","blessingsAssignments","playerProtos","paladin","buffs","blessingOfKings","blessingOfMight","TristateEffect","TristateEffectImproved","blessingOfWisdom","blessingOfSanctuary","numActiveParties","setShowDamageMetrics","toLink","proto","protoBytes","deflated","pako","deflate","to","encoded","linkUrl","URL","location","href","hash","clear","getStorageKey","keyPart"],"mappings":"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"}