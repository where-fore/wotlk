{"version":3,"file":"sim-1638b5ea.chunk.js","sources":["../../../ui/deathknight/inputs.ts","../../../ui/deathknight/presets.ts","../../../ui/deathknight/sim.ts"],"sourcesContent":["import { ItemSlot, RaidTarget, Spec } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\n\nimport {\n\tDeathknightTalents as DeathKnightTalents,\n\tDeathknight_Rotation_ArmyOfTheDead as ArmyOfTheDead,\n\tDeathknight_Rotation_DrwDiseases as DrwDiseases,\n\tDeathknight_Rotation_BloodOpener as BloodOpener,\n\tDeathknight_Rotation_BloodSpell as BloodSpell,\n\tDeathknight_Rotation_FirstDisease as FirstDisease,\n\tDeathknight_Rotation_DeathAndDecayPrio as DeathAndDecayPrio,\n\tDeathknight_Rotation_Presence as StartingPresence,\n\tDeathknight_Rotation_BloodRuneFiller as BloodRuneFiller,\n\tDeathknight_Rotation_BloodTap as BloodTap,\n\tDeathknight_Rotation_FrostRotationType as FrostRotationType,\n\tDeathknight_Rotation_CustomSpellOption as CustomSpellOption,\n\tDeathknight_Rotation as DeathKnightRotation,\n\tDeathknight_Options as DeathKnightOptions,\n\tDeathknightMajorGlyph,\n} from '../core/proto/deathknight.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\nimport { Player } from '../core/player';\nimport { EventID, TypedEvent } from '../core/typed_event';\nimport { NO_TARGET } from '../core/proto_utils/utils.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const SelfUnholyFrenzy = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'unholyFrenzyTarget',\n\tlabel: 'Self Unholy Frenzy',\n\tlabelTooltip: 'Cast Unholy Frenzy on yourself.',\n\textraCssClasses: [\n\t\t'within-raid-sim-hide',\n\t],\n\tgetValue: (player: Player<Spec.SpecDeathknight>) => player.getSpecOptions().unholyFrenzyTarget?.targetIndex != NO_TARGET,\n\tsetValue: (eventID: EventID, player: Player<Spec.SpecDeathknight>, newValue: boolean) => {\n\t\tconst newOptions = player.getSpecOptions();\n\t\tnewOptions.unholyFrenzyTarget = RaidTarget.create({\n\t\t\ttargetIndex: newValue ? 0 : NO_TARGET,\n\t\t});\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t},\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().hysteria,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const StartingRunicPower = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'startingRunicPower',\n\tlabel: 'Starting Runic Power',\n\tlabelTooltip: 'Initial RP at the start of each iteration.',\n});\n\nexport const PetUptime = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'petUptime',\n\tlabel: 'Ghoul Uptime (%)',\n\tlabelTooltip: 'Percent of the fight duration for which your ghoul will be on target.',\n\tpercent: true,\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().masterOfGhouls,\n});\n\nexport const PrecastGhoulFrenzy = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'precastGhoulFrenzy',\n\tlabel: 'Pre-Cast Ghoul Frenzy',\n\tlabelTooltip: 'Cast Ghoul Frenzy 10 seconds before combat starts.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && player.getTalents().ghoulFrenzy,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.specOptionsChangeEmitter, player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const PrecastHornOfWinter = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'precastHornOfWinter',\n\tlabel: 'Pre-Cast Horn of Winter',\n\tlabelTooltip: 'Precast Horn of Winter for 10 extra runic power before fight.',\n});\n\nexport const DrwPestiApply = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'drwPestiApply',\n\tlabel: 'DRW Pestilence Add',\n\tlabelTooltip: 'There is currently an interaction with DRW and pestilence where you can use pestilence to force DRW to apply diseases if they are already applied by the DK. It only works with Glyph of Disease and if there is an off target. This toggle forces the sim to assume there is an off target.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => !player.getRotation().autoRotation && player.getTalentTree() == 0 && (player.getGlyphs().major1 == DeathknightMajorGlyph.GlyphOfDisease || player.getGlyphs().major2 == DeathknightMajorGlyph.GlyphOfDisease|| player.getGlyphs().major3 == DeathknightMajorGlyph.GlyphOfDisease),\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.specOptionsChangeEmitter, player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const DiseaseRefreshDuration = InputHelpers.makeRotationNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'diseaseRefreshDuration',\n\tlabel: 'Disease Refresh Duration',\n\tlabelTooltip: 'Minimum duration for refreshing a disease.',\n});\n\nexport const UseDeathAndDecay = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'useDeathAndDecay',\n\tlabel: 'Death and Decay',\n\tlabelTooltip: 'Use Death and Decay based rotation.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && player.getTalents().scourgeStrike && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const SetDeathAndDecayPrio = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, DeathAndDecayPrio>({\n\tfieldName: 'deathAndDecayPrio',\n\tlabel: 'Death and Decay Prio',\n\tlabelTooltip: '<p>Chose how to prioritize death and decay usage:</p>\\\n\t\t<p><b>Max Rune Downtime</b>: Prioritizes spending runes over holding them for death and decay</p>\\\n\t\t<p><b>Max Dnd Uptime</b>: Prioritizes dnd uptime and can hold runes for longer then rune grace</p>',\n\tvalues: [\n\t\t{ name: 'Max Rune Downtime', value: DeathAndDecayPrio.MaxRuneDowntime },\n\t\t{ name: 'Max Dnd Uptime', value: DeathAndDecayPrio.MaxDndUptime },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && (player.getRotation().useDeathAndDecay || !player.getTalents().scourgeStrike) && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const UseEmpowerRuneWeapon = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'useEmpowerRuneWeapon',\n\tlabel: 'Empower Rune Weapon',\n\tlabelTooltip: 'Use Empower Rune Weapon in rotation.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => !player.getRotation().autoRotation && player.getTalentTree() != 0 && player.getRotation().frostRotationType != FrostRotationType.Custom,\n});\n\nexport const UseGargoyle = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'useGargoyle',\n\tlabel: 'Summon Gargoyle',\n\tlabelTooltip: 'Use Summon Gargoyle in rotation.',\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && !player.getRotation().autoRotation,\n});\n\nexport const HoldErwArmy = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'holdErwArmy',\n\tlabel: 'Hold ERW for AotD',\n\tlabelTooltip: 'Hold Empower Rune Weapon for after Summon Gargoyle to guarantee maximized snapshot for Army of the Dead.',\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => !player.getRotation().autoRotation && player.getRotation().useEmpowerRuneWeapon && player.getRotation().armyOfTheDead == ArmyOfTheDead.AsMajorCd && player.getTalentTree() != 0,\n});\n\nexport const BloodlustPresence = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, StartingPresence>({\n\tfieldName: 'blPresence',\n\tlabel: 'Bloodlust Presence',\n\tlabelTooltip: 'Presence during bloodlust.',\n\tvalues: [\n\t\t{ name: 'Blood', value: StartingPresence.Blood },\n\t\t{ name: 'Unholy', value: StartingPresence.Unholy },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const GargoylePresence = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, StartingPresence>({\n\tfieldName: 'gargoylePresence',\n\tlabel: 'Gargoyle Presence',\n\tlabelTooltip: 'Presence during Gargoyle.',\n\tvalues: [\n\t\t{ name: 'Blood', value: StartingPresence.Blood },\n\t\t{ name: 'Unholy', value: StartingPresence.Unholy },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && !player.getRotation().autoRotation && !player.getRotation().preNerfedGargoyle,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const BloodTapGhoulFrenzy = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'btGhoulFrenzy',\n\tlabel: 'BT Ghoul Frenzy',\n\tlabelTooltip: 'Use Ghoul Frenzy only with Blood Tap.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().ghoulFrenzy && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const FirstDiseaseInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, FirstDisease>({\n\tfieldName: 'firstDisease',\n\tlabel: 'First Disease',\n\tlabelTooltip: 'Chose which disease to apply first.',\n\tvalues: [\n\t\t{ name: 'Frost Fever', value: FirstDisease.FrostFever },\n\t\t{ name: 'Blood Plague', value: FirstDisease.BloodPlague },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const ArmyOfTheDeadInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, ArmyOfTheDead>({\n\tfieldName: 'armyOfTheDead',\n\tlabel: 'Army of the Dead',\n\tlabelTooltip: 'Chose how to use Army of the Dead.',\n\tvalues: [\n\t\t{ name: 'Do not use', value: ArmyOfTheDead.DoNotUse },\n\t\t{ name: 'Pre pull', value: ArmyOfTheDead.PreCast },\n\t\t{ name: 'As Major CD', value: ArmyOfTheDead.AsMajorCd },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const StartingPresenceInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, StartingPresence>({\n\tfieldName: 'startingPresence',\n\tlabel: 'Starting Presence',\n\tlabelTooltip: 'Chose the presence you start combat in.',\n\tvalues: [\n\t\t{ name: 'Blood', value: StartingPresence.Blood },\n\t\t{ name: 'Unholy', value: StartingPresence.Unholy },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const FightPresence = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, StartingPresence>({\n\tfieldName: 'presence',\n\tlabel: 'Fight Presence',\n\tlabelTooltip: 'Presence to be in during the encounter.',\n\tvalues: [\n\t\t{ name: 'Blood', value: StartingPresence.Blood },\n\t\t{ name: 'Unholy', value: StartingPresence.Unholy },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const BloodRuneFillerInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, BloodRuneFiller>({\n\tfieldName: 'bloodRuneFiller',\n\tlabel: 'Blood Rune Filler',\n\tlabelTooltip: 'Chose what to spend your free blood runes on.',\n\tvalues: [\n\t\t{ name: 'Blood Strike', value: BloodRuneFiller.BloodStrike },\n\t\t{ name: 'Blood Boil', value: BloodRuneFiller.BloodBoil },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const PreNerfedGargoyleInput = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'preNerfedGargoyle',\n\tlabel: 'Pre-Nerfed Gargoyle (haste snapshot)',\n\tlabelTooltip: \"Use old Gargoyle that snapshots haste\",\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && !player.getRotation().autoRotation && player.sim.getShowExperimental(),\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const BloodTapInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, BloodTap>({\n\tfieldName: 'bloodTap',\n\tlabel: 'Blood Tap',\n\tlabelTooltip: 'Chose what to spend your Blood Tap on.',\n\tvalues: [\n\t\t{ name: 'Ghoul Frenzy', value: BloodTap.GhoulFrenzy },\n\t\t{ name: 'Icy Touch', value: BloodTap.IcyTouch },\n\t\t{ name: 'Blood Strike', value: BloodTap.BloodStrikeBT },\n\t\t{ name: 'Blood Boil', value: BloodTap.BloodBoilBT },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const UseAMSInput = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'useAms',\n\tlabel: 'Use AMS',\n\tlabelTooltip: 'Use AMS around predicted damage for a RP gain.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().howlingBlast && !player.getRotation().autoRotation && player.getRotation().frostRotationType != FrostRotationType.Custom,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const AvgAMSSuccessRateInput = InputHelpers.makeRotationNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'avgAmsSuccessRate',\n\tlabel: 'Avg AMS Success %',\n\tlabelTooltip: 'Chance for damage to be taken during the 5 second window of AMS.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getRotation().useAms == true && !player.getRotation().autoRotation && player.getTalents().howlingBlast && player.getRotation().frostRotationType != FrostRotationType.Custom,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const AvgAMSHitInput = InputHelpers.makeRotationNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'avgAmsHit',\n\tlabel: 'Avg AMS Hit',\n\tlabelTooltip: 'How much on average (+-10%) the character is hit for when AMS is successful.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getRotation().useAms == true && !player.getRotation().autoRotation && player.getTalents().howlingBlast && player.getRotation().frostRotationType != FrostRotationType.Custom,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const UseAutoRotation = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'autoRotation',\n\tlabel: 'Automatic Rotation',\n\tlabelTooltip: 'Have sim automatically adjust rotation based on the scenario. This is still in development and currently only works for Unholy.',\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => !player.getTalents().howlingBlast,\n});\n\nexport const DesyncRotation = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'desyncRotation',\n\tlabel: 'Use Desync Rotation',\n\tlabelTooltip: 'Use the Desync Rotation.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().howlingBlast && !player.getTalents().epidemic && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const Presence = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, StartingPresence>({\n\tfieldName: 'presence',\n\tlabel: 'Presence',\n\tlabelTooltip: 'Presence to be in during the encounter.',\n\tvalues: [\n\t\t{ name: 'Blood', value: StartingPresence.Blood },\n\t\t{ name: 'Frost', value: StartingPresence.Frost },\n\t\t{ name: 'Unholy', value: StartingPresence.Unholy },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().howlingBlast && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const BloodSpenderInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, BloodSpell>({\n\tfieldName: 'bloodSpender',\n\tlabel: 'Blood Spender',\n\tlabelTooltip: 'Chose how to use Blood Runes.',\n\tvalues: [\n\t\t{ name: 'Heart Strike', value: BloodSpell.HS },\n\t\t{ name: 'Blood Boil', value: BloodSpell.BB },\n\t\t{ name: 'Blood Strike', value: BloodSpell.BS },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => !player.getRotation().autoRotation && player.getTalentTree() == 0,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const UseDancingRuneWeapon = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'useDancingRuneWeapon',\n\tlabel: 'Dancing Rune Weapon',\n\tlabelTooltip: 'Use Dancing Rune Weapon.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().dancingRuneWeapon && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const DrwDiseasesInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, DrwDiseases>({\n\tfieldName: 'drwDiseases',\n\tlabel: 'DRW Disease',\n\tlabelTooltip: 'Chose how to apply diseases for Dancing Rune Weapon.',\n\tvalues: [\n\t\t{ name: 'Do not apply', value: DrwDiseases.DoNotApply },\n\t\t{ name: 'IT + PS', value: DrwDiseases.Normal },\n\t\t{ name: 'Pestilence', value: DrwDiseases.Pestilence },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getRotation().useDancingRuneWeapon && !player.getRotation().autoRotation && player.getTalents().dancingRuneWeapon && player.getRotation().bloodOpener == BloodOpener.Standard,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const BloodOpenerInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, BloodOpener>({\n\tfieldName: 'bloodOpener',\n\tlabel: 'Opener',\n\tlabelTooltip: 'Chose which opener to use.',\n\tvalues: [\n\t\t{ name: 'Standard', value: BloodOpener.Standard },\n\t\t{ name: 'Incan', value: BloodOpener.Experimental_1 },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => !player.getRotation().autoRotation && player.getTalentTree() == 0,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const FrostCustomRotation = InputHelpers.makeCustomRotationInput<Spec.SpecDeathknight, CustomSpellOption>({\n\tfieldName: 'frostCustomRotation',\n\tnumColumns: 4,\n\tvalues: [\n\t\t{ actionId: ActionId.fromSpellId(49909), value: CustomSpellOption.CustomIcyTouch },\n\t\t{ actionId: ActionId.fromSpellId(49921), value: CustomSpellOption.CustomPlagueStrike },\n\t\t{ actionId: ActionId.fromSpellId(50842), value: CustomSpellOption.CustomPestilence },\n\t\t{ actionId: ActionId.fromSpellId(51425), value: CustomSpellOption.CustomObliterate },\n\t\t{ actionId: ActionId.fromSpellId(51411), value: CustomSpellOption.CustomHowlingBlast },\n\t\t{ actionId: ActionId.fromSpellId(59057), value: CustomSpellOption.CustomHowlingBlastRime },\n\t\t{ actionId: ActionId.fromSpellId(49941), value: CustomSpellOption.CustomBloodBoil },\n\t\t{ actionId: ActionId.fromSpellId(49930), value: CustomSpellOption.CustomBloodStrike },\n\t\t{ actionId: ActionId.fromSpellId(49938), value: CustomSpellOption.CustomDeathAndDecay },\n\t\t{ actionId: ActionId.fromSpellId(57623), value: CustomSpellOption.CustomHornOfWinter },\n\t\t{ actionId: ActionId.fromSpellId(51271), value: CustomSpellOption.CustomUnbreakableArmor },\n\t\t{ actionId: ActionId.fromSpellId(45529), value: CustomSpellOption.CustomBloodTap },\n\t\t{ actionId: ActionId.fromSpellId(47568), value: CustomSpellOption.CustomEmpoweredRuneWeapon },\n\t\t{ actionId: ActionId.fromSpellId(55268), value: CustomSpellOption.CustomFrostStrike },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getRotation().frostRotationType == FrostRotationType.Custom,\n});\n\nexport const EnableWeaponSwap = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'enableWeaponSwap',\n\tlabel: 'Enable Weapon Swapping',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && player.getRotation().useGargoyle,\n})\n\nexport const WeaponSwapInputs = InputHelpers.MakeItemSwapInput<Spec.SpecDeathknight>({\n\tfieldName: 'weaponSwap',\n\tvalues: [\n\t\tItemSlot.ItemSlotMainHand,\n\t\tItemSlot.ItemSlotOffHand,\n\t\t//ItemSlot.ItemSlotRanged, Not support yet\n\t],\n\tlabelTooltip: '<b>Berserking</b> will be equipped when FC has procced and Berserking is not active.<br><br><b>Black Magic</b> will be prioed to swap during gargoyle or if gargoyle will be on CD for full BM Icd.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && player.getRotation().useGargoyle && player.getRotation().enableWeaponSwap,\n})\n\nexport const DeathKnightRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, FrostRotationType>({\n\t\t\tfieldName: 'frostRotationType',\n\t\t\tlabel: 'Rotation Type',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Single Target', value: FrostRotationType.SingleTarget },\n\t\t\t\t{ name: 'Custom', value: FrostRotationType.Custom },\n\t\t\t],\n\t\t\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().howlingBlast && !player.getRotation().autoRotation,\n\t\t}),\n\t\tPresence,\n\t\tUseAutoRotation,\n\t\tBloodTapGhoulFrenzy,\n\t\tUseGargoyle,\n\t\tEnableWeaponSwap,\n\t\tWeaponSwapInputs,\n\t\tUseEmpowerRuneWeapon,\n\t\tUseDancingRuneWeapon,\n\t\tHoldErwArmy,\n\t\tBloodTapInput,\n\t\tBloodSpenderInput,\n\t\tArmyOfTheDeadInput,\n\t\t//BloodOpenerInput,\n\t\tDrwDiseasesInput,\n\t\tFirstDiseaseInput,\n\t\tStartingPresenceInput,\n\t\tGargoylePresence,\n\t\tBloodlustPresence,\n\t\tFightPresence,\n\t\tBloodRuneFillerInput,\n\t\tUseDeathAndDecay,\n\t\tUseAMSInput,\n\t\tAvgAMSSuccessRateInput,\n\t\tAvgAMSHitInput,\n\t\tDesyncRotation,\n\t\tFrostCustomRotation,\n\t\tPreNerfedGargoyleInput,\n\t],\n};\n","import {\n\tConsumes,\n\tCustomRotation,\n\tCustomSpell,\n\tEquipmentSpec,\n\tExplosive,\n\tFlask,\n\tFood,\n\tGlyphs,\n\tPetFood,\n\tPotions,\n\tRaidTarget,\n\tSpec\n} from '../core/proto/common.js';\nimport {SavedTalents} from '../core/proto/ui.js';\nimport {Player} from '../core/player.js';\nimport {NO_TARGET} from '../core/proto_utils/utils.js';\n\nimport {\n\tDeathknight_Options as DeathKnightOptions,\n\tDeathknight_Rotation as DeathKnightRotation,\n\tDeathknight_Rotation_ArmyOfTheDead,\n\tDeathknight_Rotation_BloodRuneFiller,\n\tDeathknight_Rotation_CustomSpellOption as CustomSpellOption,\n\tDeathknight_Rotation_FrostRotationType,\n\tDeathknight_Rotation_Presence,\n\tDeathknightMajorGlyph,\n\tDeathknightMinorGlyph,\n\tDeathknight_Rotation_DrwDiseases,\n\tDeathknight_Rotation_BloodSpell,\n} from '../core/proto/deathknight.js';\n\nimport * as Tooltips from '../core/constants/tooltips.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wotlk.wowhead.com/talent-calc and copy the numbers in the url.\nexport const FrostTalents = {\n\tname: 'Frost BL',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '23050005-32005350352203012300033101351',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DeathknightMajorGlyph.GlyphOfObliterate,\n\t\t\tmajor2: DeathknightMajorGlyph.GlyphOfFrostStrike,\n\t\t\tmajor3: DeathknightMajorGlyph.GlyphOfDisease,\n\t\t\tminor1: DeathknightMinorGlyph.GlyphOfHornOfWinter,\n\t\t\tminor2: DeathknightMinorGlyph.GlyphOfPestilence,\n\t\t\tminor3: DeathknightMinorGlyph.GlyphOfRaiseDead,\n\t\t}),\n\t}),\n};\n\nexport const FrostUnholyTalents = {\n\tname: 'Frost UH',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '01-32002350342203012300033101351-230200305003',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DeathknightMajorGlyph.GlyphOfObliterate,\n\t\t\tmajor2: DeathknightMajorGlyph.GlyphOfFrostStrike,\n\t\t\tmajor3: DeathknightMajorGlyph.GlyphOfDisease,\n\t\t\tminor1: DeathknightMinorGlyph.GlyphOfHornOfWinter,\n\t\t\tminor2: DeathknightMinorGlyph.GlyphOfPestilence,\n\t\t\tminor3: DeathknightMinorGlyph.GlyphOfRaiseDead,\n\t\t}),\n\t}),\n};\n\nexport const UnholyDualWieldTalents = {\n\tname: 'Unholy DW',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-320043500002-2300303050032152000150013133051',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DeathknightMajorGlyph.GlyphOfTheGhoul,\n\t\t\tmajor2: DeathknightMajorGlyph.GlyphOfDarkDeath,\n\t\t\tmajor3: DeathknightMajorGlyph.GlyphOfDeathAndDecay,\n\t\t\tminor1: DeathknightMinorGlyph.GlyphOfHornOfWinter,\n\t\t\tminor2: DeathknightMinorGlyph.GlyphOfPestilence,\n\t\t\tminor3: DeathknightMinorGlyph.GlyphOfRaiseDead,\n\t\t}),\n\t}),\n};\n\nexport const Unholy2HTalents = {\n\tname: 'Unholy 2H',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-320050500002-2300303150032152000150013133151',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DeathknightMajorGlyph.GlyphOfTheGhoul,\n\t\t\tmajor2: DeathknightMajorGlyph.GlyphOfDarkDeath,\n\t\t\tmajor3: DeathknightMajorGlyph.GlyphOfIcyTouch,\n\t\t\tminor1: DeathknightMinorGlyph.GlyphOfHornOfWinter,\n\t\t\tminor2: DeathknightMinorGlyph.GlyphOfPestilence,\n\t\t\tminor3: DeathknightMinorGlyph.GlyphOfRaiseDead,\n\t\t}),\n\t}),\n};\n\nexport const BloodTalents = {\n\tname: 'Blood DPS',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '2305120530003303231023001351--230220305003',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DeathknightMajorGlyph.GlyphOfDancingRuneWeapon,\n\t\t\tmajor2: DeathknightMajorGlyph.GlyphOfDeathStrike,\n\t\t\tmajor3: DeathknightMajorGlyph.GlyphOfDisease,\n\t\t\tminor1: DeathknightMinorGlyph.GlyphOfHornOfWinter,\n\t\t\tminor2: DeathknightMinorGlyph.GlyphOfPestilence,\n\t\t\tminor3: DeathknightMinorGlyph.GlyphOfRaiseDead,\n\t\t}),\n\t}),\n};\n\nexport const DefaultUnholyRotation = DeathKnightRotation.create({\n\tuseDeathAndDecay: true,\n\tbtGhoulFrenzy: false,\n\trefreshHornOfWinter: false,\n\tuseGargoyle: true,\n\tuseEmpowerRuneWeapon: true,\n\tholdErwArmy: false,\n\tpreNerfedGargoyle: false,\n\tarmyOfTheDead: Deathknight_Rotation_ArmyOfTheDead.AsMajorCd,\n\tstartingPresence: Deathknight_Rotation_Presence.Unholy,\n\tblPresence: Deathknight_Rotation_Presence.Blood,\n\tpresence: Deathknight_Rotation_Presence.Blood,\n\tgargoylePresence: Deathknight_Rotation_Presence.Unholy,\n\tbloodRuneFiller: Deathknight_Rotation_BloodRuneFiller.BloodBoil,\n\tuseAms: false,\n\tdrwDiseases: Deathknight_Rotation_DrwDiseases.Pestilence,\n\tbloodSpender: Deathknight_Rotation_BloodSpell.HS,\n\tuseDancingRuneWeapon: true\n});\n\nexport const DefaultUnholyOptions = DeathKnightOptions.create({\n\tdrwPestiApply: true,\n\tstartingRunicPower: 0,\n\tpetUptime: 1,\n\tprecastGhoulFrenzy: false,\n\tprecastHornOfWinter: true,\n\tunholyFrenzyTarget: RaidTarget.create({\n\t\ttargetIndex: NO_TARGET, // In an individual sim the 0-indexed player is ourself.\n\t}),\n});\n\nexport const DefaultFrostRotation = DeathKnightRotation.create({\n\tuseDeathAndDecay: false,\n\tbtGhoulFrenzy: false,\n\trefreshHornOfWinter: false,\n\tuseEmpowerRuneWeapon: true,\n\tpreNerfedGargoyle: false,\n\tstartingPresence: Deathknight_Rotation_Presence.Blood,\n\tpresence: Deathknight_Rotation_Presence.Blood,\n\tbloodRuneFiller: Deathknight_Rotation_BloodRuneFiller.BloodBoil,\n\tuseAms: false,\n\tavgAmsSuccessRate: 1.0,\n\tavgAmsHit: 10000.0,\n\tdrwDiseases: Deathknight_Rotation_DrwDiseases.Pestilence,\n  \tfrostRotationType: Deathknight_Rotation_FrostRotationType.SingleTarget,\n  \tfrostCustomRotation: CustomRotation.create({\n\t\tspells: [\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomDeathAndDecay }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomIcyTouch }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomPlagueStrike }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomPestilence }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomHowlingBlastRime }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomHowlingBlast }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomBloodBoil }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomObliterate }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomFrostStrike }),\n\t\t],\n\t}),\n});\n\nexport const DefaultFrostOptions = DeathKnightOptions.create({\n\tdrwPestiApply: true,\n\tstartingRunicPower: 0,\n\tpetUptime: 1,\n\tprecastHornOfWinter: true,\n\tunholyFrenzyTarget: RaidTarget.create({\n\t\ttargetIndex: NO_TARGET, // In an individual sim the 0-indexed player is ourself.\n\t}),\n});\n\nexport const DefaultBloodRotation = DeathKnightRotation.create({\n\trefreshHornOfWinter: false,\n\tuseEmpowerRuneWeapon: true,\n\tpreNerfedGargoyle: false,\n\tstartingPresence: Deathknight_Rotation_Presence.Blood,\n\tbloodRuneFiller: Deathknight_Rotation_BloodRuneFiller.BloodStrike,\n\tarmyOfTheDead: Deathknight_Rotation_ArmyOfTheDead.PreCast,\n\tholdErwArmy: false,\n\tuseAms: false,\n\tdrwDiseases: Deathknight_Rotation_DrwDiseases.Pestilence,\n\tbloodSpender: Deathknight_Rotation_BloodSpell.HS,\n\tuseDancingRuneWeapon: true\n});\n\nexport const DefaultBloodOptions = DeathKnightOptions.create({\n\tdrwPestiApply: true,\n\tstartingRunicPower: 0,\n\tpetUptime: 1,\n\tprecastHornOfWinter: true,\n\tunholyFrenzyTarget: RaidTarget.create({\n\t\ttargetIndex: NO_TARGET, // In an individual sim the 0-indexed player is ourself.\n\t}),\n});\n\nexport const OtherDefaults = {\n};\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskOfEndlessRage,\n\tfood: Food.FoodDragonfinFilet,\n\tdefaultPotion: Potions.PotionOfSpeed,\n\tpetFood: PetFood.PetFoodSpicedMammothTreats,\n\tprepopPotion: Potions.PotionOfSpeed,\n\tthermalSapper: true,\n\tfillerExplosive: Explosive.ExplosiveSaroniteBomb,\n});\n\nexport const P1_BLOOD_BIS_PRESET = {\n\tname: 'P1 Blood',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalentTree() == 0,\n\tgear: EquipmentSpec.fromJsonString(`{   \"items\": [\n\t\t{\n\t\t\t\"id\": 44006,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t  41398,\n\t\t\t  42702\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 44664,\n\t\t\t\"gems\": [\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 40557,\n\t\t\t\"enchant\": 3808,\n\t\t\t\"gems\": [\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 40403,\n\t\t\t\"enchant\": 3831\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 40550,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t  42142,\n\t\t\t  42142\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 40330,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t  42142,\n\t\t\t  0\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 40552,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t  39996,\n\t\t\t  0\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 40278,\n\t\t\t\"gems\": [\n\t\t\t  39996,\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 40556,\n\t\t\t\"enchant\": 3823,\n\t\t\t\"gems\": [\n\t\t\t  39996,\n\t\t\t  40037\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 40591,\n\t\t\t\"enchant\": 3606\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 40075\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 39401\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 40256\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 42987\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 40384,\n\t\t\t\"enchant\": 3368\n\t\t  },\n\t\t  {},\n\t\t  {\n\t\t\t\"id\": 40207\n\t\t  }\n  ]}`),\n};\n\nexport const P2_BLOOD_BIS_PRESET = {\n\tname: 'P2 Blood',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalentTree() == 0,\n\tgear: EquipmentSpec.fromJsonString(`{   \"items\": [\n\t\t{\n\t\t\t\"id\": 46115,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t  41398,\n\t\t\t  42702\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45459,\n\t\t\t\"gems\": [\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46117,\n\t\t\t\"enchant\": 3808,\n\t\t\t\"gems\": [\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46032,\n\t\t\t\"enchant\": 3831,\n\t\t\t\"gems\": [\n\t\t\t  39996,\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46111,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t  42142,\n\t\t\t  42142\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45663,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t  42142,\n\t\t\t  0\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46113,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t  39996,\n\t\t\t  0\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45241,\n\t\t\t\"gems\": [\n\t\t\t  39996,\n\t\t\t  45862,\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45134,\n\t\t\t\"enchant\": 3823,\n\t\t\t\"gems\": [\n\t\t\t  39996,\n\t\t\t  39996,\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45599,\n\t\t\t\"enchant\": 3606,\n\t\t\t\"gems\": [\n\t\t\t  39996,\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45534,\n\t\t\t\"gems\": [\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46048,\n\t\t\t\"gems\": [\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 42987\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45931\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45516,\n\t\t\t\"enchant\": 3368,\n\t\t\t\"gems\": [\n\t\t\t  39996,\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {},\n\t\t  {\n\t\t\t\"id\": 45254\n\t\t  }\n  ]}`),\n};\n\nexport const P1_UNHOLY_2H_PRERAID_PRESET = {\n\tname: 'Pre-Raid 2H Unholy',\n\ttoolbar: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalentTree() == 2 && player.getTalents().nervesOfColdSteel == 0,\n\tgear: EquipmentSpec.fromJsonString(`{ \"items\": [\n\t\t{\n\t\t\t\"id\": 41386,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t\t41400,\n\t\t\t\t49110\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 37397\n\t\t},\n\t\t{\n\t\t\t\"id\": 37627,\n\t\t\t\"enchant\": 3808,\n\t\t\t\"gems\": [\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 37647,\n\t\t\t\"enchant\": 3831\n\t\t},\n\t\t{\n\t\t\t\"id\": 39617,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t\t42142,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 41355,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 39618,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40688,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t42142\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 37193,\n\t\t\t\"enchant\": 3823,\n\t\t\t\"gems\": [\n\t\t\t\t42142,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44306,\n\t\t\t\"enchant\": 3606,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 37642\n\t\t},\n\t\t{\n\t\t\t\"id\": 44935\n\t\t},\n\t\t{\n\t\t\t\"id\": 40684\n\t\t},\n\t\t{\n\t\t\t\"id\": 42987\n\t\t},\n\t\t{\n\t\t\t\"id\": 41257,\n\t\t\t\"enchant\": 3368\n\t\t},\n\t\t{},\n\t\t{\n\t\t\t\"id\": 40867\n\t\t}\n  ]}`),\n};\n\nexport const P1_UNHOLY_2H_BIS_PRESET = {\n\tname: 'P1 2H Unholy',\n\ttoolbar: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalentTree() == 2 && player.getTalents().nervesOfColdSteel == 0,\n\tgear: EquipmentSpec.fromJsonString(`{ \"items\": [\n\t\t{\n\t\t\t\"id\": 44006,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t\t41400,\n\t\t\t\t49110\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44664,\n\t\t\t\"gems\": [\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40557,\n\t\t\t\"enchant\": 3808,\n\t\t\t\"gems\": [\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40403,\n\t\t\t\"enchant\": 3831\n\t\t},\n\t\t{\n\t\t\t\"id\": 40550,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t\t42142,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40330,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40552,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t40038,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40278,\n\t\t\t\"gems\": [\n\t\t\t\t42142,\n\t\t\t\t42142\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40556,\n\t\t\t\"enchant\": 3823,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40591,\n\t\t\t\"enchant\": 3606\n\t\t},\n\t\t{\n\t\t\t\"id\": 39401\n\t\t},\n\t\t{\n\t\t\t\"id\": 40075\n\t\t},\n\t\t{\n\t\t\t\"id\": 40256\n\t\t},\n\t\t{\n\t\t\t\"id\": 42987\n\t\t},\n\t\t{\n\t\t\t\"id\": 40384,\n\t\t\t\"enchant\": 3368\n\t\t},\n\t\t{},\n\t\t{\n\t\t\t\"id\": 40207\n\t\t}\n  ]}`),\n};\n\nexport const P1_UNHOLY_DW_PRERAID_PRESET = {\n\tname: 'Pre-Raid DW Unholy',\n\ttoolbar: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalentTree() == 2 && player.getTalents().nervesOfColdSteel > 0,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n\t\t{\n\t\t\t\"id\": 41386,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t\t41400,\n\t\t\t\t49110\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 37397\n\t\t},\n\t\t{\n\t\t\t\"id\": 37627,\n\t\t\t\"enchant\": 3808,\n\t\t\t\"gems\": [\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 37647,\n\t\t\t\"enchant\": 3831\n\t\t},\n\t\t{\n\t\t\t\"id\": 39617,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t\t42142,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 41355,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 39618,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40688,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t42142\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 37193,\n\t\t\t\"enchant\": 3823,\n\t\t\t\"gems\": [\n\t\t\t\t42142,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44306,\n\t\t\t\"enchant\": 3606,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 37642\n\t\t},\n\t\t{\n\t\t\t\"id\": 44935\n\t\t},\n\t\t{\n\t\t\t\"id\": 40684\n\t\t},\n\t\t{\n\t\t\t\"id\": 42987\n\t\t},\n\t\t{\n\t\t\t\"id\": 41383,\n\t\t\t\"enchant\": 3368\n\t\t},\n\t\t{\n\t\t\t\"id\": 40703,\n\t\t\t\"enchant\": 3368\n\t\t},\n\t\t{\n\t\t\t\"id\": 40867\n\t\t}\n  ]}`),\n};\n\nexport const P1_UNHOLY_DW_BIS_PRESET = {\n\tname: 'P1 DW Unholy',\n\ttoolbar: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalentTree() == 2 && player.getTalents().nervesOfColdSteel > 0,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n\t\t{\n\t\t\t\"id\": 44006,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t\t41398,\n\t\t\t\t42702\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 39421\n\t\t},\n\t\t{\n\t\t\t\"id\": 40557,\n\t\t\t\"enchant\": 3808,\n\t\t\t\"gems\": [\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40403,\n\t\t\t\"enchant\": 3831\n\t\t},\n\t\t{\n\t\t\t\"id\": 40550,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t\t42142,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40330,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40347,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40278,\n\t\t\t\"gems\": [\n\t\t\t\t42142,\n\t\t\t\t42142\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40294,\n\t\t\t\"enchant\": 3823\n\t\t},\n\t\t{\n\t\t\t\"id\": 39706,\n\t\t\t\"enchant\": 3606,\n\t\t\t\"gems\": [\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 39401\n\t\t},\n\t\t{\n\t\t\t\"id\": 40075\n\t\t},\n\t\t{\n\t\t\t\"id\": 37390\n\t\t},\n\t\t{\n\t\t\t\"id\": 42987\n\t\t},\n\t\t{\n\t\t\t\"id\": 40402,\n\t\t\t\"enchant\": 3368\n\t\t},\n\t\t{\n\t\t\t\"id\": 40491,\n\t\t\t\"enchant\": 3368\n\t\t},\n\t\t{\n\t\t\t\"id\": 42620\n\t\t}\n  ]}`),\n};\n\nexport const P2_UNHOLY_DW_BIS_PRESET = {\n\tname: 'P2 DW Unholy',\n\ttoolbar: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalentTree() == 2 && player.getTalents().nervesOfColdSteel > 0,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n\t\t{\n\t\t\t\"id\": 45472,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t  41398,\n\t\t\t  40041\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46040,\n\t\t\t\"gems\": [\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46117,\n\t\t\t\"enchant\": 3808,\n\t\t\t\"gems\": [\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45588,\n\t\t\t\"enchant\": 3831,\n\t\t\t\"gems\": [\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46111,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t  42142,\n\t\t\t  42142\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45663,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t  39996,\n\t\t\t  0\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45481,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t  0\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45241,\n\t\t\t\"gems\": [\n\t\t\t  42142,\n\t\t\t  45862,\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45134,\n\t\t\t\"enchant\": 3823,\n\t\t\t\"gems\": [\n\t\t\t  40041,\n\t\t\t  39996,\n\t\t\t  40022\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45599,\n\t\t\t\"enchant\": 3606,\n\t\t\t\"gems\": [\n\t\t\t  39996,\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45534,\n\t\t\t\"gems\": [\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45250\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45609\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 42987\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46097,\n\t\t\t\"enchant\": 3368,\n\t\t\t\"gems\": [\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46036,\n\t\t\t\"enchant\": 3368,\n\t\t\t\"gems\": [\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45254\n\t\t  }\n  ]}`),\n};\n\nexport const P1_FROST_PRE_BIS_PRESET = {\n\tname: 'Pre-Raid Frost',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalentTree() == 1,\n\tgear: EquipmentSpec.fromJsonString(`{   \"items\": [\n\t\t{\n\t\t\t\"id\": 41386,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t\t41398,\n\t\t\t\t49110\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 42645,\n\t\t\t\"gems\": [\n\t\t\t\t42142\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 34388,\n\t\t\t\"enchant\": 3808,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 37647,\n\t\t\t\"enchant\": 3831\n\t\t},\n\t\t{\n\t\t\t\"id\": 39617,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t\t42142,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 41355,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 39618,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 37171,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 37193,\n\t\t\t\"enchant\": 3823,\n\t\t\t\"gems\": [\n\t\t\t\t42142,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44306,\n\t\t\t\"enchant\": 3606,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 42642,\n\t\t\t\"gems\": [\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44935\n\t\t},\n\t\t{\n\t\t\t\"id\": 40684\n\t\t},\n\t\t{\n\t\t\t\"id\": 42987\n\t\t},\n\t\t{\n\t\t\t\"id\": 41383,\n\t\t\t\"enchant\": 3370\n\t\t},\n\t\t{\n\t\t\t\"id\": 43611,\n\t\t\t\"enchant\": 3368\n\t\t},\n\t\t{\n\t\t\t\"id\": 40715\n\t\t}\n  ]}`),\n};\n\nexport const P1_FROST_BIS_PRESET = {\n\tname: 'P1 Frost',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalentTree() == 1,\n\tgear: EquipmentSpec.fromJsonString(`{   \"items\": [\n\t\t{\n\t\t\t\"id\": 44006,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t\t41398,\n\t\t\t\t42702\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44664,\n\t\t\t\"gems\": [\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40557,\n\t\t\t\"enchant\": 3808,\n\t\t\t\"gems\": [\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40403,\n\t\t\t\"enchant\": 3831\n\t\t},\n\t\t{\n\t\t\t\"id\": 40550,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t\t42142,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40330,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40552,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40278,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t42142\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40556,\n\t\t\t\"enchant\": 3823,\n\t\t\t\"gems\": [\n\t\t\t\t42142,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40591,\n\t\t\t\"enchant\": 3606\n\t\t},\n\t\t{\n\t\t\t\"id\": 39401\n\t\t},\n\t\t{\n\t\t\t\"id\": 40075\n\t\t},\n\t\t{\n\t\t\t\"id\": 40256\n\t\t},\n\t\t{\n\t\t\t\"id\": 42987\n\t\t},\n\t\t{\n\t\t\t\"id\": 40189,\n\t\t\t\"enchant\": 3370\n\t\t},\n\t\t{\n\t\t\t\"id\": 40189,\n\t\t\t\"enchant\": 3368\n\t\t},\n\t\t{\n\t\t\t\"id\": 40207\n\t\t}\n  ]}`),\n};\n\nexport const P2_FROST_BIS_PRESET = {\n\tname: 'P2 Frost',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalentTree() == 1,\n\tgear: EquipmentSpec.fromJsonString(`{   \"items\": [\n\t\t{\n\t\t\t\"id\": 46115,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t  41398,\n\t\t\t  42702\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45459,\n\t\t\t\"gems\": [\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46117,\n\t\t\t\"enchant\": 3808,\n\t\t\t\"gems\": [\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46032,\n\t\t\t\"enchant\": 3831,\n\t\t\t\"gems\": [\n\t\t\t  39996,\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46111,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t  42142,\n\t\t\t  42142\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45663,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t  39996,\n\t\t\t  0\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46113,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t  39996,\n\t\t\t  0\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45241,\n\t\t\t\"gems\": [\n\t\t\t  42142,\n\t\t\t  45862,\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45134,\n\t\t\t\"enchant\": 3823,\n\t\t\t\"gems\": [\n\t\t\t  39996,\n\t\t\t  39996,\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45599,\n\t\t\t\"enchant\": 3606,\n\t\t\t\"gems\": [\n\t\t\t  39996,\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45608,\n\t\t\t\"gems\": [\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45534,\n\t\t\t\"gems\": [\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45931\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 42987\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46097,\n\t\t\t\"enchant\": 3370,\n\t\t\t\"gems\": [\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46097,\n\t\t\t\"enchant\": 3368,\n\t\t\t\"gems\": [\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 40207\n\t\t  }\n  ]}`),\n};\n\nexport const P1_FROSTSUBUNH_BIS_PRESET = {\n\tname: 'P1 Frost Sub Unh',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalentTree() == 1,\n\tgear: EquipmentSpec.fromJsonString(`{   \"items\": [\n\t\t{\n\t\t\t\"id\": 44006,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t\t41398,\n\t\t\t\t42702\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44664,\n\t\t\t\"gems\": [\n\t\t\t\t40003\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40557,\n\t\t\t\"enchant\": 3808,\n\t\t\t\"gems\": [\n\t\t\t\t40003\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40403,\n\t\t\t\"enchant\": 3831\n\t\t},\n\t\t{\n\t\t\t\"id\": 40550,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t\t42142,\n\t\t\t\t40003\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40330,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40552,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t40058,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40278,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t42142\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40556,\n\t\t\t\"enchant\": 3823,\n\t\t\t\"gems\": [\n\t\t\t\t42142,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40591,\n\t\t\t\"enchant\": 3606\n\t\t},\n\t\t{\n\t\t\t\"id\": 39401\n\t\t},\n\t\t{\n\t\t\t\"id\": 40075\n\t\t},\n\t\t{\n\t\t\t\"id\": 40256\n\t\t},\n\t\t{\n\t\t\t\"id\": 42987\n\t\t},\n\t\t{\n\t\t\t\"id\": 40189,\n\t\t\t\"enchant\": 3370\n\t\t},\n\t\t{\n\t\t\t\"id\": 40189,\n\t\t\t\"enchant\": 3368\n\t\t},\n\t\t{\n\t\t\t\"id\": 40207\n\t\t}\n  ]}`),\n};\n","import { RaidBuffs } from '../core/proto/common.js';\nimport { PartyBuffs } from '../core/proto/common.js';\nimport { IndividualBuffs } from '../core/proto/common.js';\nimport { Debuffs } from '../core/proto/common.js';\nimport { Class } from '../core/proto/common.js';\nimport { Consumes } from '../core/proto/common.js';\nimport { Encounter } from '../core/proto/common.js';\nimport { ItemSlot } from '../core/proto/common.js';\nimport { MobType } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Stat, PseudoStat } from '../core/proto/common.js';\nimport { TristateEffect } from '../core/proto/common.js'\nimport { Player } from '../core/player.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\n\nimport { Deathknight, Deathknight_Rotation as DeathKnightRotation, DeathknightTalents as DeathKnightTalents, Deathknight_Options as DeathKnightOptions } from '../core/proto/deathknight.js';\n\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Tooltips from '../core/constants/tooltips.js';\n\nimport * as DeathKnightInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nexport class DeathknightSimUI extends IndividualSimUI<Spec.SpecDeathknight> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecDeathknight>) {\n\t\tsuper(parentElem, player, {\n\t\t\tcssClass: 'deathknight-sim-ui',\n\t\t\tcssScheme: 'death-knight',\n\t\t\t// List any known bugs / issues here and they'll be shown on the site.\n\t\t\tknownIssues: [\n\t\t\t],\n\n\t\t\t// All stats for which EP should be calculated.\n\t\t\tepStats: [\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatArmor,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatExpertise,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatSpellHaste,\n\t\t\t],\n\t\t\tepPseudoStats: [\n\t\t\t\tPseudoStat.PseudoStatMainHandDps,\n\t\t\t\tPseudoStat.PseudoStatOffHandDps,\n\t\t\t],\n\t\t\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\t\t\tepReferenceStat: Stat.StatAttackPower,\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\t\t\tdisplayStats: [\n\t\t\t\tStat.StatHealth,\n\t\t\t\tStat.StatArmor,\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatExpertise,\n\t\t\t],\n\t\t\tdefaults: {\n\t\t\t\t// Default equipped gear.\n\t\t\t\tgear: Presets.P2_UNHOLY_DW_BIS_PRESET.gear,\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\n\t\t\t\tepWeights: Stats.fromMap({\n\t\t\t\t\t[Stat.StatStrength]: 3.22,\n\t\t\t\t\t[Stat.StatAgility]: 0.62,\n\t\t\t\t\t[Stat.StatArmor]: 0.01,\n\t\t\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t\t\t[Stat.StatExpertise]: 1.13,\n\t\t\t\t\t[Stat.StatMeleeHaste]: 1.85,\n\t\t\t\t\t[Stat.StatMeleeHit]: 1.92,\n\t\t\t\t\t[Stat.StatMeleeCrit]: 0.76,\n\t\t\t\t\t[Stat.StatArmorPenetration]: 0.77,\n\t\t\t\t\t[Stat.StatSpellHit]: 0.80,\n\t\t\t\t\t[Stat.StatSpellCrit]: 0.34,\n\t\t\t\t}, {\n\t\t\t\t\t[PseudoStat.PseudoStatMainHandDps]: 3.10,\n\t\t\t\t\t[PseudoStat.PseudoStatOffHandDps]: 1.79,\n\t\t\t\t}),\n\t\t\t\t// Default consumes settings.\n\t\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\t\t// Default rotation settings.\n\t\t\t\trotation: Presets.DefaultUnholyRotation,\n\t\t\t\t// Default talents.\n\t\t\t\ttalents: Presets.UnholyDualWieldTalents.data,\n\t\t\t\t// Default spec-specific settings.\n\t\t\t\tspecOptions: Presets.DefaultUnholyOptions,\n\t\t\t\t// Default raid/party buffs settings.\n\t\t\t\traidBuffs: RaidBuffs.create({\n\t\t\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tswiftRetribution: true,\n\t\t\t\t\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\t\t\t\t\ticyTalons: true,\n\t\t\t\t\tabominationsMight: true,\n\t\t\t\t\tleaderOfThePack: TristateEffect.TristateEffectRegular,\n\t\t\t\t\tsanctifiedRetribution: true,\n\t\t\t\t\tbloodlust: true,\n\t\t\t\t\tdevotionAura: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tstoneskinTotem: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tmoonkinAura: TristateEffect.TristateEffectRegular,\n\t\t\t\t\twrathOfAirTotem: true,\n\t\t\t\t\tpowerWordFortitude: TristateEffect.TristateEffectImproved,\n\t\t\t\t}),\n\t\t\t\tpartyBuffs: PartyBuffs.create({\n\t\t\t\t\theroicPresence: false,\n\t\t\t\t}),\n\t\t\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\t\t\tblessingOfKings: true,\n\t\t\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t\t\t}),\n\t\t\t\tdebuffs: Debuffs.create({\n\t\t\t\t\tbloodFrenzy: true,\n\t\t\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tsunderArmor: true,\n\t\t\t\t\tebonPlaguebringer: true,\n\t\t\t\t\tmangle: true,\n\t\t\t\t\theartOfTheCrusader: true,\n\t\t\t\t\tshadowMastery: true,\n\t\t\t\t}),\n\t\t\t},\n\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\n\t\t\tplayerIconInputs: [\n\t\t\t],\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\n\t\t\trotationInputs: DeathKnightInputs.DeathKnightRotationConfig,\n\t\t\tpetConsumeInputs: [\n\t\t\t\tIconInputs.SpicedMammothTreats,\n\t\t\t],\n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\t\t\tincludeBuffDebuffInputs: [\n\t\t\t\tIconInputs.SpellDamageDebuff,\n\t\t\t\tIconInputs.StaminaBuff,\n\t\t\t],\n\t\t\texcludeBuffDebuffInputs: [\n\t\t\t\tIconInputs.AttackPowerDebuff,\n\t\t\t\tIconInputs.DamageReductionPercentBuff,\n\t\t\t\tIconInputs.MeleeAttackSpeedDebuff,\n\t\t\t],\n\t\t\t// Inputs to include in the 'Other' section on the settings tab.\n\t\t\totherInputs: {\n\t\t\t\tinputs: [\n\t\t\t\t\tDeathKnightInputs.DrwPestiApply,\n\t\t\t\t\tDeathKnightInputs.SelfUnholyFrenzy,\n\t\t\t\t\tDeathKnightInputs.StartingRunicPower,\n\t\t\t\t\tDeathKnightInputs.PetUptime,\n\n\t\t\t\t\tDeathKnightInputs.PrecastGhoulFrenzy,\n\t\t\t\t\tDeathKnightInputs.PrecastHornOfWinter,\n\n\t\t\t\t\tOtherInputs.TankAssignment,\n\t\t\t\t\tOtherInputs.InFrontOfTarget,\n\t\t\t\t],\n\t\t\t},\n\t\t\tencounterPicker: {\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\t\t\tshowExecuteProportion: false,\n\t\t\t},\n\n\t\t\tpresets: {\n\t\t\t\t// Preset talents that the user can quickly select.\n\t\t\t\ttalents: [\n\t\t\t\t\tPresets.BloodTalents,\n\t\t\t\t\tPresets.FrostTalents,\n\t\t\t\t\tPresets.FrostUnholyTalents,\n\t\t\t\t\tPresets.UnholyDualWieldTalents,\n\t\t\t\t\tPresets.Unholy2HTalents,\n\t\t\t\t],\n\t\t\t\t// Preset gear configurations that the user can quickly select.\n\t\t\t\tgear: [\n\t\t\t\t\tPresets.P1_BLOOD_BIS_PRESET,\n\t\t\t\t\tPresets.P2_BLOOD_BIS_PRESET,\n\t\t\t\t\tPresets.P1_FROST_PRE_BIS_PRESET,\n\t\t\t\t\tPresets.P1_FROST_BIS_PRESET,\n\t\t\t\t\tPresets.P1_FROSTSUBUNH_BIS_PRESET,\n\t\t\t\t\tPresets.P2_FROST_BIS_PRESET,\n\t\t\t\t\tPresets.P1_UNHOLY_DW_PRERAID_PRESET,\n\t\t\t\t\tPresets.P1_UNHOLY_2H_PRERAID_PRESET,\n\t\t\t\t\tPresets.P1_UNHOLY_DW_BIS_PRESET,\n\t\t\t\t\tPresets.P1_UNHOLY_2H_BIS_PRESET,\n\t\t\t\t\tPresets.P2_UNHOLY_DW_BIS_PRESET,\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t}\n}\n"],"names":["SelfUnholyFrenzy","InputHelpers.makeSpecOptionsBooleanInput","fieldName","label","labelTooltip","extraCssClasses","getValue","player","getSpecOptions","unholyFrenzyTarget","targetIndex","NO_TARGET","setValue","eventID","newValue","newOptions","RaidTarget","create","setSpecOptions","showWhen","getTalents","hysteria","changeEmitter","TypedEvent","onAny","rotationChangeEmitter","talentsChangeEmitter","StartingRunicPower","InputHelpers.makeSpecOptionsNumberInput","PetUptime","percent","masterOfGhouls","PrecastGhoulFrenzy","summonGargoyle","ghoulFrenzy","specOptionsChangeEmitter","PrecastHornOfWinter","DrwPestiApply","getRotation","autoRotation","getTalentTree","getGlyphs","major1","DeathknightMajorGlyph","GlyphOfDisease","major2","major3","InputHelpers.makeRotationNumberInput","UseDeathAndDecay","InputHelpers.makeRotationBooleanInput","scourgeStrike","InputHelpers.makeRotationEnumInput","values","name","value","DeathAndDecayPrio","MaxRuneDowntime","MaxDndUptime","useDeathAndDecay","UseEmpowerRuneWeapon","frostRotationType","FrostRotationType","Custom","UseGargoyle","HoldErwArmy","useEmpowerRuneWeapon","armyOfTheDead","ArmyOfTheDead","AsMajorCd","BloodlustPresence","StartingPresence","Blood","Unholy","GargoylePresence","preNerfedGargoyle","BloodTapGhoulFrenzy","FirstDiseaseInput","FirstDisease","FrostFever","BloodPlague","ArmyOfTheDeadInput","DoNotUse","PreCast","StartingPresenceInput","FightPresence","BloodRuneFillerInput","BloodRuneFiller","BloodStrike","BloodBoil","PreNerfedGargoyleInput","sim","getShowExperimental","BloodTapInput","BloodTap","GhoulFrenzy","IcyTouch","BloodStrikeBT","BloodBoilBT","UseAMSInput","howlingBlast","AvgAMSSuccessRateInput","useAms","AvgAMSHitInput","UseAutoRotation","DesyncRotation","epidemic","Presence","Frost","BloodSpenderInput","BloodSpell","HS","BB","BS","UseDancingRuneWeapon","dancingRuneWeapon","DrwDiseasesInput","DrwDiseases","DoNotApply","Normal","Pestilence","useDancingRuneWeapon","bloodOpener","BloodOpener","Standard","Experimental_1","FrostCustomRotation","InputHelpers.makeCustomRotationInput","numColumns","actionId","ActionId","fromSpellId","CustomSpellOption","CustomIcyTouch","CustomPlagueStrike","CustomPestilence","CustomObliterate","CustomHowlingBlast","CustomHowlingBlastRime","CustomBloodBoil","CustomBloodStrike","CustomDeathAndDecay","CustomHornOfWinter","CustomUnbreakableArmor","CustomBloodTap","CustomEmpoweredRuneWeapon","CustomFrostStrike","EnableWeaponSwap","useGargoyle","WeaponSwapInputs","InputHelpers.MakeItemSwapInput","ItemSlot","ItemSlotMainHand","ItemSlotOffHand","enableWeaponSwap","DeathKnightRotationConfig","inputs","SingleTarget","FrostTalents","data","SavedTalents","talentsString","glyphs","Glyphs","GlyphOfObliterate","GlyphOfFrostStrike","minor1","DeathknightMinorGlyph","GlyphOfHornOfWinter","minor2","GlyphOfPestilence","minor3","GlyphOfRaiseDead","FrostUnholyTalents","UnholyDualWieldTalents","GlyphOfTheGhoul","GlyphOfDarkDeath","GlyphOfDeathAndDecay","Unholy2HTalents","GlyphOfIcyTouch","BloodTalents","GlyphOfDancingRuneWeapon","GlyphOfDeathStrike","DefaultUnholyRotation","DeathKnightRotation","btGhoulFrenzy","refreshHornOfWinter","holdErwArmy","Deathknight_Rotation_ArmyOfTheDead","startingPresence","Deathknight_Rotation_Presence","blPresence","presence","gargoylePresence","bloodRuneFiller","Deathknight_Rotation_BloodRuneFiller","drwDiseases","Deathknight_Rotation_DrwDiseases","bloodSpender","Deathknight_Rotation_BloodSpell","DefaultUnholyOptions","DeathKnightOptions","drwPestiApply","startingRunicPower","petUptime","precastGhoulFrenzy","precastHornOfWinter","DefaultFrostRotation","avgAmsSuccessRate","avgAmsHit","Deathknight_Rotation_FrostRotationType","frostCustomRotation","CustomRotation","spells","CustomSpell","spell","DefaultFrostOptions","DefaultBloodRotation","DefaultBloodOptions","OtherDefaults","DefaultConsumes","Consumes","flask","Flask","FlaskOfEndlessRage","food","Food","FoodDragonfinFilet","defaultPotion","Potions","PotionOfSpeed","petFood","PetFood","PetFoodSpicedMammothTreats","prepopPotion","thermalSapper","fillerExplosive","Explosive","ExplosiveSaroniteBomb","P1_BLOOD_BIS_PRESET","tooltip","Tooltips.BASIC_BIS_DISCLAIMER","enableWhen","gear","EquipmentSpec","fromJsonString","P2_BLOOD_BIS_PRESET","P1_UNHOLY_2H_PRERAID_PRESET","toolbar","nervesOfColdSteel","P1_UNHOLY_2H_BIS_PRESET","P1_UNHOLY_DW_PRERAID_PRESET","P1_UNHOLY_DW_BIS_PRESET","P2_UNHOLY_DW_BIS_PRESET","P1_FROST_PRE_BIS_PRESET","P1_FROST_BIS_PRESET","P2_FROST_BIS_PRESET","P1_FROSTSUBUNH_BIS_PRESET","DeathknightSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","cssScheme","knownIssues","epStats","Stat","StatStrength","StatArmor","StatAgility","StatAttackPower","StatExpertise","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatSpellHit","StatSpellCrit","StatSpellHaste","epPseudoStats","PseudoStat","PseudoStatMainHandDps","PseudoStatOffHandDps","epReferenceStat","displayStats","StatHealth","defaults","Presets.P2_UNHOLY_DW_BIS_PRESET","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultUnholyRotation","talents","Presets.UnholyDualWieldTalents","specOptions","Presets.DefaultUnholyOptions","raidBuffs","RaidBuffs","giftOfTheWild","TristateEffect","TristateEffectImproved","swiftRetribution","strengthOfEarthTotem","icyTalons","abominationsMight","leaderOfThePack","TristateEffectRegular","sanctifiedRetribution","bloodlust","devotionAura","stoneskinTotem","moonkinAura","wrathOfAirTotem","powerWordFortitude","partyBuffs","PartyBuffs","heroicPresence","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfMight","debuffs","Debuffs","bloodFrenzy","faerieFire","sunderArmor","ebonPlaguebringer","mangle","heartOfTheCrusader","shadowMastery","playerIconInputs","rotationInputs","DeathKnightInputs.DeathKnightRotationConfig","petConsumeInputs","IconInputs.SpicedMammothTreats","includeBuffDebuffInputs","IconInputs.SpellDamageDebuff","IconInputs.StaminaBuff","excludeBuffDebuffInputs","IconInputs.AttackPowerDebuff","IconInputs.DamageReductionPercentBuff","IconInputs.MeleeAttackSpeedDebuff","otherInputs","DeathKnightInputs.DrwPestiApply","DeathKnightInputs.SelfUnholyFrenzy","DeathKnightInputs.StartingRunicPower","DeathKnightInputs.PetUptime","DeathKnightInputs.PrecastGhoulFrenzy","DeathKnightInputs.PrecastHornOfWinter","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","Presets.BloodTalents","Presets.FrostTalents","Presets.FrostUnholyTalents","Presets.Unholy2HTalents","Presets.P1_BLOOD_BIS_PRESET","Presets.P2_BLOOD_BIS_PRESET","Presets.P1_FROST_PRE_BIS_PRESET","Presets.P1_FROST_BIS_PRESET","Presets.P1_FROSTSUBUNH_BIS_PRESET","Presets.P2_FROST_BIS_PRESET","Presets.P1_UNHOLY_DW_PRERAID_PRESET","Presets.P1_UNHOLY_2H_PRERAID_PRESET","Presets.P1_UNHOLY_DW_BIS_PRESET","Presets.P1_UNHOLY_2H_BIS_PRESET"],"mappings":"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"}