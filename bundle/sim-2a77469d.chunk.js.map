{"version":3,"file":"sim-2a77469d.chunk.js","sources":["../../../ui/warrior/presets.ts","../../../ui/warrior/inputs.ts","../../../ui/warrior/sim.ts"],"sourcesContent":["import { Consumes } from '../core/proto/common.js';\nimport { EquipmentSpec } from '../core/proto/common.js';\nimport { Flask } from '../core/proto/common.js';\nimport { Food } from '../core/proto/common.js';\nimport { Glyphs } from '../core/proto/common.js';\nimport { ItemSpec } from '../core/proto/common.js';\nimport { Potions } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Faction } from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\nimport { Player } from '../core/player.js';\n\nimport {\n\tWarriorShout,\n\tWarriorTalents as WarriorTalents,\n\tWarrior,\n\tWarrior_Rotation as WarriorRotation,\n\tWarrior_Rotation_SunderArmor as SunderArmor,\n\tWarrior_Options as WarriorOptions,\n\tWarriorMajorGlyph,\n\tWarriorMinorGlyph,\n\tWarrior_Rotation_StanceOption as StanceOption,\n\tWarrior_Rotation_MainGcd as MainGcd,\n} from '../core/proto/warrior.js';\n\nimport * as Gems from '../core/proto_utils/gems.js';\nimport * as Tooltips from '../core/constants/tooltips.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const ArmsTalents = {\n\tname: 'Arms',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '3022032023335100102012213231251-305-2033',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: WarriorMajorGlyph.GlyphOfRending,\n\t\t\tmajor2: WarriorMajorGlyph.GlyphOfMortalStrike,\n\t\t\tmajor3: WarriorMajorGlyph.GlyphOfExecution,\n\t\t\tminor1: WarriorMinorGlyph.GlyphOfThunderClap,\n\t\t\tminor2: WarriorMinorGlyph.GlyphOfCommand,\n\t\t\tminor3: WarriorMinorGlyph.GlyphOfCharge,\n\t\t}),\n\t}),\n};\n\nexport const FuryTalents = {\n\tname: 'Fury',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '32002301233-305053000520310053120500351',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: WarriorMajorGlyph.GlyphOfWhirlwind,\n\t\t\tmajor2: WarriorMajorGlyph.GlyphOfHeroicStrike,\n\t\t\tmajor3: WarriorMajorGlyph.GlyphOfExecution,\n\t\t\tminor1: WarriorMinorGlyph.GlyphOfBattle,\n\t\t\tminor2: WarriorMinorGlyph.GlyphOfBloodrage,\n\t\t\tminor3: WarriorMinorGlyph.GlyphOfCharge,\n\t\t}),\n\t}),\n};\n\nexport const DefaultRotation = WarriorRotation.create({\n\tuseRend: true,\n\tuseMs: true,\n\tuseCleave: false,\n\n\tmainGcd: MainGcd.Slam,\n\n\tsunderArmor: SunderArmor.SunderArmorMaintain,\n\n\tmsRageThreshold: 35,\n\thsRageThreshold: 30,\n  rendHealthThresholdAbove: 20,\n\trendRageThresholdBelow: 100,\n\tslamRageThreshold: 25,\n\trendCdThreshold: 0,\n\tuseHsDuringExecute: true,\n\tuseBtDuringExecute: true,\n\tuseWwDuringExecute: true,\n\tuseSlamOverExecute: true,\n\tspamExecute: true,\n\tstanceOption: StanceOption.DefaultStance,\n});\n\nexport const ArmsRotation = WarriorRotation.create({\n\tuseRend: true,\n\tuseMs: true,\n\tuseCleave: false,\n\tsunderArmor: SunderArmor.SunderArmorMaintain,\n\tmsRageThreshold: 355,\n\tslamRageThreshold: 25,\n\thsRageThreshold: 50,\n\trendCdThreshold: 0,\n\tuseHsDuringExecute: true,\n\tspamExecute: true,\n\tstanceOption: StanceOption.DefaultStance,\n});\n\nexport const DefaultOptions = WarriorOptions.create({\n\tstartingRage: 0,\n\tuseRecklessness: true,\n  useShatteringThrow: true,\n\tshout: WarriorShout.WarriorShoutCommanding,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskOfEndlessRage,\n\tfood: Food.FoodSpicedWormBurger,\n\tdefaultPotion: Potions.IndestructiblePotion,\n\tprepopPotion: Potions.PotionOfSpeed,\n});\n\nexport const P1_PRERAID_FURY_PRESET = {\n\tname: 'P1 Pre-Raid Fury Preset',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() != 0,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n\t\t{\n\t\t\t\"id\": 41386,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t\t41398,\n\t\t\t\t42702\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 42645,\n\t\t\t\"gems\": [\n\t\t\t\t40003\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44195,\n\t\t\t\"enchant\": 3808\n\t\t},\n\t\t{\n\t\t\t\"id\": 37647,\n\t\t\t\"enchant\": 3605\n\t\t},\n\t\t{\n\t\t\t\"id\": 39606,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t\t40003,\n\t\t\t\t40003\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44203,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 39609,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t40037,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40694,\n\t\t\t\"gems\": [\n\t\t\t\t42149,\n\t\t\t\t42149\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44205,\n\t\t\t\"enchant\": 3823\n\t\t},\n\t\t{\n\t\t\t\"id\": 44306,\n\t\t\t\"enchant\": 3606,\n\t\t\t\"gems\": [\n\t\t\t\t40037,\n\t\t\t\t40037\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 42642,\n\t\t\t\"gems\": [\n\t\t\t\t42149\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 37642\n\t\t},\n\t\t{\n\t\t\t\"id\": 42987\n\t\t},\n\t\t{\n\t\t\t\"id\": 40684\n\t\t},\n\t\t{\n\t\t\t\"id\": 37852,\n\t\t\t\"enchant\": 3789\n\t\t},\n\t\t{\n\t\t\t\"id\": 37852,\n\t\t\t\"enchant\": 3789\n\t\t},\n\t\t{\n\t\t\t\"id\": 37191\n\t\t}\n\t]}`),\n};\n\nexport const P1_FURY_PRESET = {\n\tname: 'P1 Fury Preset',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() != 0,\n\tgear: EquipmentSpec.fromJsonString(`{ \"items\": [\n\t\t{\n\t\t\t\"id\": 44006,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t\t41285,\n\t\t\t\t42702\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44664,\n\t\t\t\"gems\": [\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40530,\n\t\t\t\"enchant\": 3808,\n\t\t\t\"gems\": [\n\t\t\t\t40037\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40403,\n\t\t\t\"enchant\": 3605\n\t\t},\n\t\t{\n\t\t\t\"id\": 40539,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t\t42142\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 39765,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40541,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40205,\n\t\t\t\"gems\": [\n\t\t\t\t42142\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40529,\n\t\t\t\"enchant\": 3823,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t40022\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40591,\n\t\t\t\"enchant\": 3606\n\t\t},\n\t\t{\n\t\t\t\"id\": 43993,\n\t\t\t\"gems\": [\n\t\t\t\t42142\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40717\n\t\t},\n\t\t{\n\t\t\t\"id\": 42987\n\t\t},\n\t\t{\n\t\t\t\"id\": 40256\n\t\t},\n\t\t{\n\t\t\t\"id\": 40384,\n\t\t\t\"enchant\": 3789\n\t\t},\n\t\t{\n\t\t\t\"id\": 40384,\n\t\t\t\"enchant\": 3789\n\t\t},\n\t\t{\n\t\t\t\"id\": 40385\n\t\t}\n\t]}`),\n};\n\nexport const P2_FURY_PRESET = {\n\tname: 'P2 Fury Preset',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() != 0,\n\tgear: EquipmentSpec.fromJsonString(`{ \"items\": [\n\t\t{\n\t\t\t\"id\": 46151,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t\t41398,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45517,\n\t\t\t\"gems\": [\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 46149,\n\t\t\t\"enchant\": 3808,\n\t\t\t\"gems\": [\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 46032,\n\t\t\t\"enchant\": 3605,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t40037\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 46146,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t42702\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45611,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t\t40037,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 46148,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t40058\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 46095,\n\t\t\t\"gems\": [\n\t\t\t\t42154,\n\t\t\t\t42142,\n\t\t\t\t42142\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45536,\n\t\t\t\"enchant\": 3823,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t39996,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40591,\n\t\t\t\"enchant\": 3606\n\t\t},\n\t\t{\n\t\t\t\"id\": 45608,\n\t\t\t\"gems\": [\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45534,\n\t\t\t\"gems\": [\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 42987\n\t\t},\n\t\t{\n\t\t\t\"id\": 45931\n\t\t},\n\t\t{\n\t\t\t\"id\": 45516,\n\t\t\t\"enchant\": 3789,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45516,\n\t\t\t\"enchant\": 3789,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45296,\n\t\t\t\"gems\": [\n\t\t\t  39996\n\t\t\t]\n\t\t}\n\t]}`),\n};\n\nexport const P1_PRERAID_ARMS_PRESET = {\n\tname: 'P1 Pre-Raid Arms Preset',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 0,\n\tgear: EquipmentSpec.fromJsonString(`{ \"items\": [\n\t\t{\n\t\t\t\"id\": 41386,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t\t41285,\n\t\t\t\t42702\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 42645,\n\t\t\t\"gems\": [\n\t\t\t\t40002\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44195,\n\t\t\t\"enchant\": 3808\n\t\t},\n\t\t{\n\t\t\t\"id\": 37647,\n\t\t\t\"enchant\": 3605\n\t\t},\n\t\t{\n\t\t\t\"id\": 39606,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t\t40002,\n\t\t\t\t40002\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 41355,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 39609,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t40037,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40694,\n\t\t\t\"gems\": [\n\t\t\t\t42149,\n\t\t\t\t42149\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 37193,\n\t\t\t\"enchant\": 3823,\n\t\t\t\"gems\": [\n\t\t\t\t40002,\n\t\t\t\t40037\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44306,\n\t\t\t\"enchant\": 3606,\n\t\t\t\"gems\": [\n\t\t\t\t40086,\n\t\t\t\t40002\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 42642,\n\t\t\t\"gems\": [\n\t\t\t\t42149\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 37642\n\t\t},\n\t\t{\n\t\t\t\"id\": 42987\n\t\t},\n\t\t{\n\t\t\t\"id\": 40684\n\t\t},\n\t\t{\n\t\t\t\"id\": 37852,\n\t\t\t\"enchant\": 3789\n\t\t},\n\t\t{},\n\t\t{\n\t\t\t\"id\": 37191\n\t\t}\n\t]}`),\n};\n\nexport const P1_ARMS_PRESET = {\n\tname: 'P1 Arms Preset',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 0,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n\t\t{\n\t\t\t\"id\": 40528,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t\t41398,\n\t\t\t\t42153\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44664,\n\t\t\t\"gems\": [\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40530,\n\t\t\t\"enchant\": 3808,\n\t\t\t\"gems\": [\n\t\t\t\t40038\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40403,\n\t\t\t\"enchant\": 3605\n\t\t},\n\t\t{\n\t\t\t\"id\": 40539,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t\t42153\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40330,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t\t40002,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40541,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40205,\n\t\t\t\"gems\": [\n\t\t\t\t42153\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40318,\n\t\t\t\"enchant\": 3823,\n\t\t\t\"gems\": [\n\t\t\t\t49110,\n\t\t\t\t40038\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40591,\n\t\t\t\"enchant\": 3606\n\t\t},\n\t\t{\n\t\t\t\"id\": 43993,\n\t\t\t\"gems\": [\n\t\t\t\t40002\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40474\n\t\t},\n\t\t{\n\t\t\t\"id\": 42987\n\t\t},\n\t\t{\n\t\t\t\"id\": 40256\n\t\t},\n\t\t{\n\t\t\t\"id\": 40384,\n\t\t\t\"enchant\": 3789\n\t\t},\n\t\t{},\n\t\t{\n\t\t\t\"id\": 40385\n\t\t}\n\t]}`),\n};\n\nexport const P2_ARMS_PRESET = {\n\tname: 'P2 Arms Preset',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 0,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n\t\t  {\n\t\t\t\"id\": 46151,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t  41398,\n\t\t\t  42142\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45459,\n\t\t\t\"gems\": [\n\t\t\t  40002\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46149,\n\t\t\t\"enchant\": 3808,\n\t\t\t\"gems\": [\n\t\t\t  42153\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46032,\n\t\t\t\"enchant\": 3605,\n\t\t\t\"gems\": [\n\t\t\t  39996,\n\t\t\t  40037\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46146,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t  42153,\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45663,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t  39996,\n\t\t\t  0\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46148,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t  40037,\n\t\t\t  0\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45241,\n\t\t\t\"gems\": [\n\t\t\t  49110,\n\t\t\t  40037,\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45536,\n\t\t\t\"enchant\": 3823,\n\t\t\t\"gems\": [\n\t\t\t  39996,\n\t\t\t  39996,\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45599,\n\t\t\t\"enchant\": 3606,\n\t\t\t\"gems\": [\n\t\t\t  40002,\n\t\t\t  40002\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45608,\n\t\t\t\"gems\": [\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46322,\n\t\t\t\"gems\": [\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46038\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45931\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45533,\n\t\t\t\"enchant\": 3789,\n\t\t\t\"gems\": [\n\t\t\t  39996,\n\t\t\t  39996\n\t\t\t]\n\t\t  },\n\t\t  {},\n\t\t  {\n\t\t\t\"id\": 45296,\n\t\t\t\"gems\": [\n\t\t\t  39996\n\t\t\t]\n\t\t  }\n\t]}`),\n};\n","import { IconPickerConfig } from '../core/components/icon_picker.js';\nimport { RaidTarget } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { NO_TARGET } from '../core/proto_utils/utils.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\nimport { Sim } from '../core/sim.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { Target } from '../core/target.js';\n\nimport {\n\tWarriorShout,\n\tWarriorTalents as WarriorTalents,\n\tWarrior,\n\tWarrior_Rotation as WarriorRotation,\n\tWarrior_Rotation_SunderArmor as SunderArmor,\n\tWarrior_Options as WarriorOptions,\n\tWarrior_Rotation_StanceOption as StanceOption,\n\tWarrior_Rotation_MainGcd as MainGcd\n} from '../core/proto/warrior.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\nimport * as Presets from './presets.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const Recklessness = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecWarrior>({\n\tfieldName: 'useRecklessness',\n\tid: ActionId.fromSpellId(1719),\n});\n\nexport const ShatteringThrow = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecWarrior>({\n\tfieldName: 'useShatteringThrow',\n\tid: ActionId.fromSpellId(64382),\n});\n\nexport const StartingRage = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecWarrior>({\n\tfieldName: 'startingRage',\n\tlabel: 'Starting Rage',\n\tlabelTooltip: 'Initial rage at the start of each iteration.',\n});\n\nexport const Munch = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecWarrior>({\n\tfieldName: 'munch',\n\tlabel: 'Munching',\n\tlabelTooltip: 'Apply \"munching\" to Deep Wounds',\n});\n\nexport const ShoutPicker = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecWarrior, WarriorShout>({\n\tfieldName: 'shout',\n\tvalues: [\n\t\t{ color: 'c79c6e', value: WarriorShout.WarriorShoutNone },\n\t\t{ actionId: ActionId.fromSpellId(2048), value: WarriorShout.WarriorShoutBattle },\n\t\t{ actionId: ActionId.fromSpellId(469), value: WarriorShout.WarriorShoutCommanding },\n\t],\n});\n\nexport const WarriorRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useMs',\n\t\t\tlabel: 'Use Mortal Strike',\n\t\t\tlabelTooltip: 'Use Mortal Strike when rage threshold is met.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalents().mortalStrike,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useCleave',\n\t\t\tlabel: 'Use Cleave',\n\t\t\tlabelTooltip: 'Use Cleave instead of Heroic Strike.',\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useRend',\n\t\t\tlabel: 'Use Rend',\n\t\t\tlabelTooltip: 'Use Rend when rage threshold is met and the debuff duration is less than refresh time.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecWarrior, MainGcd>({\n\t\t\tfieldName: 'mainGcd',\n\t\t\tlabel: 'Main GCD',\n\t\t\tlabelTooltip: 'Main GCD ability that will be prioritized above other abilities.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Slam', value: MainGcd.Slam },\n\t\t\t\t{ name: 'Bloodthirst', value: MainGcd.Bloodthirst },\n\t\t\t\t{ name: 'Whirlwind', value: MainGcd.Whirlwind },\n\t\t\t],\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalents().bloodthirst,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'msRageThreshold',\n\t\t\tlabel: 'Mortal Strike rage threshold',\n\t\t\tlabelTooltip: 'Mortal Strike when rage is above:',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalents().mortalStrike,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'slamRageThreshold',\n\t\t\tlabel: 'Slam rage threshold',\n\t\t\tlabelTooltip: 'Slam when rage is above:',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalents().mortalStrike,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'hsRageThreshold',\n\t\t\tlabel: 'HS rage threshold',\n\t\t\tlabelTooltip: 'Heroic Strike when rage is above:',\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'rendHealthThresholdAbove',\n\t\t\tlabel: 'Rend health threshold (%)',\n\t\t\tlabelTooltip: 'Rend will only be used when boss health is above this value in %.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getRotation().useRend == true && player.getTalents().bloodthirst,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'rendRageThresholdBelow',\n\t\t\tlabel: 'Rend rage threshold below',\n\t\t\tlabelTooltip: 'Rend will only be used when rage is smaller than this value.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getRotation().useRend == true && player.getTalents().bloodthirst,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'rendCdThreshold',\n\t\t\tlabel: 'Rend Refresh Time',\n\t\t\tlabelTooltip: 'Refresh Rend when the remaining duration is less than this amount of time (seconds).',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getRotation().useRend == true,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useHsDuringExecute',\n\t\t\tlabel: 'HS during Execute Phase',\n\t\t\tlabelTooltip: 'Use Heroic Strike during Execute Phase.',\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useBtDuringExecute',\n\t\t\tlabel: 'BT during Execute Phase',\n\t\t\tlabelTooltip: 'Use Bloodthirst during Execute Phase.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalents().bloodthirst,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useWwDuringExecute',\n\t\t\tlabel: 'WW during Execute Phase',\n\t\t\tlabelTooltip: 'Use Whirlwind during Execute Phase.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalents().bloodthirst,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useSlamOverExecute',\n\t\t\tlabel: 'Slam Over Execute',\n\t\t\tlabelTooltip: 'Use Slam Over Execute when Bloodsurge Procs in Execute Phase.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalents().bloodthirst,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'spamExecute',\n\t\t\tlabel: 'Spam Execute',\n\t\t\tlabelTooltip: 'Use Execute whenever possible during Execute Phase.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalents().mortalStrike,\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecWarrior, SunderArmor>({\n\t\t\tfieldName: 'sunderArmor',\n\t\t\tlabel: 'Sunder Armor',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Never', value: SunderArmor.SunderArmorNone },\n\t\t\t\t{ name: 'Help Stack', value: SunderArmor.SunderArmorHelpStack },\n\t\t\t\t{ name: 'Maintain Debuff', value: SunderArmor.SunderArmorMaintain },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecWarrior, StanceOption>({\n\t\t\tfieldName: 'stanceOption',\n\t\t\tlabel: 'Stance Option',\n\t\t\tlabelTooltip: 'Stance to stay on. The default for Fury (Bloodthirst) is Berserker Stance and Battle Stance for everything else.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Default', value: StanceOption.DefaultStance },\n\t\t\t\t{ name: 'Battle Stance', value: StanceOption.BattleStance },\n\t\t\t\t{ name: 'Berserker Stance', value: StanceOption.BerserkerStance },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'maintainDemoShout',\n\t\t\tlabel: 'Maintain Demo Shout',\n\t\t\tlabelTooltip: 'Keep Demo Shout active on the primary target.',\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'maintainThunderClap',\n\t\t\tlabel: 'Maintain Thunder Clap',\n\t\t\tlabelTooltip: 'Keep Thunder Clap active on the primary target.',\n\t\t}),\n\t],\n};\n","import { RaidBuffs } from '../core/proto/common.js';\nimport { PartyBuffs } from '../core/proto/common.js';\nimport { IndividualBuffs } from '../core/proto/common.js';\nimport { Debuffs } from '../core/proto/common.js';\nimport { Class } from '../core/proto/common.js';\nimport { Consumes } from '../core/proto/common.js';\nimport { Encounter } from '../core/proto/common.js';\nimport { ItemSlot } from '../core/proto/common.js';\nimport { MobType } from '../core/proto/common.js';\nimport { RaidTarget } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Stat, PseudoStat } from '../core/proto/common.js';\nimport { TristateEffect } from '../core/proto/common.js'\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { Player } from '../core/player.js';\nimport { Sim } from '../core/sim.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\n\nimport { Warrior, Warrior_Rotation as WarriorRotation, WarriorTalents as WarriorTalents, Warrior_Options as WarriorOptions } from '../core/proto/warrior.js';\n\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Mechanics from '../core/constants/mechanics.js';\nimport * as Tooltips from '../core/constants/tooltips.js';\n\nimport * as WarriorInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nexport class WarriorSimUI extends IndividualSimUI<Spec.SpecWarrior> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecWarrior>) {\n\t\tsuper(parentElem, player, {\n\t\t\tcssClass: 'warrior-sim-ui',\n\t\t\tcssScheme: 'warrior',\n\t\t\t// List any known bugs / issues here and they'll be shown on the site.\n\t\t\tknownIssues: [\n\t\t\t],\n\n\t\t\t// All stats for which EP should be calculated.\n\t\t\tepStats: [\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatExpertise,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatArmor,\n\t\t\t],\n\t\t\tepPseudoStats: [\n\t\t\t\tPseudoStat.PseudoStatMainHandDps,\n\t\t\t\tPseudoStat.PseudoStatOffHandDps,\n\t\t\t],\n\t\t\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\t\t\tepReferenceStat: Stat.StatAttackPower,\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\t\t\tdisplayStats: [\n\t\t\t\tStat.StatHealth,\n\t\t\t\tStat.StatStamina,\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatExpertise,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatArmor,\n\t\t\t],\n\t\t\tmodifyDisplayStats: (player: Player<Spec.SpecWarrior>) => {\n\t\t\t\tlet stats = new Stats();\n\t\t\t\tif (!player.getInFrontOfTarget()) {\n\t\t\t\t\t// When behind target, dodge is the only outcome affected by Expertise.\n\t\t\t\t\tstats = stats.addStat(Stat.StatExpertise, player.getTalents().weaponMastery * 4 * Mechanics.EXPERTISE_PER_QUARTER_PERCENT_REDUCTION);\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\ttalents: stats,\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tdefaults: {\n\t\t\t\t// Default equipped gear.\n\t\t\t\tgear: Presets.P2_FURY_PRESET.gear,\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\n\t\t\t\tepWeights: Stats.fromMap({\n\t\t\t\t\t[Stat.StatStrength]: 2.72,\n\t\t\t\t\t[Stat.StatAgility]: 1.82,\n\t\t\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t\t\t[Stat.StatExpertise]: 2.55,\n\t\t\t\t\t[Stat.StatMeleeHit]: 0.79,\n\t\t\t\t\t[Stat.StatMeleeCrit]: 2.12,\n\t\t\t\t\t[Stat.StatMeleeHaste]: 1.72,\n\t\t\t\t\t[Stat.StatArmorPenetration]: 2.17,\n\t\t\t\t\t[Stat.StatArmor]: 0.03,\n\t\t\t\t}, {\n\t\t\t\t\t[PseudoStat.PseudoStatMainHandDps]: 6.29,\n\t\t\t\t\t[PseudoStat.PseudoStatOffHandDps]: 3.58,\n\t\t\t\t}),\n\t\t\t\t// Default consumes settings.\n\t\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\t\t// Default rotation settings.\n\t\t\t\trotation: Presets.DefaultRotation,\n\t\t\t\t// Default talents.\n\t\t\t\ttalents: Presets.FuryTalents.data,\n\t\t\t\t// Default spec-specific settings.\n\t\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\t\t// Default raid/party buffs settings.\n\t\t\t\traidBuffs: RaidBuffs.create({\n\t\t\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tswiftRetribution: true,\n\t\t\t\t\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\t\t\t\t\ticyTalons: true,\n\t\t\t\t\tabominationsMight: true,\n\t\t\t\t\tleaderOfThePack: TristateEffect.TristateEffectRegular,\n\t\t\t\t\tsanctifiedRetribution: true,\n\t\t\t\t\tbloodlust: true,\n\t\t\t\t\tdevotionAura: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tstoneskinTotem: TristateEffect.TristateEffectImproved,\n\t\t\t\t}),\n\t\t\t\tpartyBuffs: PartyBuffs.create({\n\t\t\t\t\theroicPresence: false,\n\t\t\t\t}),\n\t\t\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\t\t\tblessingOfKings: true,\n\t\t\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t\t\t}),\n\t\t\t\tdebuffs: Debuffs.create({\n\t\t\t\t\tbloodFrenzy: true,\n\t\t\t\t\theartOfTheCrusader: true,\n\t\t\t\t\tmangle: true,\n\t\t\t\t\tsunderArmor: true,\n\t\t\t\t\tcurseOfWeakness: TristateEffect.TristateEffectRegular,\n\t\t\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\n\t\t\t\t}),\n\t\t\t},\n\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\n\t\t\tplayerIconInputs: [\n\t\t\t\tWarriorInputs.ShoutPicker,\n\t\t\t\tWarriorInputs.Recklessness,\n\t\t\t\tWarriorInputs.ShatteringThrow,\n\t\t\t],\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\n\t\t\trotationInputs: WarriorInputs.WarriorRotationConfig,\n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\t\t\tincludeBuffDebuffInputs: [\n\t\t\t],\n\t\t\texcludeBuffDebuffInputs: [\n\t\t\t],\n\t\t\t// Inputs to include in the 'Other' section on the settings tab.\n\t\t\totherInputs: {\n\t\t\t\tinputs: [\n\t\t\t\t\tWarriorInputs.StartingRage,\n\t\t\t\t\tWarriorInputs.Munch,\n\t\t\t\t\tOtherInputs.TankAssignment,\n\t\t\t\t\tOtherInputs.InFrontOfTarget,\n\t\t\t\t],\n\t\t\t},\n\t\t\tencounterPicker: {\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\t\t\tshowExecuteProportion: true,\n\t\t\t},\n\n\t\t\tpresets: {\n\t\t\t\t// Preset talents that the user can quickly select.\n\t\t\t\ttalents: [\n\t\t\t\t\tPresets.ArmsTalents,\n\t\t\t\t\tPresets.FuryTalents,\n\t\t\t\t],\n\t\t\t\t// Preset gear configurations that the user can quickly select.\n\t\t\t\tgear: [\n\t\t\t\t\tPresets.P1_PRERAID_FURY_PRESET,\n\t\t\t\t\tPresets.P1_FURY_PRESET,\n\t\t\t\t\tPresets.P2_FURY_PRESET,\n\t\t\t\t\tPresets.P1_PRERAID_ARMS_PRESET,\n\t\t\t\t\tPresets.P1_ARMS_PRESET,\n\t\t\t\t\tPresets.P2_ARMS_PRESET,\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t}\n}\n"],"names":["ArmsTalents","name","data","SavedTalents","create","talentsString","glyphs","Glyphs","major1","WarriorMajorGlyph","GlyphOfRending","major2","GlyphOfMortalStrike","major3","GlyphOfExecution","minor1","WarriorMinorGlyph","GlyphOfThunderClap","minor2","GlyphOfCommand","minor3","GlyphOfCharge","FuryTalents","GlyphOfWhirlwind","GlyphOfHeroicStrike","GlyphOfBattle","GlyphOfBloodrage","DefaultRotation","WarriorRotation","useRend","useMs","useCleave","mainGcd","MainGcd","Slam","sunderArmor","SunderArmor","SunderArmorMaintain","msRageThreshold","hsRageThreshold","rendHealthThresholdAbove","rendRageThresholdBelow","slamRageThreshold","rendCdThreshold","useHsDuringExecute","useBtDuringExecute","useWwDuringExecute","useSlamOverExecute","spamExecute","stanceOption","StanceOption","DefaultStance","ArmsRotation","DefaultOptions","WarriorOptions","startingRage","useRecklessness","useShatteringThrow","shout","WarriorShout","WarriorShoutCommanding","DefaultConsumes","Consumes","flask","Flask","FlaskOfEndlessRage","food","Food","FoodSpicedWormBurger","defaultPotion","Potions","IndestructiblePotion","prepopPotion","PotionOfSpeed","P1_PRERAID_FURY_PRESET","tooltip","Tooltips.BASIC_BIS_DISCLAIMER","enableWhen","player","getTalentTree","gear","EquipmentSpec","fromJsonString","P1_FURY_PRESET","P2_FURY_PRESET","P1_PRERAID_ARMS_PRESET","P1_ARMS_PRESET","P2_ARMS_PRESET","Recklessness","InputHelpers.makeSpecOptionsBooleanIconInput","fieldName","id","ActionId","fromSpellId","ShatteringThrow","StartingRage","InputHelpers.makeSpecOptionsNumberInput","label","labelTooltip","Munch","InputHelpers.makeSpecOptionsBooleanInput","ShoutPicker","InputHelpers.makeSpecOptionsEnumIconInput","values","color","value","WarriorShoutNone","actionId","WarriorShoutBattle","WarriorRotationConfig","inputs","InputHelpers.makeRotationBooleanInput","changeEmitter","TypedEvent","onAny","rotationChangeEmitter","talentsChangeEmitter","showWhen","getTalents","mortalStrike","InputHelpers.makeRotationEnumInput","Bloodthirst","Whirlwind","bloodthirst","InputHelpers.makeRotationNumberInput","getRotation","SunderArmorNone","SunderArmorHelpStack","BattleStance","BerserkerStance","WarriorSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","cssScheme","knownIssues","epStats","Stat","StatStrength","StatAgility","StatAttackPower","StatExpertise","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatArmor","epPseudoStats","PseudoStat","PseudoStatMainHandDps","PseudoStatOffHandDps","epReferenceStat","displayStats","StatHealth","StatStamina","modifyDisplayStats","stats","Stats","getInFrontOfTarget","addStat","weaponMastery","Mechanics.EXPERTISE_PER_QUARTER_PERCENT_REDUCTION","talents","defaults","Presets.P2_FURY_PRESET","epWeights","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultRotation","Presets.FuryTalents","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","giftOfTheWild","TristateEffect","TristateEffectImproved","swiftRetribution","strengthOfEarthTotem","icyTalons","abominationsMight","leaderOfThePack","TristateEffectRegular","sanctifiedRetribution","bloodlust","devotionAura","stoneskinTotem","partyBuffs","PartyBuffs","heroicPresence","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfMight","debuffs","Debuffs","bloodFrenzy","heartOfTheCrusader","mangle","curseOfWeakness","faerieFire","playerIconInputs","WarriorInputs.ShoutPicker","WarriorInputs.Recklessness","WarriorInputs.ShatteringThrow","rotationInputs","WarriorInputs.WarriorRotationConfig","includeBuffDebuffInputs","excludeBuffDebuffInputs","otherInputs","WarriorInputs.StartingRage","WarriorInputs.Munch","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","Presets.ArmsTalents","Presets.P1_PRERAID_FURY_PRESET","Presets.P1_FURY_PRESET","Presets.P1_PRERAID_ARMS_PRESET","Presets.P1_ARMS_PRESET","Presets.P2_ARMS_PRESET"],"mappings":"yXAkCO,MAAMA,EAAc,CAC1BC,KAAM,OACNC,KAAMC,EAAaC,OAAO,CACzBC,cAAe,2CACfC,OAAQC,EAAOH,OAAO,CACrBI,OAAQC,EAAkBC,eAC1BC,OAAQF,EAAkBG,oBAC1BC,OAAQJ,EAAkBK,iBAC1BC,OAAQC,EAAkBC,mBAC1BC,OAAQF,EAAkBG,eAC1BC,OAAQJ,EAAkBK,mBAKhBC,EAAc,CAC1BrB,KAAM,OACNC,KAAMC,EAAaC,OAAO,CACzBC,cAAe,0CACfC,OAAQC,EAAOH,OAAO,CACrBI,OAAQC,EAAkBc,iBAC1BZ,OAAQF,EAAkBe,oBAC1BX,OAAQJ,EAAkBK,iBAC1BC,OAAQC,EAAkBS,cAC1BP,OAAQF,EAAkBU,iBAC1BN,OAAQJ,EAAkBK,mBAKhBM,EAAkBC,EAAgBxB,OAAO,CACrDyB,SAAS,EACTC,OAAO,EACPC,WAAW,EAEXC,QAASC,EAAQC,KAEjBC,YAAaC,EAAYC,oBAEzBC,gBAAiB,GACjBC,gBAAiB,GAChBC,yBAA0B,GAC3BC,uBAAwB,IACxBC,kBAAmB,GACnBC,gBAAiB,EACjBC,oBAAoB,EACpBC,oBAAoB,EACpBC,oBAAoB,EACpBC,oBAAoB,EACpBC,aAAa,EACbC,aAAcC,EAAaC,gBAGfC,EAAexB,EAAgBxB,OAAO,CAClDyB,SAAS,EACTC,OAAO,EACPC,WAAW,EACXI,YAAaC,EAAYC,oBACzBC,gBAAiB,IACjBI,kBAAmB,GACnBH,gBAAiB,GACjBI,gBAAiB,EACjBC,oBAAoB,EACpBI,aAAa,EACbC,aAAcC,EAAaC,gBAGfE,EAAiBC,EAAelD,OAAO,CACnDmD,aAAc,EACdC,iBAAiB,EAChBC,oBAAoB,EACrBC,MAAOC,EAAaC,yBAGRC,EAAkBC,EAAS1D,OAAO,CAC9C2D,MAAOC,EAAMC,mBACbC,KAAMC,EAAKC,qBACXC,cAAeC,EAAQC,qBACvBC,aAAcF,EAAQG,gBAGVC,EAAyB,CACrCzE,KAAM,0BACN0E,QAASC,EACTC,WAAaC,GAA+D,GAA1BA,EAAOC,gBACzDC,KAAMC,EAAcC,eAAe,+tCA8FvBC,EAAiB,CAC7BlF,KAAM,iBACN0E,QAASC,EACTC,WAAaC,GAA+D,GAA1BA,EAAOC,gBACzDC,KAAMC,EAAcC,eAAe,0uCA+FvBE,EAAiB,CAC7BnF,KAAM,iBACN0E,QAASC,EACTC,WAAaC,GAA+D,GAA1BA,EAAOC,gBACzDC,KAAMC,EAAcC,eAAe,gjDAqHvBG,EAAyB,CACrCpF,KAAM,0BACN0E,QAASC,EACTC,WAAaC,GAA+D,GAA1BA,EAAOC,gBACzDC,KAAMC,EAAcC,eAAe,yuCA+FvBI,EAAiB,CAC7BrF,KAAM,iBACN0E,QAASC,EACTC,WAAaC,GAA+D,GAA1BA,EAAOC,gBACzDC,KAAMC,EAAcC,eAAe,wrCA4FvBK,EAAiB,CAC7BtF,KAAM,iBACN0E,QAASC,EACTC,WAAaC,GAA+D,GAA1BA,EAAOC,gBACzDC,KAAMC,EAAcC,eAAe,4kDC7lBvBM,EAAeC,EAA+D,CAC1FC,UAAW,kBACXC,GAAIC,EAASC,YAAY,QAGbC,EAAkBL,EAA+D,CAC7FC,UAAW,qBACXC,GAAIC,EAASC,YAAY,SAGbE,EAAeC,EAA0D,CACrFN,UAAW,eACXO,MAAO,gBACPC,aAAc,iDAGFC,EAAQC,EAA2D,CAC/EV,UAAW,QACXO,MAAO,WACPC,aAAc,oCAGFG,EAAcC,EAA0E,CACpGZ,UAAW,QACXa,OAAQ,CACP,CAAEC,MAAO,SAAUC,MAAO9C,EAAa+C,kBACvC,CAAEC,SAAUf,EAASC,YAAY,MAAOY,MAAO9C,EAAaiD,oBAC5D,CAAED,SAAUf,EAASC,YAAY,KAAMY,MAAO9C,EAAaC,2BAIhDiD,GAAwB,CACpCC,OAAQ,CACPC,EAAwD,CACvDrB,UAAW,QACXO,MAAO,oBACPC,aAAc,gDACdc,cAAgBlC,GAAqCmC,EAAWC,MAAM,CAACpC,EAAOqC,sBAAuBrC,EAAOsC,uBAC5GC,SAAWvC,GAAqCA,EAAOwC,aAAaC,eAErER,EAAwD,CACvDrB,UAAW,YACXO,MAAO,aACPC,aAAc,yCAEfa,EAAwD,CACvDrB,UAAW,UACXO,MAAO,WACPC,aAAc,yFACdc,cAAgBlC,GAAqCmC,EAAWC,MAAM,CAACpC,EAAOqC,sBAAuBrC,EAAOsC,yBAE7GI,EAA8D,CAC7D9B,UAAW,UACXO,MAAO,WACPC,aAAc,mEACdK,OAAQ,CACP,CAAEtG,KAAM,OAAQwG,MAAOxE,EAAQC,MAC/B,CAAEjC,KAAM,cAAewG,MAAOxE,EAAQwF,aACtC,CAAExH,KAAM,YAAawG,MAAOxE,EAAQyF,YAErCV,cAAgBlC,GAAqCmC,EAAWC,MAAM,CAACpC,EAAOqC,sBAAuBrC,EAAOsC,uBAC5GC,SAAWvC,GAAqCA,EAAOwC,aAAaK,cAErEC,EAAuD,CACtDlC,UAAW,kBACXO,MAAO,+BACPC,aAAc,oCACdc,cAAgBlC,GAAqCmC,EAAWC,MAAM,CAACpC,EAAOqC,sBAAuBrC,EAAOsC,uBAC5GC,SAAWvC,GAAqCA,EAAOwC,aAAaC,eAErEK,EAAuD,CACtDlC,UAAW,oBACXO,MAAO,sBACPC,aAAc,2BACdc,cAAgBlC,GAAqCmC,EAAWC,MAAM,CAACpC,EAAOqC,sBAAuBrC,EAAOsC,uBAC5GC,SAAWvC,GAAqCA,EAAOwC,aAAaC,eAErEK,EAAuD,CACtDlC,UAAW,kBACXO,MAAO,oBACPC,aAAc,sCAEf0B,EAAuD,CACtDlC,UAAW,2BACXO,MAAO,4BACPC,aAAc,oEACdc,cAAgBlC,GAAqCmC,EAAWC,MAAM,CAACpC,EAAOqC,sBAAuBrC,EAAOsC,uBAC5GC,SAAWvC,GAAqE,GAAhCA,EAAO+C,cAAchG,SAAmBiD,EAAOwC,aAAaK,cAE7GC,EAAuD,CACtDlC,UAAW,yBACXO,MAAO,4BACPC,aAAc,+DACdc,cAAgBlC,GAAqCmC,EAAWC,MAAM,CAACpC,EAAOqC,sBAAuBrC,EAAOsC,uBAC5GC,SAAWvC,GAAqE,GAAhCA,EAAO+C,cAAchG,SAAmBiD,EAAOwC,aAAaK,cAE7GC,EAAuD,CACtDlC,UAAW,kBACXO,MAAO,oBACPC,aAAc,uFACdc,cAAgBlC,GAAqCmC,EAAWC,MAAM,CAACpC,EAAOqC,sBAAuBrC,EAAOsC,uBAC5GC,SAAWvC,GAAqE,GAAhCA,EAAO+C,cAAchG,UAEtEkF,EAAwD,CACvDrB,UAAW,qBACXO,MAAO,0BACPC,aAAc,4CAEfa,EAAwD,CACvDrB,UAAW,qBACXO,MAAO,0BACPC,aAAc,wCACdc,cAAgBlC,GAAqCmC,EAAWC,MAAM,CAACpC,EAAOqC,sBAAuBrC,EAAOsC,uBAC5GC,SAAWvC,GAAqCA,EAAOwC,aAAaK,cAErEZ,EAAwD,CACvDrB,UAAW,qBACXO,MAAO,0BACPC,aAAc,sCACdc,cAAgBlC,GAAqCmC,EAAWC,MAAM,CAACpC,EAAOqC,sBAAuBrC,EAAOsC,uBAC5GC,SAAWvC,GAAqCA,EAAOwC,aAAaK,cAErEZ,EAAwD,CACvDrB,UAAW,qBACXO,MAAO,oBACPC,aAAc,gEACdc,cAAgBlC,GAAqCmC,EAAWC,MAAM,CAACpC,EAAOqC,sBAAuBrC,EAAOsC,uBAC5GC,SAAWvC,GAAqCA,EAAOwC,aAAaK,cAErEZ,EAAwD,CACvDrB,UAAW,cACXO,MAAO,eACPC,aAAc,sDACdc,cAAgBlC,GAAqCmC,EAAWC,MAAM,CAACpC,EAAOqC,sBAAuBrC,EAAOsC,uBAC5GC,SAAWvC,GAAqCA,EAAOwC,aAAaC,eAErEC,EAAkE,CACjE9B,UAAW,cACXO,MAAO,eACPM,OAAQ,CACP,CAAEtG,KAAM,QAASwG,MAAOrE,EAAY0F,iBACpC,CAAE7H,KAAM,aAAcwG,MAAOrE,EAAY2F,sBACzC,CAAE9H,KAAM,kBAAmBwG,MAAOrE,EAAYC,wBAGhDmF,EAAmE,CAClE9B,UAAW,eACXO,MAAO,gBACPC,aAAc,mHACdK,OAAQ,CACP,CAAEtG,KAAM,UAAWwG,MAAOvD,EAAaC,eACvC,CAAElD,KAAM,gBAAiBwG,MAAOvD,EAAa8E,cAC7C,CAAE/H,KAAM,mBAAoBwG,MAAOvD,EAAa+E,oBAGlDlB,EAAwD,CACvDrB,UAAW,oBACXO,MAAO,sBACPC,aAAc,kDAEfa,EAAwD,CACvDrB,UAAW,sBACXO,MAAO,wBACPC,aAAc,sDCjKV,MAAMgC,WAAqBC,EACjCC,YAAYC,EAAyBvD,GACpCwD,MAAMD,EAAYvD,EAAQ,CACzByD,SAAU,iBACVC,UAAW,UAEXC,YAAa,GAIbC,QAAS,CACRC,EAAKC,aACLD,EAAKE,YACLF,EAAKG,gBACLH,EAAKI,cACLJ,EAAKK,aACLL,EAAKM,cACLN,EAAKO,eACLP,EAAKQ,qBACLR,EAAKS,WAENC,cAAe,CACdC,EAAWC,sBACXD,EAAWE,sBAGZC,gBAAiBd,EAAKG,gBAEtBY,aAAc,CACbf,EAAKgB,WACLhB,EAAKiB,YACLjB,EAAKC,aACLD,EAAKE,YACLF,EAAKG,gBACLH,EAAKI,cACLJ,EAAKK,aACLL,EAAKM,cACLN,EAAKO,eACLP,EAAKQ,qBACLR,EAAKS,WAENS,mBAAqB/E,IAChB,IAAAgF,EAAQ,IAAIC,EAKT,OAJFjF,EAAOkF,uBAEHF,EAAAA,EAAMG,QAAQtB,EAAKI,cAAmD,EAApCjE,EAAOwC,aAAa4C,cAAoBC,IAE5E,CACNC,QAASN,EAAA,EAIXO,SAAU,CAETrF,KAAMsF,EAAuBtF,KAE7BuF,UAAWR,EAAMS,QAAQ,CACxB,CAAC7B,EAAKC,cAAe,KACrB,CAACD,EAAKE,aAAc,KACpB,CAACF,EAAKG,iBAAkB,EACxB,CAACH,EAAKI,eAAgB,KACtB,CAACJ,EAAKK,cAAe,IACrB,CAACL,EAAKM,eAAgB,KACtB,CAACN,EAAKO,gBAAiB,KACvB,CAACP,EAAKQ,sBAAuB,KAC7B,CAACR,EAAKS,WAAY,KAChB,CACF,CAACE,EAAWC,uBAAwB,KACpC,CAACD,EAAWE,sBAAuB,OAGpCiB,SAAUC,EAEVC,SAAUC,EAEVR,QAASS,EAAoB3K,KAE7B4K,YAAaC,EAEbC,UAAWC,EAAU7K,OAAO,CAC3B8K,cAAeC,EAAeC,uBAC9BC,kBAAkB,EAClBC,qBAAsBH,EAAeC,uBACrCG,WAAW,EACXC,mBAAmB,EACnBC,gBAAiBN,EAAeO,sBAChCC,uBAAuB,EACvBC,WAAW,EACXC,aAAcV,EAAeC,uBAC7BU,eAAgBX,EAAeC,yBAEhCW,WAAYC,EAAW5L,OAAO,CAC7B6L,gBAAgB,IAEjBC,gBAAiBC,EAAgB/L,OAAO,CACvCgM,iBAAiB,EACjBC,gBAAiBlB,EAAeC,yBAEjCkB,QAASC,EAAQnM,OAAO,CACvBoM,aAAa,EACbC,oBAAoB,EACpBC,QAAQ,EACRvK,aAAa,EACbwK,gBAAiBxB,EAAeO,sBAChCkB,WAAYzB,EAAeC,0BAK7ByB,iBAAkB,CACjBC,EACAC,EACAC,GAGDC,eAAgBC,GAEhBC,wBAAyB,GAEzBC,wBAAyB,GAGzBC,YAAa,CACZvG,OAAQ,CACPwG,EACAC,EACAC,EACAC,IAGFC,gBAAiB,CAEhBC,uBAAuB,GAGxBC,QAAS,CAERxD,QAAS,CACRyD,EACAhD,GAGD7F,KAAM,CACL8I,EACAC,EACAzD,EACA0D,EACAC,EACAC,KAIJ"}