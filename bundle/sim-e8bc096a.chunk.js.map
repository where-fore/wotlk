{"version":3,"file":"sim-e8bc096a.chunk.js","sources":["../../../ui/rogue/presets.ts","../../../ui/rogue/inputs.ts","../../../ui/rogue/sim.ts"],"sourcesContent":["import { BattleElixir, Flask } from '../core/proto/common.js';\nimport { Conjured } from '../core/proto/common.js';\nimport { Consumes } from '../core/proto/common.js';\n\nimport { EquipmentSpec } from '../core/proto/common.js';\nimport { Food } from '../core/proto/common.js';\nimport { Glyphs } from '../core/proto/common.js';\nimport { Player } from '../core/player.js';\nimport { Potions } from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tRogue_Rotation as RogueRotation,\n\tRogue_Options as RogueOptions,\n\tRogue_Options_PoisonImbue as Poison,\n\tRogueMajorGlyph,\n\tRogue_Rotation_Frequency,\n\tRogue_Rotation_AssassinationPriority,\n\tRogue_Rotation_CombatPriority,\n\tRogue_Rotation_SubtletyPriority,\n\tRogue,\n} from '../core/proto/rogue.js';\n\nimport * as Tooltips from '../core/constants/tooltips.js';\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const CombatTalents = {\n\tname: 'Combat',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '00532000523-0252051050035010223100501251',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: RogueMajorGlyph.GlyphOfKillingSpree,\n\t\t\tmajor2: RogueMajorGlyph.GlyphOfTricksOfTheTrade,\n\t\t\tmajor3: RogueMajorGlyph.GlyphOfRupture,\n\t\t})\n\t}),\n};\n\nexport const AssassinationTalents = {\n\tname: 'Assassination',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '005303104352100520103331051-005005003-502',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: RogueMajorGlyph.GlyphOfMutilate,\n\t\t\tmajor2: RogueMajorGlyph.GlyphOfTricksOfTheTrade,\n\t\t\tmajor3: RogueMajorGlyph.GlyphOfHungerForBlood,\n\t\t})\n\t}),\n};\n\nexport const SubtletyTalents = {\n\tname: 'Subtlety',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '30522300014--5020032030321121350115031151',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: RogueMajorGlyph.GlyphOfBackstab,\n\t\t\tmajor2: RogueMajorGlyph.GlyphOfEviscerate,\n\t\t\tmajor3: RogueMajorGlyph.GlyphOfShadowDance,\n\t\t})\n\t}),\n}\n\nexport const HemoSubtletyTalents = {\n\tname: 'Hemo Sub',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '30532000235--502003203032112135011503113',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: RogueMajorGlyph.GlyphOfHemorrhage,\n\t\t\tmajor2: RogueMajorGlyph.GlyphOfEviscerate,\n\t\t\tmajor3: RogueMajorGlyph.GlyphOfFeint,\n\t\t})\n\t}),\n}\n\nexport const DefaultRotation = RogueRotation.create({\n\texposeArmorFrequency: Rogue_Rotation_Frequency.Maintain,\n\tminimumComboPointsExposeArmor: 4,\n\ttricksOfTheTradeFrequency: Rogue_Rotation_Frequency.Maintain,\n\tassassinationFinisherPriority: Rogue_Rotation_AssassinationPriority.EnvenomRupture,\n\tcombatFinisherPriority: Rogue_Rotation_CombatPriority.RuptureEviscerate,\n\tsubtletyFinisherPriority: Rogue_Rotation_SubtletyPriority.SubtletyEviscerate,\n\tminimumComboPointsPrimaryFinisher: 3,\n\tminimumComboPointsSecondaryFinisher: 2,\n\tenvenomEnergyThreshold: 85,\n\tenvenomEnergyThresholdOverkill: 75,\n\tenvenomEnergyThresholdMin: 60,\n\tenvenomEnergyThresholdOverkillMin: 40,\n\themoWithDagger: false,\n});\n\nexport const DefaultOptions = RogueOptions.create({\n\tmhImbue: Poison.DeadlyPoison,\n\tohImbue: Poison.InstantPoison,\n\tapplyPoisonsManually: false,\n\tstartingOverkillDuration: 18,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tdefaultPotion: Potions.PotionOfSpeed,\n\tprepopPotion: Potions.PotionOfSpeed,\n\tdefaultConjured: Conjured.ConjuredRogueThistleTea,\n\tflask: Flask.FlaskOfEndlessRage,\n\tfood: Food.FoodMegaMammothMeal,\n});\n\nexport const P2_PRESET_ASSASSINATION = {\n\tname: 'P2 Assassination',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<any>) => player.getTalentTree() == 0,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n\t\t{\n\t\t\t\"id\": 46125,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t  41398,\n\t\t\t  39999\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45517,\n\t\t\t\"gems\": [\n\t\t\t  39999\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45245,\n\t\t\t\"enchant\": 3808,\n\t\t\t\"gems\": [\n\t\t\t  39999,\n\t\t\t  39999\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45461,\n\t\t\t\"enchant\": 3605,\n\t\t\t\"gems\": [\n\t\t\t  40053\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45473,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t  40053,\n\t\t\t  42702,\n\t\t\t  39999\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45611,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t  40053,\n\t\t\t  0\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46124,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t  40003,\n\t\t\t  0\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46095,\n\t\t\t\"enchant\": 3599,\n\t\t\t\"gems\": [\n\t\t\t  39999,\n\t\t\t  39999,\n\t\t\t  39999\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45536,\n\t\t\t\"enchant\": 3823,\n\t\t\t\"gems\": [\n\t\t\t  39999,\n\t\t\t  39999,\n\t\t\t  39999\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45564,\n\t\t\t\"enchant\": 3606,\n\t\t\t\"gems\": [\n\t\t\t  39999,\n\t\t\t  39999\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45608,\n\t\t\t\"gems\": [\n\t\t\t  39999\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45456,\n\t\t\t\"gems\": [\n\t\t\t  39999\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45609\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46038\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45484,\n\t\t\t\"enchant\": 3789,\n\t\t\t\"gems\": [\n\t\t\t  40003\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45484,\n\t\t\t\"enchant\": 3789,\n\t\t\t\"gems\": [\n\t\t\t  40003\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45570,\n\t\t\t\"enchant\": 3608\n\t\t  }\n\t]}`),\n};\n\nexport const P2_PRESET_COMBAT = {\n\tname: 'P2 Combat',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<any>) => player.getTalentTree() == 1,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n\t\t{\n\t\t\t\"id\": 46125,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t  41398,\n\t\t\t  39999\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45517,\n\t\t\t\"gems\": [\n\t\t\t  39999\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46127,\n\t\t\t\"enchant\": 3808,\n\t\t\t\"gems\": [\n\t\t\t  39999\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45461,\n\t\t\t\"enchant\": 3605,\n\t\t\t\"gems\": [\n\t\t\t  40053\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45473,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t  40053,\n\t\t\t  42702,\n\t\t\t  39999\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45611,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t  40044,\n\t\t\t  0\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46043,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t  39999,\n\t\t\t  40053,\n\t\t\t  0\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46095,\n\t\t\t\"enchant\": 3599,\n\t\t\t\"gems\": [\n\t\t\t  39999,\n\t\t\t  39999,\n\t\t\t  39999\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45536,\n\t\t\t\"enchant\": 3823,\n\t\t\t\"gems\": [\n\t\t\t  39999,\n\t\t\t  39999,\n\t\t\t  39999\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45564,\n\t\t\t\"enchant\": 3606,\n\t\t\t\"gems\": [\n\t\t\t  39999,\n\t\t\t  39999\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45608,\n\t\t\t\"gems\": [\n\t\t\t  39999\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 46048,\n\t\t\t\"gems\": [\n\t\t\t  39999\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45609\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45931\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45132,\n\t\t\t\"enchant\": 3789,\n\t\t\t\"gems\": [\n\t\t\t  40053\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45484,\n\t\t\t\"enchant\": 3789,\n\t\t\t\"gems\": [\n\t\t\t  40003\n\t\t\t]\n\t\t  },\n\t\t  {\n\t\t\t\"id\": 45296,\n\t\t\t\"gems\": [\n\t\t\t  40053\n\t\t\t]\n\t\t  }\n\t]}`),\n};\n\nexport const PRERAID_PRESET_ASSASSINATION = {\n\tname: 'Pre-Raid Assassination',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<any>) => player.getTalentTree() == 0,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n\t\t{\n\t\t\t\"id\": 42550,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t\t41398,\n\t\t\t\t40058\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40678\n\t\t},\n\t\t{\n\t\t\t\"id\": 43481,\n\t\t\t\"enchant\": 3808\n\t\t},\n\t\t{\n\t\t\t\"id\": 38614,\n\t\t\t\"enchant\": 3605\n\t\t},\n\t\t{\n\t\t\t\"id\": 39558,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t\t40003,\n\t\t\t\t42702\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 34448,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t\t40003,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 39560,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t40058,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40694,\n\t\t\t\"gems\": [\n\t\t\t\t40003,\n\t\t\t\t40003\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 37644,\n\t\t\t\"enchant\": 3823\n\t\t},\n\t\t{\n\t\t\t\"id\": 34575,\n\t\t\t\"enchant\": 3606,\n\t\t\t\"gems\": [\n\t\t\t\t40003\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40586\n\t\t},\n\t\t{\n\t\t\t\"id\": 37642\n\t\t},\n\t\t{\n\t\t\t\"id\": 40684\n\t\t},\n\t\t{\n\t\t\t\"id\": 44253\n\t\t},\n\t\t{\n\t\t\t\"id\": 37856,\n\t\t\t\"enchant\": 3789\n\t\t},\n\t\t{\n\t\t\t\"id\": 37667,\n\t\t\t\"enchant\": 3789\n\t\t},\n\t\t{\n\t\t\t\"id\": 43612\n\t\t}\n  ]}`),\n};\n\nexport const PRERAID_PRESET_COMBAT = {\n\tname: 'Pre-Raid Combat',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<any>) => player.getTalentTree() == 1,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n\t\t{\n\t\t\t\"id\": 42550,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t\t41398,\n\t\t\t\t40014\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40678\n\t\t},\n\t\t{\n\t\t\t\"id\": 37139,\n\t\t\t\"enchant\": 3808,\n\t\t\t\"gems\": [\n\t\t\t\t39999\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 34241,\n\t\t\t\"enchant\": 3605,\n\t\t\t\"gems\": [\n\t\t\t\t40014\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 39558,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t\t39999,\n\t\t\t\t40014\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 34448,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t\t39999,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 39560,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t40014,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40694,\n\t\t\t\"gems\": [\n\t\t\t\t42702,\n\t\t\t\t39999\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 37644,\n\t\t\t\"enchant\": 3823\n\t\t},\n\t\t{\n\t\t\t\"id\": 34575,\n\t\t\t\"enchant\": 3606,\n\t\t\t\"gems\": [\n\t\t\t\t39999\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40586\n\t\t},\n\t\t{\n\t\t\t\"id\": 37642\n\t\t},\n\t\t{\n\t\t\t\"id\": 40684\n\t\t},\n\t\t{\n\t\t\t\"id\": 44253\n\t\t},\n\t\t{\n\t\t\t\"id\": 37693,\n\t\t\t\"enchant\": 3789\n\t\t},\n\t\t{\n\t\t\t\"id\": 37856,\n\t\t\t\"enchant\": 3789\n\t\t},\n\t\t{\n\t\t\t\"id\": 44504,\n\t\t\t\"gems\": [\n\t\t\t\t40053\n\t\t\t]\n\t\t}\n  ]}`),\n}\n\nexport const P1_PRESET_ASSASSINATION = {\n\tname: 'P1 Assassination',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<any>) => player.getTalentTree() == 0,\n\tgear: EquipmentSpec.fromJsonString(`{ \"items\": [\n\t\t{\n\t\t\t\"id\": 40499,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t\t41398,\n\t\t\t\t42702\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44664,\n\t\t\t\"gems\": [\n\t\t\t\t40003\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40502,\n\t\t\t\"enchant\": 3808,\n\t\t\t\"gems\": [\n\t\t\t\t40003\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40403,\n\t\t\t\"enchant\": 3605\n\t\t},\n\t\t{\n\t\t\t\"id\": 40539,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t\t40003\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 39765,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t\t40003,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40496,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t40053,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40260,\n\t\t\t\"gems\": [\n\t\t\t\t39999\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40500,\n\t\t\t\"enchant\": 3823,\n\t\t\t\"gems\": [\n\t\t\t\t40003,\n\t\t\t\t40003\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 39701,\n\t\t\t\"enchant\": 3606\n\t\t},\n\t\t{\n\t\t\t\"id\": 40074\n\t\t},\n\t\t{\n\t\t\t\"id\": 40474\n\t\t},\n\t\t{\n\t\t\t\"id\": 40684\n\t\t},\n\t\t{\n\t\t\t\"id\": 44253\n\t\t},\n\t\t{\n\t\t\t\"id\": 39714,\n\t\t\t\"enchant\": 3789\n\t\t},\n\t\t{\n\t\t\t\"id\": 40386,\n\t\t\t\"enchant\": 3789\n\t\t},\n\t\t{\n\t\t\t\"id\": 40385\n\t\t}\n  ]}`),\n}\n\nexport const P1_PRESET_COMBAT = {\n\tname: 'P1 Combat',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tenableWhen: (player: Player<any>) => player.getTalentTree() == 1,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n\t\t{\n\t\t\t\"id\": 40499,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t\t41398,\n\t\t\t\t42702\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44664,\n\t\t\t\"gems\": [\n\t\t\t\t39999\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40502,\n\t\t\t\"enchant\": 3808,\n\t\t\t\"gems\": [\n\t\t\t\t39999\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40403,\n\t\t\t\"enchant\": 3605\n\t\t},\n\t\t{\n\t\t\t\"id\": 40539,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t\t39999\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 39765,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t\t39999,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40541,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40205,\n\t\t\t\"gems\": [\n\t\t\t\t39999\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44011,\n\t\t\t\"enchant\": 3823,\n\t\t\t\"gems\": [\n\t\t\t\t39999,\n\t\t\t\t39999\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 39701,\n\t\t\t\"enchant\": 3606\n\t\t},\n\t\t{\n\t\t\t\"id\": 40074\n\t\t},\n\t\t{\n\t\t\t\"id\": 40474\n\t\t},\n\t\t{\n\t\t\t\"id\": 40684\n\t\t},\n\t\t{\n\t\t\t\"id\": 44253\n\t\t},\n\t\t{\n\t\t\t\"id\": 40383,\n\t\t\t\"enchant\": 3789\n\t\t},\n\t\t{\n\t\t\t\"id\": 39714,\n\t\t\t\"enchant\": 3789\n\t\t},\n\t\t{\n\t\t\t\"id\": 40385\n\t\t}\n  ]}`),\n}\n","import { Spec } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\nimport {\n\tRogue_Rotation_AssassinationPriority as AssassinationPriority,\n\tRogue_Rotation_CombatPriority as CombatPriority,\n\tRogue_Rotation_SubtletyPriority as SubtletyPriority,\n\tRogue_Rotation_Frequency as Frequency,\n\tRogue_Options_PoisonImbue as Poison,\n} from '../core/proto/rogue.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const MainHandImbue = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecRogue, Poison>({\n\tfieldName: 'mhImbue',\n\tnumColumns: 1,\n\tvalues: [\n\t\t{ value: Poison.NoPoison, tooltip: 'No Main Hand Poison' },\n\t\t{ actionId: ActionId.fromItemId(43233), value: Poison.DeadlyPoison },\n\t\t{ actionId: ActionId.fromItemId(43231), value: Poison.InstantPoison },\n\t\t{ actionId: ActionId.fromItemId(43235), value: Poison.WoundPoison },\n\t],\n});\n\nexport const OffHandImbue = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecRogue, Poison>({\n\tfieldName: 'ohImbue',\n\tnumColumns: 1,\n\tvalues: [\n\t\t{ value: Poison.NoPoison, tooltip: 'No Off Hand Poison' },\n\t\t{ actionId: ActionId.fromItemId(43233), value: Poison.DeadlyPoison },\n\t\t{ actionId: ActionId.fromItemId(43231), value: Poison.InstantPoison },\n\t\t{ actionId: ActionId.fromItemId(43235), value: Poison.WoundPoison },\n\t],\n});\n\nexport const StartingOverkillDuration = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecRogue>({\n\tfieldName: 'startingOverkillDuration',\n\tlabel: 'Starting Overkill duration',\n\tlabelTooltip: 'Initial Overkill buff duration at the start of each iteration.',\n});\n\nexport const ApplyPoisonsManually = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecRogue>({\n\tfieldName: 'applyPoisonsManually',\n\tlabel: 'Configure poisons manually',\n\tlabelTooltip: 'Prevent automatic poison configuration that is based on equipped weapons.',\n});\n\nexport const RogueRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecRogue, Frequency>({\n\t\t\tfieldName: 'exposeArmorFrequency',\n\t\t\tlabel: 'Expose Armor',\n\t\t\tlabelTooltip: 'Frequency of Expose Armor casts.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Never', value: Frequency.Never },\n\t\t\t\t{ name: 'Cast Once', value: Frequency.Once },\n\t\t\t\t{ name: 'Maintain', value: Frequency.Maintain },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'minimumComboPointsExposeArmor',\n\t\t\tlabel: 'Minimum CP (Expose Armor)',\n\t\t\tlabelTooltip: 'Minimum number of combo points for Expose Armor when only cast once.',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getRotation().exposeArmorFrequency == Frequency.Once,\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecRogue, Frequency>({\n\t\t\tfieldName: 'tricksOfTheTradeFrequency',\n\t\t\tlabel: 'Tricks of the Trade',\n\t\t\tlabelTooltip: 'Frequency of Tricks of the Trade usage.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Never', value: Frequency.Never },\n\t\t\t\t{ name: 'Maintain', value: Frequency.Maintain },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecRogue, AssassinationPriority>({\n\t\t\tfieldName: 'assassinationFinisherPriority',\n\t\t\tlabel: 'Finisher Priority',\n\t\t\tlabelTooltip: 'The finisher that will be cast with highest priority.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Rupture', value: AssassinationPriority.RuptureEnvenom },\n\t\t\t\t{ name: 'Envenom', value: AssassinationPriority.EnvenomRupture },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().mutilate\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecRogue, SubtletyPriority>({\n\t\t\tfieldName: 'subtletyFinisherPriority',\n\t\t\tlabel: \"Finisher Priority\",\n\t\t\tlabelTooltip: 'The finisher that will be cast with highest priority.',\n\t\t\tvalues: [\n\t\t\t\t{ name: \"Eviscerate\", value: SubtletyPriority.SubtletyEviscerate },\n\t\t\t\t{ name: \"Envenom\", value: SubtletyPriority.SubtletyEnvenom },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().honorAmongThieves > 0\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'envenomEnergyThreshold',\n\t\t\tlabel: 'Energy Threshold (4cp Envenom)',\n\t\t\tlabelTooltip: 'Amount of total energy to pool before casting a 4 point Envenom.',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().mutilate\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'envenomEnergyThresholdOverkill',\n\t\t\tlabel: 'Energy Threshold (4cp Envenom w/ Overkill)',\n\t\t\tlabelTooltip: 'Amount of total energy to pool before casting a 4 point Envenom.',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().mutilate\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'envenomEnergyThresholdMin',\n\t\t\tlabel: 'Energy Threshold (5cp Envenom)',\n\t\t\tlabelTooltip: 'Amount of total energy to pool before casting a 5 point Envenom.',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().mutilate\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'envenomEnergyThresholdOverkillMin',\n\t\t\tlabel: 'Energy Threshold (5cp Envenom w/ Overkill)',\n\t\t\tlabelTooltip: 'Amount of total energy to pool before casting a 4 point Envenom.',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().mutilate\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecRogue, Frequency>({\n\t\t\tfieldName: 'multiTargetSliceFrequency',\n\t\t\tlabel: 'Multi-Target S&D',\n\t\t\tlabelTooltip: 'Frequency of Slice and Dice cast in multi-target scnearios.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Never', value: Frequency.Never },\n\t\t\t\t{ name: 'Once', value: Frequency.Once },\n\t\t\t\t{ name: 'Maintain', value: Frequency.Maintain },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getRotation().multiTargetSliceFrequency != Frequency.FrequencyUnknown\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'minimumComboPointsMultiTargetSlice',\n\t\t\tlabel: 'Minimum CP (Slice)',\n\t\t\tlabelTooltip: 'Minimum number of combo points spent if Slice and Dice has frequency: Once',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getRotation().multiTargetSliceFrequency == Frequency.Once\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'hemoWithDagger',\n\t\t\tlabel: 'Hemorrhage with Dagger',\n\t\t\tlabelTooltip: 'Use Hemorrhage with Dagger in mainhand',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().hemorrhage\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'openWithGarrote',\n\t\t\tlabel: 'Open with Garrote',\n\t\t\tlabelTooltip: 'Open the encounter by casting Garrote.',\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'openWithShadowstep',\n\t\t\tlabel: 'Open with Shadowstep',\n\t\t\tlabelTooltip: 'Open the encounter by casting Shadowstep.',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().shadowstep\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'openWithPremeditation',\n\t\t\tlabel: 'Open with Premeditation',\n\t\t\tlabelTooltip: 'Open the encounter by casting Premeditation.',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().premeditation\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'useFeint',\n\t\t\tlabel: 'Use Feint',\n\t\t\tlabelTooltip: 'Cast Feint on cooldown. Mainly useful when using the associate glyph.'\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecRogue>({\n\t\t\tfieldName: \"useGhostlyStrike\",\n\t\t\tlabel: 'Use Ghostly Strike',\n\t\t\tlabelTooltip: 'Use Ghostly Strike as a builder.',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().ghostlyStrike\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'ruptureForBleed',\n\t\t\tlabel: 'Rupture for Bleed',\n\t\t\tlabelTooltip: 'Cast Rupture as needed to apply a bleed effect for Hunger for Blood',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().hungerForBlood\n\t\t}),\n\t],\n};\n","import { RaidBuffs, WeaponType } from '../core/proto/common.js';\nimport { PartyBuffs } from '../core/proto/common.js';\nimport { IndividualBuffs } from '../core/proto/common.js';\nimport { Debuffs } from '../core/proto/common.js';\nimport { ItemSlot } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Stat, PseudoStat } from '../core/proto/common.js';\nimport { TristateEffect } from '../core/proto/common.js'\nimport { Player } from '../core/player.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\n\nimport {\n\tRogue_Rotation_AssassinationPriority as AssassinationPriority,\n\tRogue_Rotation_CombatPriority as CombatPriority,\n\tRogue_Rotation_SubtletyPriority as SubtletyPriority,\n\tRogue_Rotation_Frequency as Frequency,\n\tRogueMajorGlyph,\n\tRogue_Options_PoisonImbue,\n} from '../core/proto/rogue.js';\n\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as Mechanics from '../core/constants/mechanics.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Tooltips from '../core/constants/tooltips.js';\n\nimport * as RogueInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nexport class RogueSimUI extends IndividualSimUI<Spec.SpecRogue> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecRogue>) {\n\t\tsuper(parentElem, player, {\n\t\t\tcssClass: 'rogue-sim-ui',\n\t\t\tcssScheme: 'rogue',\n\t\t\t// List any known bugs / issues here and they'll be shown on the site.\n\t\t\tknownIssues: [\n\t\t\t\t'Rotations are not fully optimized, especially for non-standard setups.',\n\t\t\t\t'Subtlety specs are not currently supported.'\n\t\t\t],\n\t\t\twarnings: [\n\t\t\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tupdateOn: simUI.sim.encounter.changeEmitter,\n\t\t\t\t\t\tgetContent: () => {\n\t\t\t\t\t\t\tvar hasNoArmor = false\n\t\t\t\t\t\t\tfor (const target of simUI.sim.encounter.getTargets()) {\n\t\t\t\t\t\t\t\tif (target.getStats().getStat(Stat.StatArmor) <= 0) {\n\t\t\t\t\t\t\t\t\thasNoArmor = true\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (hasNoArmor) {\n\t\t\t\t\t\t\t\treturn 'One or more targets have no armor! Check advanced encounter settings.';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tupdateOn: simUI.player.changeEmitter,\n\t\t\t\t\t\tgetContent: () => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tsimUI.player.getTalents().mutilate &&\n\t\t\t\t\t\t\t\t(simUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponType != WeaponType.WeaponTypeDagger ||\n\t\t\t\t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponType != WeaponType.WeaponTypeDagger)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treturn '\\'Mutilate\\' talent selected, but daggers not equipped in both hands!';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tupdateOn: simUI.player.changeEmitter,\n\t\t\t\t\t\tgetContent: () => {\n\t\t\t\t\t\t\tif (simUI.player.getRotation().useFeint && !simUI.player.getMajorGlyphs().includes(RogueMajorGlyph.GlyphOfFeint)) {\n\t\t\t\t\t\t\t\treturn '\\'Use Feint\\' selected, but missing Glyph of Feint!';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tupdateOn: simUI.player.changeEmitter,\n\t\t\t\t\t\tgetContent: () => {\n\t\t\t\t\t\t\tconst mhWeaponSpeed = simUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponSpeed;\n\t\t\t\t\t\t\tconst ohWeaponSpeed = simUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponSpeed;\n\t\t\t\t\t\t\tconst mhImbue = simUI.player.getSpecOptions().mhImbue;\n\t\t\t\t\t\t\tconst ohImbue = simUI.player.getSpecOptions().ohImbue;\n\t\t\t\t\t\t\tif (typeof mhWeaponSpeed == 'undefined' || typeof ohWeaponSpeed == 'undefined' || !simUI.player.getSpecOptions().applyPoisonsManually) {\n\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((mhWeaponSpeed < ohWeaponSpeed) && (ohImbue == Rogue_Options_PoisonImbue.DeadlyPoison)) {\n\t\t\t\t\t\t\t\treturn 'Deadly poison applied to slower (off hand) weapon!';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ((ohWeaponSpeed < mhWeaponSpeed) && (mhImbue == Rogue_Options_PoisonImbue.DeadlyPoison)) {\n\t\t\t\t\t\t\t\treturn 'Deadly poison applied to slower (main hand) weapon!';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t],\n\n\t\t\t// All stats for which EP should be calculated.\n\t\t\tepStats: [\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatExpertise,\n\t\t\t],\n\t\t\tepPseudoStats: [\n\t\t\t\tPseudoStat.PseudoStatMainHandDps,\n\t\t\t\tPseudoStat.PseudoStatOffHandDps,\n\t\t\t],\n\t\t\t// Reference stat against which to calculate EP.\n\t\t\tepReferenceStat: Stat.StatAttackPower,\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\t\t\tdisplayStats: [\n\t\t\t\tStat.StatHealth,\n\t\t\t\tStat.StatStamina,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatExpertise,\n\t\t\t],\n\n\t\t\tdefaults: {\n\t\t\t\t// Default equipped gear.\n\t\t\t\tgear: Presets.PRERAID_PRESET_ASSASSINATION.gear,\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\n\t\t\t\tepWeights: Stats.fromMap({\n\t\t\t\t\t[Stat.StatAgility]: 1.86,\n\t\t\t\t\t[Stat.StatStrength]: 1.14,\n\t\t\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t\t\t[Stat.StatSpellCrit] : 0.28,\n\t\t\t\t\t[Stat.StatSpellHit] : 0.08,\n\t\t\t\t\t[Stat.StatMeleeHit]: 1.39,\n\t\t\t\t\t[Stat.StatMeleeCrit]: 1.32,\n\t\t\t\t\t[Stat.StatMeleeHaste]: 1.48,\n\t\t\t\t\t[Stat.StatArmorPenetration]: 0.84,\n\t\t\t\t\t[Stat.StatExpertise]: 0.98,\n\t\t\t\t}, {\n\t\t\t\t\t[PseudoStat.PseudoStatMainHandDps]: 2.94,\n\t\t\t\t\t[PseudoStat.PseudoStatOffHandDps]: 2.45,\n\t\t\t\t}),\n\t\t\t\t// Default consumes settings.\n\t\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\t\t// Default rotation settings.\n\t\t\t\trotation: Presets.DefaultRotation,\n\t\t\t\t// Default talents.\n\t\t\t\ttalents: Presets.AssassinationTalents.data,\n\t\t\t\t// Default spec-specific settings.\n\t\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\t\t// Default raid/party buffs settings.\n\t\t\t\traidBuffs: RaidBuffs.create({\n\t\t\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tbloodlust: true,\n\t\t\t\t\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\t\t\t\t\ticyTalons: true,\n\t\t\t\t\tleaderOfThePack: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tabominationsMight: true,\n\t\t\t\t\tswiftRetribution: true,\n\t\t\t\t\telementalOath: true,\n\t\t\t\t\tsanctifiedRetribution: true,\n\t\t\t\t}),\n\t\t\t\tpartyBuffs: PartyBuffs.create({\n\t\t\t\t}),\n\t\t\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\t\t\tblessingOfKings: true,\n\t\t\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t\t\t}),\n\t\t\t\tdebuffs: Debuffs.create({\n\t\t\t\t\theartOfTheCrusader: true,\n\t\t\t\t\tmangle: true,\n\t\t\t\t\tsunderArmor: true,\n\t\t\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tshadowMastery: true,\n\t\t\t\t\tearthAndMoon: true,\n\t\t\t\t\tbloodFrenzy: true,\n\t\t\t\t}),\n\t\t\t},\n\n\t\t\tplayerInputs: {\n\t\t\t\tinputs: [\n\t\t\t\t\tRogueInputs.ApplyPoisonsManually\n\t\t\t\t]\n\t\t\t},\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\n\t\t\tplayerIconInputs: [\n\t\t\t\tRogueInputs.MainHandImbue,\n\t\t\t\tRogueInputs.OffHandImbue,\n\t\t\t],\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\n\t\t\trotationInputs: RogueInputs.RogueRotationConfig,\n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\t\t\tincludeBuffDebuffInputs: [\n\t\t\t\tIconInputs.SpellCritBuff,\n\t\t\t\tIconInputs.SpellCritDebuff,\n\t\t\t\tIconInputs.SpellHitDebuff,\n\t\t\t\tIconInputs.SpellDamageDebuff\n\t\t\t],\n\t\t\texcludeBuffDebuffInputs: [\n\t\t\t],\n\t\t\t// Inputs to include in the 'Other' section on the settings tab.\n\t\t\totherInputs: {\n\t\t\t\tinputs: [\n\t\t\t\t\tRogueInputs.StartingOverkillDuration,\n\t\t\t\t\tOtherInputs.TankAssignment,\n\t\t\t\t\tOtherInputs.InFrontOfTarget,\n\t\t\t\t],\n\t\t\t},\n\t\t\tencounterPicker: {\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\t\t\tshowExecuteProportion: false,\n\t\t\t},\n\n\t\t\tpresets: {\n\t\t\t\t// Preset talents that the user can quickly select.\n\t\t\t\ttalents: [\n\t\t\t\t\tPresets.AssassinationTalents,\n\t\t\t\t\tPresets.CombatTalents,\n\t\t\t\t\tPresets.SubtletyTalents,\n\t\t\t\t\tPresets.HemoSubtletyTalents,\n\t\t\t\t],\n\t\t\t\t// Preset gear configurations that the user can quickly select.\n\t\t\t\tgear: [\n\t\t\t\t\tPresets.PRERAID_PRESET_ASSASSINATION,\n\t\t\t\t\tPresets.PRERAID_PRESET_COMBAT,\n\t\t\t\t\tPresets.P1_PRESET_ASSASSINATION,\n\t\t\t\t\tPresets.P1_PRESET_COMBAT,\n\t\t\t\t\tPresets.P2_PRESET_ASSASSINATION,\n\t\t\t\t\tPresets.P2_PRESET_COMBAT,\n\t\t\t\t],\n\t\t\t},\n\t\t})\n\t\tthis.player.changeEmitter.on((c) => {\n\t\t\tconst rotation = this.player.getRotation()\n\t\t\tconst options = this.player.getSpecOptions()\n\t\t\tconst encounter = this.sim.encounter\n\t\t\tif (this.player.getTalentTree() == 0) {\n\t\t\t\tif (rotation.assassinationFinisherPriority == AssassinationPriority.AssassinationPriorityUnknown) {\n\t\t\t\t\trotation.assassinationFinisherPriority = Presets.DefaultRotation.assassinationFinisherPriority;\n\t\t\t\t}\n\t\t\t\trotation.combatFinisherPriority = CombatPriority.CombatPriorityUnknown;\n\t\t\t} else if (this.player.getTalentTree() == 1) {\n\t\t\t\trotation.assassinationFinisherPriority = AssassinationPriority.AssassinationPriorityUnknown;\n\t\t\t\tif (rotation.combatFinisherPriority == CombatPriority.CombatPriorityUnknown) {\n\t\t\t\t\trotation.combatFinisherPriority = Presets.DefaultRotation.combatFinisherPriority;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trotation.combatFinisherPriority = CombatPriority.CombatPriorityUnknown;\n\t\t\t\tif (rotation.subtletyFinisherPriority == SubtletyPriority.SubtletyPriorityUnknown) {\n\t\t\t\t\trotation.subtletyFinisherPriority = Presets.DefaultRotation.subtletyFinisherPriority;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (rotation.envenomEnergyThreshold == 0) {\n\t\t\t\trotation.envenomEnergyThreshold == Presets.DefaultRotation.envenomEnergyThreshold\n\t\t\t}\n\t\t\tif (rotation.envenomEnergyThresholdOverkill == 0) {\n\t\t\t\trotation.envenomEnergyThresholdOverkill == Presets.DefaultRotation.envenomEnergyThresholdOverkill\n\t\t\t}\n\t\t\tif (rotation.envenomEnergyThresholdMin == 0) {\n\t\t\t\trotation.envenomEnergyThresholdMin == Presets.DefaultRotation.envenomEnergyThresholdMin\n\t\t\t}\n\t\t\tif (rotation.envenomEnergyThresholdOverkillMin == 0) {\n\t\t\t\trotation.envenomEnergyThresholdOverkillMin == Presets.DefaultRotation.envenomEnergyThresholdOverkillMin\n\t\t\t}\n\t\t\tthis.player.setRotation(c, rotation)\n\t\t\tif (!options.applyPoisonsManually) {\n\t\t\t\tconst mhWeaponSpeed = this.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponSpeed;\n\t\t\t\tconst ohWeaponSpeed = this.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponSpeed;\n\t\t\t\tif (typeof mhWeaponSpeed == 'undefined' || typeof ohWeaponSpeed == 'undefined') {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif (encounter.getNumTargets() > 3) {\n\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t} else {\n\t\t\t\t\tif (mhWeaponSpeed <= ohWeaponSpeed) { \n\t\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.DeadlyPoison \n\t\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\t} else {\n\t\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.DeadlyPoison\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.player.setSpecOptions(c, options)\n\t\t});\n\t\tthis.sim.encounter.changeEmitter.on((c) => {\n\t\t\tconst rotation = this.player.getRotation()\n\t\t\tconst options = this.player.getSpecOptions()\n\t\t\tconst encounter = this.sim.encounter\n\t\t\tif (this.sim.encounter.getNumTargets() > 3) {\n\t\t\t\tif (rotation.multiTargetSliceFrequency == Frequency.FrequencyUnknown) {\n\t\t\t\t\trotation.multiTargetSliceFrequency = Presets.DefaultRotation.multiTargetSliceFrequency;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trotation.multiTargetSliceFrequency = Frequency.FrequencyUnknown;\n\t\t\t}\n\t\t\tthis.player.setRotation(c, rotation)\n\t\t\tif (!options.applyPoisonsManually) {\n\t\t\t\tconst mhWeaponSpeed = this.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponSpeed;\n\t\t\t\tconst ohWeaponSpeed = this.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponSpeed;\n\t\t\t\tif (typeof mhWeaponSpeed == 'undefined' || typeof ohWeaponSpeed == 'undefined') {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif (encounter.getNumTargets() > 3) {\n\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t} else {\n\t\t\t\t\tif (mhWeaponSpeed <= ohWeaponSpeed) { \n\t\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.DeadlyPoison \n\t\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\t} else {\n\t\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.DeadlyPoison\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.player.setSpecOptions(c, options)\n\t\t});\n\t}\n}\n"],"names":["CombatTalents","name","data","SavedTalents","create","talentsString","glyphs","Glyphs","major1","RogueMajorGlyph","GlyphOfKillingSpree","major2","GlyphOfTricksOfTheTrade","major3","GlyphOfRupture","AssassinationTalents","GlyphOfMutilate","GlyphOfHungerForBlood","SubtletyTalents","GlyphOfBackstab","GlyphOfEviscerate","GlyphOfShadowDance","HemoSubtletyTalents","GlyphOfHemorrhage","GlyphOfFeint","DefaultRotation","RogueRotation","exposeArmorFrequency","Rogue_Rotation_Frequency","Maintain","minimumComboPointsExposeArmor","tricksOfTheTradeFrequency","assassinationFinisherPriority","Rogue_Rotation_AssassinationPriority","EnvenomRupture","combatFinisherPriority","Rogue_Rotation_CombatPriority","RuptureEviscerate","subtletyFinisherPriority","Rogue_Rotation_SubtletyPriority","SubtletyEviscerate","minimumComboPointsPrimaryFinisher","minimumComboPointsSecondaryFinisher","envenomEnergyThreshold","envenomEnergyThresholdOverkill","envenomEnergyThresholdMin","envenomEnergyThresholdOverkillMin","hemoWithDagger","DefaultOptions","RogueOptions","mhImbue","Poison","DeadlyPoison","ohImbue","InstantPoison","applyPoisonsManually","startingOverkillDuration","DefaultConsumes","Consumes","defaultPotion","Potions","PotionOfSpeed","prepopPotion","defaultConjured","Conjured","ConjuredRogueThistleTea","flask","Flask","FlaskOfEndlessRage","food","Food","FoodMegaMammothMeal","P2_PRESET_ASSASSINATION","tooltip","Tooltips.BASIC_BIS_DISCLAIMER","enableWhen","player","getTalentTree","gear","EquipmentSpec","fromJsonString","P2_PRESET_COMBAT","PRERAID_PRESET_ASSASSINATION","PRERAID_PRESET_COMBAT","P1_PRESET_ASSASSINATION","P1_PRESET_COMBAT","MainHandImbue","InputHelpers.makeSpecOptionsEnumIconInput","fieldName","numColumns","values","value","NoPoison","actionId","ActionId","fromItemId","WoundPoison","OffHandImbue","StartingOverkillDuration","InputHelpers.makeSpecOptionsNumberInput","label","labelTooltip","ApplyPoisonsManually","InputHelpers.makeSpecOptionsBooleanInput","RogueRotationConfig","inputs","InputHelpers.makeRotationEnumInput","Frequency","Never","Once","InputHelpers.makeRotationNumberInput","showWhen","getRotation","AssassinationPriority","RuptureEnvenom","getTalents","mutilate","SubtletyPriority","SubtletyEnvenom","honorAmongThieves","multiTargetSliceFrequency","FrequencyUnknown","InputHelpers.makeRotationBooleanInput","hemorrhage","shadowstep","premeditation","ghostlyStrike","hungerForBlood","RogueSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","cssScheme","knownIssues","warnings","simUI","updateOn","sim","encounter","changeEmitter","getContent","hasNoArmor","target","getTargets","getStats","getStat","Stat","StatArmor","getGear","getEquippedItem","ItemSlot","ItemSlotMainHand","item","weaponType","WeaponType","WeaponTypeDagger","ItemSlotOffHand","useFeint","getMajorGlyphs","includes","mhWeaponSpeed","weaponSpeed","ohWeaponSpeed","getSpecOptions","Rogue_Options_PoisonImbue","epStats","StatAgility","StatStrength","StatAttackPower","StatMeleeHit","StatMeleeCrit","StatSpellHit","StatSpellCrit","StatMeleeHaste","StatArmorPenetration","StatExpertise","epPseudoStats","PseudoStat","PseudoStatMainHandDps","PseudoStatOffHandDps","epReferenceStat","displayStats","StatHealth","StatStamina","defaults","Presets.PRERAID_PRESET_ASSASSINATION","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultRotation","talents","Presets.AssassinationTalents","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","giftOfTheWild","TristateEffect","TristateEffectImproved","bloodlust","strengthOfEarthTotem","icyTalons","leaderOfThePack","abominationsMight","swiftRetribution","elementalOath","sanctifiedRetribution","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfMight","debuffs","Debuffs","heartOfTheCrusader","mangle","sunderArmor","faerieFire","shadowMastery","earthAndMoon","bloodFrenzy","playerInputs","RogueInputs.ApplyPoisonsManually","playerIconInputs","RogueInputs.MainHandImbue","RogueInputs.OffHandImbue","rotationInputs","RogueInputs.RogueRotationConfig","includeBuffDebuffInputs","IconInputs.SpellCritBuff","IconInputs.SpellCritDebuff","IconInputs.SpellHitDebuff","IconInputs.SpellDamageDebuff","excludeBuffDebuffInputs","otherInputs","RogueInputs.StartingOverkillDuration","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","Presets.CombatTalents","Presets.SubtletyTalents","Presets.HemoSubtletyTalents","Presets.PRERAID_PRESET_COMBAT","Presets.P1_PRESET_ASSASSINATION","Presets.P1_PRESET_COMBAT","Presets.P2_PRESET_ASSASSINATION","Presets.P2_PRESET_COMBAT","this","on","c","options","AssassinationPriorityUnknown","CombatPriority","CombatPriorityUnknown","SubtletyPriorityUnknown","setRotation","getNumTargets","setSpecOptions"],"mappings":"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"}